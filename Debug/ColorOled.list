
ColorOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a198  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800a338  0800a338  0001a338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa0c  0800aa0c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa0c  0800aa0c  0001aa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa14  0800aa14  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa14  0800aa14  0001aa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800aa1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031ec  200001e8  0800ac04  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200033d4  0800ac04  000233d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127b1  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d31  00000000  00000000  000329c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00035700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018653  00000000  00000000  00037110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118ae  00000000  00000000  0004f763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd63  00000000  00000000  00061011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecd74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c2c  00000000  00000000  000ecdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a320 	.word	0x0800a320

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a320 	.word	0x0800a320

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <GFX_SetFont+0x1c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000214 	.word	0x20000214

0800101c <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ILI_Color color)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	460b      	mov	r3, r1
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	4613      	mov	r3, r2
 8001030:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b7e      	cmp	r3, #126	; 0x7e
 8001036:	d862      	bhi.n	80010fe <GFX_DrawChar+0xe2>

		for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001038:	2300      	movs	r3, #0
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	e057      	b.n	80010ee <GFX_DrawChar+0xd2>
		{
	        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <GFX_DrawChar+0xec>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	3b20      	subs	r3, #32
 8001046:	4930      	ldr	r1, [pc, #192]	; (8001108 <GFX_DrawChar+0xec>)
 8001048:	6809      	ldr	r1, [r1, #0]
 800104a:	3101      	adds	r1, #1
 800104c:	7809      	ldrb	r1, [r1, #0]
 800104e:	fb01 f103 	mul.w	r1, r1, r3
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	440b      	add	r3, r1
 8001056:	3302      	adds	r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	75bb      	strb	r3, [r7, #22]

	        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800105e:	2300      	movs	r3, #0
 8001060:	757b      	strb	r3, [r7, #21]
 8001062:	e03a      	b.n	80010da <GFX_DrawChar+0xbe>
	        {
	            if(line & 1) // Check last pixel in line
 8001064:	7dbb      	ldrb	r3, [r7, #22]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d02c      	beq.n	80010c8 <GFX_DrawChar+0xac>
	            {
	            	if(size == 1)
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <GFX_DrawChar+0xf0>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d10e      	bne.n	8001094 <GFX_DrawChar+0x78>
	            	{
	            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	4413      	add	r3, r2
 800107e:	b2d8      	uxtb	r0, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	7d7b      	ldrb	r3, [r7, #21]
 8001086:	4413      	add	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	88ba      	ldrh	r2, [r7, #4]
 800108c:	4619      	mov	r1, r3
 800108e:	f001 f9b3 	bl	80023f8 <setPixel>
 8001092:	e019      	b.n	80010c8 <GFX_DrawChar+0xac>
	            	}
	            	else
	            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	4a1d      	ldr	r2, [pc, #116]	; (800110c <GFX_DrawChar+0xf0>)
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	fb02 f203 	mul.w	r2, r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	18d0      	adds	r0, r2, r3
 80010a2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010a6:	4a19      	ldr	r2, [pc, #100]	; (800110c <GFX_DrawChar+0xf0>)
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	fb02 f203 	mul.w	r2, r2, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	18d1      	adds	r1, r2, r3
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <GFX_DrawChar+0xf0>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <GFX_DrawChar+0xf0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b29c      	uxth	r4, r3
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	4623      	mov	r3, r4
 80010c4:	f000 f8fa 	bl	80012bc <GFX_DrawFillRectangle>
	        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80010c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	757b      	strb	r3, [r7, #21]
 80010d4:	7dbb      	ldrb	r3, [r7, #22]
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	75bb      	strb	r3, [r7, #22]
 80010da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <GFX_DrawChar+0xec>)
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	4293      	cmp	r3, r2
 80010e6:	dbbd      	blt.n	8001064 <GFX_DrawChar+0x48>
		for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	3301      	adds	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <GFX_DrawChar+0xec>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	7dfa      	ldrb	r2, [r7, #23]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3a0      	bcc.n	800103e <GFX_DrawChar+0x22>
 80010fc:	e000      	b.n	8001100 <GFX_DrawChar+0xe4>
	if(chr > 0x7E) return; // chr > '~'
 80010fe:	bf00      	nop
	            }
	        }
	    }

}
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	bf00      	nop
 8001108:	20000214 	.word	0x20000214
 800110c:	20000000 	.word	0x20000000

08001110 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, ILI_Color color)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001128:	e015      	b.n	8001156 <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	7cfa      	ldrb	r2, [r7, #19]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	6978      	ldr	r0, [r7, #20]
 8001132:	f7ff ff73 	bl	800101c <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <GFX_DrawString+0x5c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <GFX_DrawString+0x60>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	fb03 f302 	mul.w	r3, r3, r2
 8001148:	3301      	adds	r3, #1
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	617b      	str	r3, [r7, #20]


		znak = *str; // Next char
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	607a      	str	r2, [r7, #4]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1e3      	bne.n	800112a <GFX_DrawString+0x1a>
	}
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000214 	.word	0x20000214
 8001170:	20000000 	.word	0x20000000

08001174 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ILI_Color color)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800118c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1acb      	subs	r3, r1, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	bfb8      	it	lt
 800119a:	425b      	neglt	r3, r3
 800119c:	429a      	cmp	r2, r3
 800119e:	bfcc      	ite	gt
 80011a0:	2301      	movgt	r3, #1
 80011a2:	2300      	movle	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80011a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00b      	beq.n	80011c8 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dd0b      	ble.n	80011e8 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bfb8      	it	lt
 8001200:	425b      	neglt	r3, r3
 8001202:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001204:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001208:	0fda      	lsrs	r2, r3, #31
 800120a:	4413      	add	r3, r2
 800120c:	105b      	asrs	r3, r3, #1
 800120e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	da02      	bge.n	800121e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800121c:	e02e      	b.n	800127c <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 800121e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001222:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001224:	e02a      	b.n	800127c <GFX_WriteLine+0x108>
	        if (steep) {
 8001226:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	b2d1      	uxtb	r1, r2
 8001236:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001238:	4618      	mov	r0, r3
 800123a:	f001 f8dd 	bl	80023f8 <setPixel>
 800123e:	e007      	b.n	8001250 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	b2d1      	uxtb	r1, r2
 8001248:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800124a:	4618      	mov	r0, r3
 800124c:	f001 f8d4 	bl	80023f8 <setPixel>
	        }
	        err -= dy;
 8001250:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001252:	8abb      	ldrh	r3, [r7, #20]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800125a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800125e:	2b00      	cmp	r3, #0
 8001260:	da09      	bge.n	8001276 <GFX_WriteLine+0x102>
	            y_start += ystep;
 8001262:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	4413      	add	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800126c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800126e:	8afb      	ldrh	r3, [r7, #22]
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3301      	adds	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	ddd0      	ble.n	8001226 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3730      	adds	r7, #48	; 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ILI_Color color)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af02      	add	r7, sp, #8
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f7ff ff60 	bl	8001174 <GFX_WriteLine>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ILI_Color color)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	4611      	mov	r1, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	460b      	mov	r3, r1
 80012cc:	80fb      	strh	r3, [r7, #6]
 80012ce:	4613      	mov	r3, r2
 80012d0:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e008      	b.n	80012ea <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80012d8:	88ba      	ldrh	r2, [r7, #4]
 80012da:	8c3b      	ldrh	r3, [r7, #32]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ffd5 	bl	800128e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf0      	blt.n	80012d8 <GFX_DrawFillRectangle+0x1c>
    }

}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GFX_DrawCircle>:
#endif
#if USING_CIRCLE == 1
void GFX_DrawCircle(int x0, int y0, uint16_t r, ILI_Color color)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	4611      	mov	r1, r2
 800130c:	461a      	mov	r2, r3
 800130e:	460b      	mov	r3, r1
 8001310:	80fb      	strh	r3, [r7, #6]
 8001312:	4613      	mov	r3, r2
 8001314:	80bb      	strh	r3, [r7, #4]
    int16_t f = 1 - r;
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	f1c3 0301 	rsb	r3, r3, #1
 800131c:	b29b      	uxth	r3, r3
 800131e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	461a      	mov	r2, r3
 8001328:	03d2      	lsls	r2, r2, #15
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	b29b      	uxth	r3, r3
 8001330:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	82fb      	strh	r3, [r7, #22]

    GFX_DrawPixel(x0  , y0+r, color);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	b2d8      	uxtb	r0, r3
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	4619      	mov	r1, r3
 800134e:	f001 f853 	bl	80023f8 <setPixel>
    GFX_DrawPixel(x0  , y0-r, color);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	b2d8      	uxtb	r0, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	88ba      	ldrh	r2, [r7, #4]
 8001364:	4619      	mov	r1, r3
 8001366:	f001 f847 	bl	80023f8 <setPixel>
    GFX_DrawPixel(x0+r, y0  , color);
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4413      	add	r3, r2
 8001374:	b2db      	uxtb	r3, r3
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	b2d1      	uxtb	r1, r2
 800137a:	88ba      	ldrh	r2, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f001 f83b 	bl	80023f8 <setPixel>
    GFX_DrawPixel(x0-r, y0  , color);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	b2d1      	uxtb	r1, r2
 8001392:	88ba      	ldrh	r2, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f001 f82f 	bl	80023f8 <setPixel>

    while (x<y) {
 800139a:	e0a1      	b.n	80014e0 <GFX_DrawCircle+0x1e0>
        if (f >= 0) {
 800139c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0e      	blt.n	80013c2 <GFX_DrawCircle+0xc2>
            y--;
 80013a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80013b0:	8b7b      	ldrh	r3, [r7, #26]
 80013b2:	3302      	adds	r3, #2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 80013b8:	8bfa      	ldrh	r2, [r7, #30]
 80013ba:	8b7b      	ldrh	r3, [r7, #26]
 80013bc:	4413      	add	r3, r2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80013c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80013ce:	8bbb      	ldrh	r3, [r7, #28]
 80013d0:	3302      	adds	r3, #2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 80013d6:	8bfa      	ldrh	r2, [r7, #30]
 80013d8:	8bbb      	ldrh	r3, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	83fb      	strh	r3, [r7, #30]

        GFX_DrawPixel(x0 + x, y0 + y, color);
 80013e0:	8b3b      	ldrh	r3, [r7, #24]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4413      	add	r3, r2
 80013ea:	b2d8      	uxtb	r0, r3
 80013ec:	8afb      	ldrh	r3, [r7, #22]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	88ba      	ldrh	r2, [r7, #4]
 80013fa:	4619      	mov	r1, r3
 80013fc:	f000 fffc 	bl	80023f8 <setPixel>
        GFX_DrawPixel(x0 - x, y0 + y, color);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	8b3b      	ldrh	r3, [r7, #24]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2d8      	uxtb	r0, r3
 800140c:	8afb      	ldrh	r3, [r7, #22]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4413      	add	r3, r2
 8001416:	b2db      	uxtb	r3, r3
 8001418:	88ba      	ldrh	r2, [r7, #4]
 800141a:	4619      	mov	r1, r3
 800141c:	f000 ffec 	bl	80023f8 <setPixel>
        GFX_DrawPixel(x0 + x, y0 - y, color);
 8001420:	8b3b      	ldrh	r3, [r7, #24]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b2d8      	uxtb	r0, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	8afb      	ldrh	r3, [r7, #22]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	88ba      	ldrh	r2, [r7, #4]
 800143a:	4619      	mov	r1, r3
 800143c:	f000 ffdc 	bl	80023f8 <setPixel>
        GFX_DrawPixel(x0 - x, y0 - y, color);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	8b3b      	ldrh	r3, [r7, #24]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	b2d8      	uxtb	r0, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	8afb      	ldrh	r3, [r7, #22]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	88ba      	ldrh	r2, [r7, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	f000 ffcc 	bl	80023f8 <setPixel>
        GFX_DrawPixel(x0 + y, y0 + x, color);
 8001460:	8afb      	ldrh	r3, [r7, #22]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b2d8      	uxtb	r0, r3
 800146c:	8b3b      	ldrh	r3, [r7, #24]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4413      	add	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	88ba      	ldrh	r2, [r7, #4]
 800147a:	4619      	mov	r1, r3
 800147c:	f000 ffbc 	bl	80023f8 <setPixel>
        GFX_DrawPixel(x0 - y, y0 + x, color);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	8afb      	ldrh	r3, [r7, #22]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	8b3b      	ldrh	r3, [r7, #24]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	88ba      	ldrh	r2, [r7, #4]
 800149a:	4619      	mov	r1, r3
 800149c:	f000 ffac 	bl	80023f8 <setPixel>
        GFX_DrawPixel(x0 + y, y0 - x, color);
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	b2d8      	uxtb	r0, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	8b3b      	ldrh	r3, [r7, #24]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	88ba      	ldrh	r2, [r7, #4]
 80014ba:	4619      	mov	r1, r3
 80014bc:	f000 ff9c 	bl	80023f8 <setPixel>
        GFX_DrawPixel(x0 - y, y0 - x, color);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	8afb      	ldrh	r3, [r7, #22]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b2d8      	uxtb	r0, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	8b3b      	ldrh	r3, [r7, #24]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	88ba      	ldrh	r2, [r7, #4]
 80014da:	4619      	mov	r1, r3
 80014dc:	f000 ff8c 	bl	80023f8 <setPixel>
    while (x<y) {
 80014e0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f6ff af57 	blt.w	800139c <GFX_DrawCircle+0x9c>
    }

}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Read8>:
 */
#include"main.h"
#include"bmp280.h"

uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->i2c, ((bmp->addr)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	b29b      	uxth	r3, r3
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b299      	uxth	r1, r3
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	b29a      	uxth	r2, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	2301      	movs	r3, #1
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	f107 030f 	add.w	r3, r7, #15
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	f002 f802 	bl	8003530 <HAL_I2C_Mem_Read>

	return Value;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <Write8>:
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af04      	add	r7, sp, #16
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	70fb      	strb	r3, [r7, #3]
 8001542:	4613      	mov	r3, r2
 8001544:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->i2c, ((bmp->addr)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	791b      	ldrb	r3, [r3, #4]
 800154e:	b29b      	uxth	r3, r3
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	b299      	uxth	r1, r3
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	b29a      	uxth	r2, r3
 8001558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	1cbb      	adds	r3, r7, #2
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	f001 fee8 	bl	800333c <HAL_I2C_Mem_Write>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <Read16>:

uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af04      	add	r7, sp, #16
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];
	HAL_I2C_Mem_Read(bmp->i2c, ((bmp->addr)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	791b      	ldrb	r3, [r3, #4]
 8001588:	b29b      	uxth	r3, r3
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	b299      	uxth	r1, r3
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	b29a      	uxth	r2, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	2302      	movs	r3, #2
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	f001 ffc4 	bl	8003530 <HAL_I2C_Mem_Read>
	return ((Value[1]<<8)|Value[0]);
 80015a8:	7b7b      	ldrb	r3, [r7, #13]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	b29b      	uxth	r3, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <Read24>:
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->i2c, ((bmp->addr)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	791b      	ldrb	r3, [r3, #4]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b299      	uxth	r1, r3
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	9302      	str	r3, [sp, #8]
 80015e4:	2303      	movs	r3, #3
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	f001 ff9e 	bl	8003530 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 80015f4:	7b3b      	ldrb	r3, [r7, #12]
 80015f6:	041a      	lsls	r2, r3, #16
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	4313      	orrs	r3, r2
 80015fe:	7bba      	ldrb	r2, [r7, #14]
 8001600:	4313      	orrs	r3, r2
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <BMP_SET_MODE>:


void BMP_SET_MODE(BMP280_t *bmp, uint8_t Mode)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d901      	bls.n	8001620 <BMP_SET_MODE+0x16>
 800161c:	2303      	movs	r3, #3
 800161e:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001620:	21f4      	movs	r1, #244	; 0xf4
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff68 	bl	80014f8 <Read8>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]

	Tmp = (Tmp & 0xFC); // Tmp (xxxx xx00)
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	f023 0303 	bic.w	r3, r3, #3
 8001632:	73fb      	strb	r3, [r7, #15]
	Tmp =(Tmp |Mode);
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	4313      	orrs	r3, r2
 800163a:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	461a      	mov	r2, r3
 8001640:	21f4      	movs	r1, #244	; 0xf4
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff77 	bl	8001536 <Write8>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <BMP280_SetPressureOversampling>:

void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	2b05      	cmp	r3, #5
 8001660:	d901      	bls.n	8001666 <BMP280_SetPressureOversampling+0x16>
 8001662:	2305      	movs	r3, #5
 8001664:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001666:	21f4      	movs	r1, #244	; 0xf4
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff45 	bl	80014f8 <Read8>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	f023 031c 	bic.w	r3, r3, #28
 8001678:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	f003 031c 	and.w	r3, r3, #28
 8001684:	b25a      	sxtb	r2, r3
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4313      	orrs	r3, r2
 800168c:	b25b      	sxtb	r3, r3
 800168e:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	461a      	mov	r2, r3
 8001694:	21f4      	movs	r1, #244	; 0xf4
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff4d 	bl	8001536 <Write8>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d901      	bls.n	80016ba <BMP280_SetTemperatureOversampling+0x16>
 80016b6:	2305      	movs	r3, #5
 80016b8:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80016ba:	21f4      	movs	r1, #244	; 0xf4
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff1b 	bl	80014f8 <Read8>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	015b      	lsls	r3, r3, #5
 80016d2:	b25a      	sxtb	r2, r3
 80016d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d8:	4313      	orrs	r3, r2
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	461a      	mov	r2, r3
 80016e2:	21f4      	movs	r1, #244	; 0xf4
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff26 	bl	8001536 <Write8>
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
uint32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	uint32_t Tmp;

	Tmp = Read24(bmp, BMP280_TEMPDATA);
 80016fa:	21fa      	movs	r1, #250	; 0xfa
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff5f 	bl	80015c0 <Read24>
 8001702:	60f8      	str	r0, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	60fb      	str	r3, [r7, #12]

	return Tmp;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
uint32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	uint32_t Tmp;

	Tmp = Read24(bmp, BMP280_PRESSUREDATA);
 800171c:	21f7      	movs	r1, #247	; 0xf7
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff4e 	bl	80015c0 <Read24>
 8001724:	60f8      	str	r0, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	60fb      	str	r3, [r7, #12]

	return Tmp;
 800172c:	68fb      	ldr	r3, [r7, #12]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffd6 	bl	80016f2 <BMP280_ReadTemperatureRaw>
 8001746:	4603      	mov	r3, r0
 8001748:	617b      	str	r3, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	10da      	asrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	8b5b      	ldrh	r3, [r3, #26]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	12db      	asrs	r3, r3, #11
 8001762:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	111b      	asrs	r3, r3, #4
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	8b52      	ldrh	r2, [r2, #26]
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	1112      	asrs	r2, r2, #4
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	8b49      	ldrh	r1, [r1, #26]
 8001776:	1a52      	subs	r2, r2, r1
 8001778:	fb02 f303 	mul.w	r3, r2, r3
 800177c:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	139b      	asrs	r3, r3, #14
 800178a:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	441a      	add	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3380      	adds	r3, #128	; 0x80
 80017a2:	121b      	asrs	r3, r3, #8
 80017a4:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f7fe fec4 	bl	8000534 <__aeabi_i2d>
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <BMP280_ReadTemperature+0x9c>)
 80017b2:	f7ff f853 	bl	800085c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff fa1b 	bl	8000bf8 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	ee07 3a90 	vmov	s15, r3
}
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40590000 	.word	0x40590000

080017d8 <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff ffa7 	bl	8001738 <BMP280_ReadTemperature>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	105b      	asrs	r3, r3, #1
 80017fa:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80017fe:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	109b      	asrs	r3, r3, #2
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	1092      	asrs	r2, r2, #2
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	12db      	asrs	r3, r3, #11
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001820:	461a      	mov	r2, r3
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	fb03 f302 	mul.w	r3, r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4413      	add	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	109a      	asrs	r2, r3, #2
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	4413      	add	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001846:	4619      	mov	r1, r3
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	109b      	asrs	r3, r3, #2
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	1092      	asrs	r2, r2, #2
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	135b      	asrs	r3, r3, #13
 8001856:	fb03 f301 	mul.w	r3, r3, r1
 800185a:	10da      	asrs	r2, r3, #3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001862:	4619      	mov	r1, r3
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fb03 f301 	mul.w	r3, r3, r1
 800186a:	105b      	asrs	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	149b      	asrs	r3, r3, #18
 8001870:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	8b92      	ldrh	r2, [r2, #28]
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	13db      	asrs	r3, r3, #15
 8001882:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 800188a:	2301      	movs	r3, #1
 800188c:	e055      	b.n	800193a <BMP280_ReadPressureAndTemperature+0x162>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff ff40 	bl	8001714 <BMP280_ReadPressureRaw>
 8001894:	4603      	mov	r3, r0
 8001896:	613b      	str	r3, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f5c3 1280 	rsb	r2, r3, #1048576	; 0x100000
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	131b      	asrs	r3, r3, #12
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f640 4235 	movw	r2, #3125	; 0xc35
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db06      	blt.n	80018c2 <BMP280_ReadPressureAndTemperature+0xea>
	{
		p = (p << 1) / ((uint32_t)var1);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005a      	lsls	r2, r3, #1
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	e005      	b.n	80018ce <BMP280_ReadPressureAndTemperature+0xf6>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80018d4:	4619      	mov	r1, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	08d2      	lsrs	r2, r2, #3
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	0b5b      	lsrs	r3, r3, #13
 80018e4:	fb03 f301 	mul.w	r3, r3, r1
 80018e8:	131b      	asrs	r3, r3, #12
 80018ea:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	461a      	mov	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80018f8:	fb03 f302 	mul.w	r3, r3, r2
 80018fc:	135b      	asrs	r3, r3, #13
 80018fe:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4413      	add	r3, r2
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800190c:	4413      	add	r3, r2
 800190e:	111a      	asrs	r2, r3, #4
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4413      	add	r3, r2
 8001914:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001916:	69f8      	ldr	r0, [r7, #28]
 8001918:	f7fe fdfc 	bl	8000514 <__aeabi_ui2d>
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <BMP280_ReadPressureAndTemperature+0x16c>)
 8001922:	f7fe ff9b 	bl	800085c <__aeabi_ddiv>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f963 	bl	8000bf8 <__aeabi_d2f>
 8001932:	4602      	mov	r2, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	601a      	str	r2, [r3, #0]

	return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40590000 	.word	0x40590000

08001948 <BMP280_Init>:

uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->i2c = i2c;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	601a      	str	r2, [r3, #0]
	bmp->addr = Address;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001962:	21d0      	movs	r1, #208	; 0xd0
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fdc7 	bl	80014f8 <Read8>
 800196a:	4603      	mov	r3, r0
 800196c:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	2b58      	cmp	r3, #88	; 0x58
 8001972:	d001      	beq.n	8001978 <BMP280_Init+0x30>
	{
		return 1;
 8001974:	2301      	movs	r3, #1
 8001976:	e06c      	b.n	8001a52 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001978:	2188      	movs	r1, #136	; 0x88
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fdfa 	bl	8001574 <Read16>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001988:	218a      	movs	r1, #138	; 0x8a
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fdf2 	bl	8001574 <Read16>
 8001990:	4603      	mov	r3, r0
 8001992:	b21a      	sxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001998:	218c      	movs	r1, #140	; 0x8c
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fdea 	bl	8001574 <Read16>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 80019a8:	218e      	movs	r1, #142	; 0x8e
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fde2 	bl	8001574 <Read16>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 80019b8:	2190      	movs	r1, #144	; 0x90
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff fdda 	bl	8001574 <Read16>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 80019c8:	2192      	movs	r1, #146	; 0x92
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff fdd2 	bl	8001574 <Read16>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 80019d8:	2194      	movs	r1, #148	; 0x94
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff fdca 	bl	8001574 <Read16>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 80019e8:	2196      	movs	r1, #150	; 0x96
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fdc2 	bl	8001574 <Read16>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 80019f8:	2198      	movs	r1, #152	; 0x98
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fdba 	bl	8001574 <Read16>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001a08:	219a      	movs	r1, #154	; 0x9a
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7ff fdb2 	bl	8001574 <Read16>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001a18:	219c      	movs	r1, #156	; 0x9c
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f7ff fdaa 	bl	8001574 <Read16>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001a28:	219e      	movs	r1, #158	; 0x9e
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff fda2 	bl	8001574 <Read16>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	831a      	strh	r2, [r3, #24]
	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001a38:	2105      	movs	r1, #5
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fe32 	bl	80016a4 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001a40:	2105      	movs	r1, #5
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff fe04 	bl	8001650 <BMP280_SetPressureOversampling>
	BMP_SET_MODE(bmp, BMP280_NORMALMODE);
 8001a48:	2103      	movs	r1, #3
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f7ff fddd 	bl	800160a <BMP_SET_MODE>
	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	; 0x30
 8001a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a64      	ldr	r2, [pc, #400]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b62      	ldr	r3, [pc, #392]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a5d      	ldr	r2, [pc, #372]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a56      	ldr	r2, [pc, #344]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b54      	ldr	r3, [pc, #336]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a4f      	ldr	r2, [pc, #316]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b4d      	ldr	r3, [pc, #308]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a41      	ldr	r2, [pc, #260]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <MX_GPIO_Init+0x1b0>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(l3gd20_cs_GPIO_Port, l3gd20_cs_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	483c      	ldr	r0, [pc, #240]	; (8001c10 <MX_GPIO_Init+0x1b4>)
 8001b20:	f001 faae 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dc_oled_GPIO_Port, dc_oled_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2102      	movs	r1, #2
 8001b28:	483a      	ldr	r0, [pc, #232]	; (8001c14 <MX_GPIO_Init+0x1b8>)
 8001b2a:	f001 faa9 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_oled_GPIO_Port, cs_oled_Pin, GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2110      	movs	r1, #16
 8001b32:	4838      	ldr	r0, [pc, #224]	; (8001c14 <MX_GPIO_Init+0x1b8>)
 8001b34:	f001 faa4 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rst_oled_GPIO_Port, rst_oled_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	4836      	ldr	r0, [pc, #216]	; (8001c18 <MX_GPIO_Init+0x1bc>)
 8001b3e:	f001 fa9f 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(anal_GPIO_Port, anal_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2101      	movs	r1, #1
 8001b46:	4835      	ldr	r0, [pc, #212]	; (8001c1c <MX_GPIO_Init+0x1c0>)
 8001b48:	f001 fa9a 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b52:	4833      	ldr	r0, [pc, #204]	; (8001c20 <MX_GPIO_Init+0x1c4>)
 8001b54:	f001 fa94 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = l3gd20_cs_Pin;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(l3gd20_cs_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4828      	ldr	r0, [pc, #160]	; (8001c10 <MX_GPIO_Init+0x1b4>)
 8001b70:	f001 f902 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dc_oled_Pin;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(dc_oled_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4822      	ldr	r0, [pc, #136]	; (8001c14 <MX_GPIO_Init+0x1b8>)
 8001b8c:	f001 f8f4 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = cs_oled_Pin;
 8001b90:	2310      	movs	r3, #16
 8001b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(cs_oled_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481b      	ldr	r0, [pc, #108]	; (8001c14 <MX_GPIO_Init+0x1b8>)
 8001ba8:	f001 f8e6 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = rst_oled_Pin;
 8001bac:	2310      	movs	r3, #16
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(rst_oled_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4815      	ldr	r0, [pc, #84]	; (8001c18 <MX_GPIO_Init+0x1bc>)
 8001bc4:	f001 f8d8 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = anal_Pin;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(anal_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	480f      	ldr	r0, [pc, #60]	; (8001c1c <MX_GPIO_Init+0x1c0>)
 8001be0:	f001 f8ca 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	2301      	movs	r3, #1
 8001bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4808      	ldr	r0, [pc, #32]	; (8001c20 <MX_GPIO_Init+0x1c4>)
 8001bfe:	f001 f8bb 	bl	8002d78 <HAL_GPIO_Init>

}
 8001c02:	bf00      	nop
 8001c04:	3730      	adds	r7, #48	; 0x30
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40020c00 	.word	0x40020c00

08001c24 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c2a:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <MX_I2C2_Init+0x54>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c30:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <MX_I2C2_Init+0x58>)
 8001c32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c62:	f001 fa27 	bl	80030b4 <HAL_I2C_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c6c:	f000 fab4 	bl	80021d8 <Error_Handler>
  }

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000218 	.word	0x20000218
 8001c78:	40005800 	.word	0x40005800
 8001c7c:	00061a80 	.word	0x00061a80

08001c80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_I2C_MspInit+0xa4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d13c      	bne.n	8001d1c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_I2C_MspInit+0xa8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_I2C_MspInit+0xa8>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_I2C_MspInit+0xa8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4814      	ldr	r0, [pc, #80]	; (8001d2c <HAL_I2C_MspInit+0xac>)
 8001cdc:	f001 f84c 	bl	8002d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce4:	2312      	movs	r3, #18
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001cf0:	2309      	movs	r3, #9
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480c      	ldr	r0, [pc, #48]	; (8001d2c <HAL_I2C_MspInit+0xac>)
 8001cfc:	f001 f83c 	bl	8002d78 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_I2C_MspInit+0xa8>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_I2C_MspInit+0xa8>)
 8001d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_I2C_MspInit+0xa8>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	; 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40005800 	.word	0x40005800
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020400 	.word	0x40020400

08001d30 <L3_Write>:
#include "l3gd20.h"
uint8_t ctrl_reg_1_data = 0b11111111;
uint8_t read = (READ|READ_REG_L3|MULTIPLE_READ);
uint8_t dataTosend[]={0x28|0x80,0x29|0x80,0x2a|0x80,0x2b|0x80,0x2c|0x80,0x2d|0x80};
void L3_Write(L3GD_t *l3,uint8_t reg,uint8_t data)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(l3gd20_cs_GPIO_Port, l3gd20_cs_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2108      	movs	r1, #8
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <L3_Write+0x4c>)
 8001d46:	f001 f99b 	bl	8003080 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(l3->l3gd_spi, &reg, 1, L3GD20_TIMEOUT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	1cf9      	adds	r1, r7, #3
 8001d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d54:	2201      	movs	r2, #1
 8001d56:	f002 fe3d 	bl	80049d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(l3->l3gd_spi, &data, 1, L3GD20_TIMEOUT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	1cb9      	adds	r1, r7, #2
 8001d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d64:	2201      	movs	r2, #1
 8001d66:	f002 fe35 	bl	80049d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(l3gd20_cs_GPIO_Port, l3gd20_cs_Pin, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2108      	movs	r1, #8
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <L3_Write+0x4c>)
 8001d70:	f001 f986 	bl	8003080 <HAL_GPIO_WritePin>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000

08001d80 <L3GD20_Read>:
void L3GD20_Read(L3GD_t *l3,int16_t *X,int16_t *Y,int16_t *Z)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
	L3_Write(l3, CTRL_REG_1, ctrl_reg_1_data);
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <L3GD20_Read+0x94>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	2120      	movs	r1, #32
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff ffca 	bl	8001d30 <L3_Write>
	HAL_GPIO_WritePin(l3gd20_cs_GPIO_Port, l3gd20_cs_Pin, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2108      	movs	r1, #8
 8001da0:	481d      	ldr	r0, [pc, #116]	; (8001e18 <L3GD20_Read+0x98>)
 8001da2:	f001 f96d 	bl	8003080 <HAL_GPIO_WritePin>
	uint8_t data[]={0,0,0,0,0,0,0,0};
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <L3GD20_Read+0x9c>)
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db0:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_SPI_TransmitReceive(l3->l3gd_spi, &read, data, 6, L3GD20_TIMEOUT);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	f107 0210 	add.w	r2, r7, #16
 8001dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	4916      	ldr	r1, [pc, #88]	; (8001e20 <L3GD20_Read+0xa0>)
 8001dc6:	f002 ff39 	bl	8004c3c <HAL_SPI_TransmitReceive>
	*X=((data[1]<<8|data[0]));
 8001dca:	7c7b      	ldrb	r3, [r7, #17]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	7c3b      	ldrb	r3, [r7, #16]
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	801a      	strh	r2, [r3, #0]
	*Y=((data[3]<<8|data[2]));
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	b21a      	sxth	r2, r3
 8001de2:	7cbb      	ldrb	r3, [r7, #18]
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	4313      	orrs	r3, r2
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	801a      	strh	r2, [r3, #0]
	*Z=((data[5]<<8|data[4]));
 8001dee:	7d7b      	ldrb	r3, [r7, #21]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	7d3b      	ldrb	r3, [r7, #20]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(l3gd20_cs_GPIO_Port, l3gd20_cs_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	2108      	movs	r1, #8
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <L3GD20_Read+0x98>)
 8001e06:	f001 f93b 	bl	8003080 <HAL_GPIO_WritePin>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000001 	.word	0x20000001
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	0800a338 	.word	0x0800a338
 8001e20:	20000002 	.word	0x20000002

08001e24 <L3GD_Init>:
void L3GD_Init(L3GD_t *l3,SPI_HandleTypeDef *spi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	l3->l3gd_spi=spi;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	601a      	str	r2, [r3, #0]
	L3_Write(l3, CTRL_REG_1, ctrl_reg_1_data);
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <L3GD_Init+0x28>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2120      	movs	r1, #32
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff77 	bl	8001d30 <L3_Write>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000001 	.word	0x20000001

08001e50 <lsm_write>:
uint8_t ctrl1_data=0b01100111;
uint8_t ctrl5_data=0b00010000;
uint8_t ctrl6_data=0b01100000;
uint8_t ctrl7_data=0b00000000;
void lsm_write(LSM_t *lsm,uint8_t reg,uint8_t data)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(lsm->i2c, ((lsm->addres)<<1), reg, 1, &data, 1, lsm_TIMEOUT);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	791b      	ldrb	r3, [r3, #4]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	1cbb      	adds	r3, r7, #2
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	f001 fa5b 	bl	800333c <HAL_I2C_Mem_Write>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <Lsm303_Init>:
	lsm->Xoffsetacc/=1000;
	lsm->Yoffsetacc/=1000;
	lsm->Zoffsetacc/=1000;
}
void Lsm303_Init(LSM_t *lsm,I2C_HandleTypeDef* i2c,uint8_t addr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	71fb      	strb	r3, [r7, #7]
	lsm->i2c=i2c;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	601a      	str	r2, [r3, #0]
	lsm->addres=addr;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	79fa      	ldrb	r2, [r7, #7]
 8001ea8:	711a      	strb	r2, [r3, #4]
	lsm_write(lsm,CTRL_REG_1,ctrl1_data);
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <Lsm303_Init+0x6c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2120      	movs	r1, #32
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff ffcc 	bl	8001e50 <lsm_write>
	lsm_write(lsm, CTRL_REG_5, ctrl5_data);
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <Lsm303_Init+0x70>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2124      	movs	r1, #36	; 0x24
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff ffc5 	bl	8001e50 <lsm_write>
	lsm_write(lsm, CTRL_REG_6, ctrl6_data);
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <Lsm303_Init+0x74>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2125      	movs	r1, #37	; 0x25
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff ffbe 	bl	8001e50 <lsm_write>
	lsm_write(lsm, CTRL_REG_7, ctrl7_data);
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <Lsm303_Init+0x78>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2126      	movs	r1, #38	; 0x26
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff ffb7 	bl	8001e50 <lsm_write>
	lsm->Xoffsetacc=0;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
	lsm->Yoffsetacc=0;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
	lsm->Zoffsetacc=0;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000003 	.word	0x20000003
 8001f00:	20000004 	.word	0x20000004
 8001f04:	20000005 	.word	0x20000005
 8001f08:	20000204 	.word	0x20000204

08001f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	; 0x30
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f12:	f000 fdb5 	bl	8002a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f16:	f000 f8f7 	bl	8002108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f1a:	f7ff fd9f 	bl	8001a5c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f1e:	f000 f961 	bl	80021e4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f22:	f000 fd11 	bl	8002948 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001f26:	f7ff fe7d 	bl	8001c24 <MX_I2C2_Init>
  MX_SPI5_Init();
 8001f2a:	f000 f991 	bl	8002250 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  uint32_t czasStart=0,czasStop=0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  int czas=0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  uint8_t Uart[20];
 ssd1331_init(&hspi5);
 8001f3a:	4866      	ldr	r0, [pc, #408]	; (80020d4 <main+0x1c8>)
 8001f3c:	f000 fb1c 	bl	8002578 <ssd1331_init>
 Lsm303_Init(&lsm, &hi2c2, 0x1d);
 8001f40:	221d      	movs	r2, #29
 8001f42:	4965      	ldr	r1, [pc, #404]	; (80020d8 <main+0x1cc>)
 8001f44:	4865      	ldr	r0, [pc, #404]	; (80020dc <main+0x1d0>)
 8001f46:	f7ff ffa3 	bl	8001e90 <Lsm303_Init>
 //Lsm_cal(&lsm);
 GFX_SetFont(font_8x5);
 8001f4a:	4865      	ldr	r0, [pc, #404]	; (80020e0 <main+0x1d4>)
 8001f4c:	f7ff f856 	bl	8000ffc <GFX_SetFont>
 uint16_t i, j;

 	for(i = 0; i < OLED_HEIGHT; i ++){
 8001f50:	2300      	movs	r3, #0
 8001f52:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f54:	e013      	b.n	8001f7e <main+0x72>
 		for(j = 0; j < OLED_WIDTH; j ++){
 8001f56:	2300      	movs	r3, #0
 8001f58:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001f5a:	e00a      	b.n	8001f72 <main+0x66>
 			setPixel(j, i, BLACK);
 8001f5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001f62:	b2d1      	uxtb	r1, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fa46 	bl	80023f8 <setPixel>
 		for(j = 0; j < OLED_WIDTH; j ++){
 8001f6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f6e:	3301      	adds	r3, #1
 8001f70:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001f72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f74:	2b5f      	cmp	r3, #95	; 0x5f
 8001f76:	d9f1      	bls.n	8001f5c <main+0x50>
 	for(i = 0; i < OLED_HEIGHT; i ++){
 8001f78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f80:	2b3f      	cmp	r3, #63	; 0x3f
 8001f82:	d9e8      	bls.n	8001f56 <main+0x4a>

 		}

 	}
 	czasStart=HAL_GetTick();
 8001f84:	f000 fde2 	bl	8002b4c <HAL_GetTick>
 8001f88:	62b8      	str	r0, [r7, #40]	; 0x28
 	ssd1331_display(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 fa84 	bl	8002498 <ssd1331_display>
 	czasStop=HAL_GetTick();
 8001f90:	f000 fddc 	bl	8002b4c <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	; 0x24
 	czas=czasStop-czasStart;
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	623b      	str	r3, [r7, #32]
 	sprintf((char*)Uart,"%d",czas);
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	6a3a      	ldr	r2, [r7, #32]
 8001fa4:	494f      	ldr	r1, [pc, #316]	; (80020e4 <main+0x1d8>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fc14 	bl	80067d4 <siprintf>
 	GFX_DrawString(0, 0, (char*)Uart, BLUE);
 8001fac:	f107 0208 	add.w	r2, r7, #8
 8001fb0:	231f      	movs	r3, #31
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff f8ab 	bl	8001110 <GFX_DrawString>
    GFX_DrawCircle(48, 32, 15, BROWN);
 8001fba:	f248 1345 	movw	r3, #33093	; 0x8145
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	2030      	movs	r0, #48	; 0x30
 8001fc4:	f7ff f99c 	bl	8001300 <GFX_DrawCircle>
 	ssd1331_display(1);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f000 fa65 	bl	8002498 <ssd1331_display>
 	HAL_Delay(10000);
 8001fce:	f242 7010 	movw	r0, #10000	; 0x2710
 8001fd2:	f000 fdc7 	bl	8002b64 <HAL_Delay>
 	BMP280_Init(&BMP, &hi2c2, 0x76);
 8001fd6:	2276      	movs	r2, #118	; 0x76
 8001fd8:	493f      	ldr	r1, [pc, #252]	; (80020d8 <main+0x1cc>)
 8001fda:	4843      	ldr	r0, [pc, #268]	; (80020e8 <main+0x1dc>)
 8001fdc:	f7ff fcb4 	bl	8001948 <BMP280_Init>
 	float press,temp;
 	uint32_t czasoled=0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
 	L3GD_Init(&l3g, &hspi1);
 8001fe4:	4941      	ldr	r1, [pc, #260]	; (80020ec <main+0x1e0>)
 8001fe6:	4842      	ldr	r0, [pc, #264]	; (80020f0 <main+0x1e4>)
 8001fe8:	f7ff ff1c 	bl	8001e24 <L3GD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GetTick()-czasoled>100)
 8001fec:	f000 fdae 	bl	8002b4c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d9f8      	bls.n	8001fec <main+0xe0>
	  {
		  ssd1331_clear();
 8001ffa:	f000 fa21 	bl	8002440 <ssd1331_clear>
		  L3GD20_Read(&l3g, &x, &y, &z);
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <main+0x1e8>)
 8002000:	4a3d      	ldr	r2, [pc, #244]	; (80020f8 <main+0x1ec>)
 8002002:	493e      	ldr	r1, [pc, #248]	; (80020fc <main+0x1f0>)
 8002004:	483a      	ldr	r0, [pc, #232]	; (80020f0 <main+0x1e4>)
 8002006:	f7ff febb 	bl	8001d80 <L3GD20_Read>
		  BMP280_ReadPressureAndTemperature(&BMP, &press, &temp);
 800200a:	463a      	mov	r2, r7
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4619      	mov	r1, r3
 8002010:	4835      	ldr	r0, [pc, #212]	; (80020e8 <main+0x1dc>)
 8002012:	f7ff fbe1 	bl	80017d8 <BMP280_ReadPressureAndTemperature>
		  sprintf((char*)Uart,"%0.3f",press);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa9d 	bl	8000558 <__aeabi_f2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	f107 0008 	add.w	r0, r7, #8
 8002026:	4936      	ldr	r1, [pc, #216]	; (8002100 <main+0x1f4>)
 8002028:	f004 fbd4 	bl	80067d4 <siprintf>
		  GFX_DrawString(0, 0, (char*)Uart, BLUE);
 800202c:	f107 0208 	add.w	r2, r7, #8
 8002030:	231f      	movs	r3, #31
 8002032:	2100      	movs	r1, #0
 8002034:	2000      	movs	r0, #0
 8002036:	f7ff f86b 	bl	8001110 <GFX_DrawString>
		  sprintf((char*)Uart,"%0.3f",temp);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa8b 	bl	8000558 <__aeabi_f2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	f107 0008 	add.w	r0, r7, #8
 800204a:	492d      	ldr	r1, [pc, #180]	; (8002100 <main+0x1f4>)
 800204c:	f004 fbc2 	bl	80067d4 <siprintf>
		  GFX_DrawString(0, 10, (char*)Uart, BLUE);
 8002050:	f107 0208 	add.w	r2, r7, #8
 8002054:	231f      	movs	r3, #31
 8002056:	210a      	movs	r1, #10
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff f859 	bl	8001110 <GFX_DrawString>
		  sprintf((char*)Uart,"%d",x);
 800205e:	4b27      	ldr	r3, [pc, #156]	; (80020fc <main+0x1f0>)
 8002060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002064:	461a      	mov	r2, r3
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	491e      	ldr	r1, [pc, #120]	; (80020e4 <main+0x1d8>)
 800206c:	4618      	mov	r0, r3
 800206e:	f004 fbb1 	bl	80067d4 <siprintf>
		  GFX_DrawString(0, 20, (char*)Uart, BLUE);
 8002072:	f107 0208 	add.w	r2, r7, #8
 8002076:	231f      	movs	r3, #31
 8002078:	2114      	movs	r1, #20
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff f848 	bl	8001110 <GFX_DrawString>
		  sprintf((char*)Uart,"%0d",y);
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <main+0x1ec>)
 8002082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002086:	461a      	mov	r2, r3
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	491d      	ldr	r1, [pc, #116]	; (8002104 <main+0x1f8>)
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fba0 	bl	80067d4 <siprintf>
		  GFX_DrawString(0, 30, (char*)Uart, BLUE);
 8002094:	f107 0208 	add.w	r2, r7, #8
 8002098:	231f      	movs	r3, #31
 800209a:	211e      	movs	r1, #30
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff f837 	bl	8001110 <GFX_DrawString>
		  sprintf((char*)Uart,"%d",z);
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <main+0x1e8>)
 80020a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	490d      	ldr	r1, [pc, #52]	; (80020e4 <main+0x1d8>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f004 fb8f 	bl	80067d4 <siprintf>
		  GFX_DrawString(0, 40, (char*)Uart, BLUE);
 80020b6:	f107 0208 	add.w	r2, r7, #8
 80020ba:	231f      	movs	r3, #31
 80020bc:	2128      	movs	r1, #40	; 0x28
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff f826 	bl	8001110 <GFX_DrawString>
		  czas=HAL_GetTick();
 80020c4:	f000 fd42 	bl	8002b4c <HAL_GetTick>
 80020c8:	4603      	mov	r3, r0
 80020ca:	623b      	str	r3, [r7, #32]
		  ssd1331_display(0);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f000 f9e3 	bl	8002498 <ssd1331_display>
	  if(HAL_GetTick()-czasoled>100)
 80020d2:	e78b      	b.n	8001fec <main+0xe0>
 80020d4:	200002b4 	.word	0x200002b4
 80020d8:	20000218 	.word	0x20000218
 80020dc:	20000278 	.word	0x20000278
 80020e0:	0800a360 	.word	0x0800a360
 80020e4:	0800a340 	.word	0x0800a340
 80020e8:	2000028c 	.word	0x2000028c
 80020ec:	2000030c 	.word	0x2000030c
 80020f0:	20000270 	.word	0x20000270
 80020f4:	20000274 	.word	0x20000274
 80020f8:	200002b0 	.word	0x200002b0
 80020fc:	2000026c 	.word	0x2000026c
 8002100:	0800a344 	.word	0x0800a344
 8002104:	0800a34c 	.word	0x0800a34c

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b094      	sub	sp, #80	; 0x50
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	f107 0320 	add.w	r3, r7, #32
 8002112:	2230      	movs	r2, #48	; 0x30
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fcd4 	bl	8005ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <SystemClock_Config+0xc8>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <SystemClock_Config+0xc8>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <SystemClock_Config+0xc8>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <SystemClock_Config+0xcc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <SystemClock_Config+0xcc>)
 8002152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <SystemClock_Config+0xcc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002164:	2301      	movs	r3, #1
 8002166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216e:	2302      	movs	r3, #2
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002178:	2304      	movs	r3, #4
 800217a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800217c:	2364      	movs	r3, #100	; 0x64
 800217e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002180:	2302      	movs	r3, #2
 8002182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002184:	2304      	movs	r3, #4
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002188:	f107 0320 	add.w	r3, r7, #32
 800218c:	4618      	mov	r0, r3
 800218e:	f001 ff51 	bl	8004034 <HAL_RCC_OscConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002198:	f000 f81e 	bl	80021d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	230f      	movs	r3, #15
 800219e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a0:	2302      	movs	r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	2103      	movs	r1, #3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 f9ab 	bl	8004514 <HAL_RCC_ClockConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80021c4:	f000 f808 	bl	80021d8 <Error_Handler>
  }
}
 80021c8:	bf00      	nop
 80021ca:	3750      	adds	r7, #80	; 0x50
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40007000 	.word	0x40007000

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <Error_Handler+0x8>
	...

080021e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <MX_SPI1_Init+0x64>)
 80021ea:	4a18      	ldr	r2, [pc, #96]	; (800224c <MX_SPI1_Init+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <MX_SPI1_Init+0x64>)
 80021f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <MX_SPI1_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <MX_SPI1_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_SPI1_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_SPI1_Init+0x64>)
 8002210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002214:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_SPI1_Init+0x64>)
 8002218:	2238      	movs	r2, #56	; 0x38
 800221a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <MX_SPI1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <MX_SPI1_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <MX_SPI1_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_SPI1_Init+0x64>)
 8002230:	220a      	movs	r2, #10
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002234:	4804      	ldr	r0, [pc, #16]	; (8002248 <MX_SPI1_Init+0x64>)
 8002236:	f002 fb69 	bl	800490c <HAL_SPI_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002240:	f7ff ffca 	bl	80021d8 <Error_Handler>
  }

}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000030c 	.word	0x2000030c
 800224c:	40013000 	.word	0x40013000

08002250 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <MX_SPI5_Init+0x64>)
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <MX_SPI5_Init+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <MX_SPI5_Init+0x64>)
 800225c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002260:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_SPI5_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <MX_SPI5_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_SPI5_Init+0x64>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <MX_SPI5_Init+0x64>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_SPI5_Init+0x64>)
 800227c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002280:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_SPI5_Init+0x64>)
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <MX_SPI5_Init+0x64>)
 800228a:	2200      	movs	r2, #0
 800228c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_SPI5_Init+0x64>)
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <MX_SPI5_Init+0x64>)
 8002296:	2200      	movs	r2, #0
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_SPI5_Init+0x64>)
 800229c:	220a      	movs	r2, #10
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <MX_SPI5_Init+0x64>)
 80022a2:	f002 fb33 	bl	800490c <HAL_SPI_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80022ac:	f7ff ff94 	bl	80021d8 <Error_Handler>
  }

}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200002b4 	.word	0x200002b4
 80022b8:	40015000 	.word	0x40015000

080022bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	; 0x30
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a32      	ldr	r2, [pc, #200]	; (80023a4 <HAL_SPI_MspInit+0xe8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d12c      	bne.n	8002338 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 80022e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002316:	23e0      	movs	r3, #224	; 0xe0
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002326:	2305      	movs	r3, #5
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	481e      	ldr	r0, [pc, #120]	; (80023ac <HAL_SPI_MspInit+0xf0>)
 8002332:	f000 fd21 	bl	8002d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002336:	e031      	b.n	800239c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI5)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <HAL_SPI_MspInit+0xf4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d12c      	bne.n	800239c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 800234c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 8002368:	f043 0310 	orr.w	r3, r3, #16
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_SPI_MspInit+0xec>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800237a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800238c:	2306      	movs	r3, #6
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	4807      	ldr	r0, [pc, #28]	; (80023b4 <HAL_SPI_MspInit+0xf8>)
 8002398:	f000 fcee 	bl	8002d78 <HAL_GPIO_Init>
}
 800239c:	bf00      	nop
 800239e:	3730      	adds	r7, #48	; 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40013000 	.word	0x40013000
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40015000 	.word	0x40015000
 80023b4:	40021000 	.word	0x40021000

080023b8 <ssd1331_command>:
uint8_t dataUart[20];
uint8_t Uartlength;
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1331_command(uint8_t command)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	ssd1331_cs_low;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <ssd1331_command+0x38>)
 80023c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023c8:	619a      	str	r2, [r3, #24]
	ssd1331_dc_low;
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <ssd1331_command+0x38>)
 80023cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d0:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(oled_spi, &command, 1, ssd1331_TIMEOUT);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <ssd1331_command+0x3c>)
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	1df9      	adds	r1, r7, #7
 80023d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023dc:	2201      	movs	r2, #1
 80023de:	f002 faf9 	bl	80049d4 <HAL_SPI_Transmit>
	ssd1331_cs_high;
 80023e2:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <ssd1331_command+0x38>)
 80023e4:	2210      	movs	r2, #16
 80023e6:	619a      	str	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40020000 	.word	0x40020000
 80023f4:	20000378 	.word	0x20000378

080023f8 <setPixel>:
void setPixel(uint8_t x,uint8_t y,uint16_t color)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
 8002402:	460b      	mov	r3, r1
 8002404:	71bb      	strb	r3, [r7, #6]
 8002406:	4613      	mov	r3, r2
 8002408:	80bb      	strh	r3, [r7, #4]
	if (x > OLED_WIDTH || y > OLED_HEIGHT)
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2b60      	cmp	r3, #96	; 0x60
 800240e:	d80f      	bhi.n	8002430 <setPixel+0x38>
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d80c      	bhi.n	8002430 <setPixel+0x38>
		{
			return;
		}

	    buffor[y*96+x]=color;
 8002416:	79ba      	ldrb	r2, [r7, #6]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	461a      	mov	r2, r3
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	4413      	add	r3, r2
 8002426:	4905      	ldr	r1, [pc, #20]	; (800243c <setPixel+0x44>)
 8002428:	88ba      	ldrh	r2, [r7, #4]
 800242a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800242e:	e000      	b.n	8002432 <setPixel+0x3a>
			return;
 8002430:	bf00      	nop

}
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20000380 	.word	0x20000380

08002440 <ssd1331_clear>:

void ssd1331_clear()
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	memset(buffor,0x00,2*6144);
 8002444:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002448:	2100      	movs	r1, #0
 800244a:	4802      	ldr	r0, [pc, #8]	; (8002454 <ssd1331_clear+0x14>)
 800244c:	f003 fb3a 	bl	8005ac4 <memset>

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000380 	.word	0x20000380

08002458 <invert>:
void invert()
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
	for(int i=0;i<6144;i++)
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	e00c      	b.n	800247e <invert+0x26>
	{
		buffor[i]=~buffor[i];
 8002464:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <invert+0x3c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800246c:	43db      	mvns	r3, r3
 800246e:	b299      	uxth	r1, r3
 8002470:	4a08      	ldr	r2, [pc, #32]	; (8002494 <invert+0x3c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<6144;i++)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3301      	adds	r3, #1
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002484:	dbee      	blt.n	8002464 <invert+0xc>
	}
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	20000380 	.word	0x20000380

08002498 <ssd1331_display>:
void ssd1331_display(uint8_t invertflag)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
	if(invertflag)
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <ssd1331_display+0x14>
	{
		invert();
 80024a8:	f7ff ffd6 	bl	8002458 <invert>
	}
	ssd1331_command(SET_COLUMN_ADDRESS);
 80024ac:	2015      	movs	r0, #21
 80024ae:	f7ff ff83 	bl	80023b8 <ssd1331_command>
	ssd1331_command(0);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7ff ff80 	bl	80023b8 <ssd1331_command>
	ssd1331_command(OLED_WIDTH - 1);
 80024b8:	205f      	movs	r0, #95	; 0x5f
 80024ba:	f7ff ff7d 	bl	80023b8 <ssd1331_command>
	    //set row point
	ssd1331_command(SET_ROW_ADDRESS);
 80024be:	2075      	movs	r0, #117	; 0x75
 80024c0:	f7ff ff7a 	bl	80023b8 <ssd1331_command>
	ssd1331_command(0);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff ff77 	bl	80023b8 <ssd1331_command>
	ssd1331_command(OLED_HEIGHT - 1);
 80024ca:	203f      	movs	r0, #63	; 0x3f
 80024cc:	f7ff ff74 	bl	80023b8 <ssd1331_command>

	//uint8_t Datafirst;
	//uint8_t Datasecond;
	ssd1331_cs_low;
 80024d0:	4b26      	ldr	r3, [pc, #152]	; (800256c <ssd1331_display+0xd4>)
 80024d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024d6:	619a      	str	r2, [r3, #24]
	ssd1331_dc_high;
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <ssd1331_display+0xd4>)
 80024da:	2202      	movs	r2, #2
 80024dc:	619a      	str	r2, [r3, #24]
	uint32_t Length = OLED_WIDTH * OLED_HEIGHT,i=0;
 80024de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
	while (Length > 0U)
 80024e8:	e02c      	b.n	8002544 <ssd1331_display+0xac>
	    {
	      /* Wait until TXE flag is set to send data */
	      if(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE))
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <ssd1331_display+0xd8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d124      	bne.n	8002544 <ssd1331_display+0xac>
	      {
	    	  // Write higher byte of color to DR
	        *((__IO uint8_t *)&oled_spi->Instance->DR) = (buffor[i] >> 8);
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <ssd1331_display+0xdc>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29a      	uxth	r2, r3
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <ssd1331_display+0xd8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
	        // Wait for transfer
	        while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE) != SET)
 8002512:	bf00      	nop
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <ssd1331_display+0xd8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d1f7      	bne.n	8002514 <ssd1331_display+0x7c>
	        {}
	        // Write lower byt of color to DR
	        *((__IO uint8_t *)&oled_spi->Instance->DR) = (buffor[i] & 0xFF);
 8002524:	4a13      	ldr	r2, [pc, #76]	; (8002574 <ssd1331_display+0xdc>)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <ssd1331_display+0xd8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
	        // Decrease Lenght
	        Length--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3b01      	subs	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
	        i++;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3301      	adds	r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
	while (Length > 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1cf      	bne.n	80024ea <ssd1331_display+0x52>
	      }
	    }
		while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_BSY) != RESET)
 800254a:	bf00      	nop
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <ssd1331_display+0xd8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d0f7      	beq.n	800254c <ssd1331_display+0xb4>
			{

			}

	ssd1331_cs_high;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <ssd1331_display+0xd4>)
 800255e:	2210      	movs	r2, #16
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40020000 	.word	0x40020000
 8002570:	20000378 	.word	0x20000378
 8002574:	20000380 	.word	0x20000380

08002578 <ssd1331_init>:




void ssd1331_init(SPI_HandleTypeDef* spi)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	ssd1331_rst_low;
 8002580:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <ssd1331_init+0x15c>)
 8002582:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002586:	619a      	str	r2, [r3, #24]
	HAL_Delay(15);
 8002588:	200f      	movs	r0, #15
 800258a:	f000 faeb 	bl	8002b64 <HAL_Delay>
	ssd1331_rst_high;
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <ssd1331_init+0x15c>)
 8002590:	2210      	movs	r2, #16
 8002592:	619a      	str	r2, [r3, #24]
	HAL_Delay(150);
 8002594:	2096      	movs	r0, #150	; 0x96
 8002596:	f000 fae5 	bl	8002b64 <HAL_Delay>
	oled_spi=spi;
 800259a:	4a4f      	ldr	r2, [pc, #316]	; (80026d8 <ssd1331_init+0x160>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6013      	str	r3, [r2, #0]
	__HAL_SPI_ENABLE(oled_spi);
 80025a0:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <ssd1331_init+0x160>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <ssd1331_init+0x160>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b2:	601a      	str	r2, [r3, #0]
	ssd1331_command(DISPLAY_OFF);          //Display Off
 80025b4:	20ae      	movs	r0, #174	; 0xae
 80025b6:	f7ff feff 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_CONTRAST_A);       //Set contrast for color A
 80025ba:	2081      	movs	r0, #129	; 0x81
 80025bc:	f7ff fefc 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0xFF);                     //145 0x91
 80025c0:	20ff      	movs	r0, #255	; 0xff
 80025c2:	f7ff fef9 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_CONTRAST_B);       //Set contrast for color B
 80025c6:	2082      	movs	r0, #130	; 0x82
 80025c8:	f7ff fef6 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0xFF);                     //80 0x50
 80025cc:	20ff      	movs	r0, #255	; 0xff
 80025ce:	f7ff fef3 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_CONTRAST_C);       //Set contrast for color C
 80025d2:	2083      	movs	r0, #131	; 0x83
 80025d4:	f7ff fef0 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0xFF);                     //125 0x7D
 80025d8:	20ff      	movs	r0, #255	; 0xff
 80025da:	f7ff feed 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(MASTER_CURRENT_CONTROL);//master current control
 80025de:	2087      	movs	r0, #135	; 0x87
 80025e0:	f7ff feea 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x06);                     //6
 80025e4:	2006      	movs	r0, #6
 80025e6:	f7ff fee7 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_PRECHARGE_SPEED_A);//Set Second Pre-change Speed For ColorA
 80025ea:	208a      	movs	r0, #138	; 0x8a
 80025ec:	f7ff fee4 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x99);                     //100
 80025f0:	2099      	movs	r0, #153	; 0x99
 80025f2:	f7ff fee1 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_PRECHARGE_SPEED_B);//Set Second Pre-change Speed For ColorB
 80025f6:	208b      	movs	r0, #139	; 0x8b
 80025f8:	f7ff fede 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x99);                     //120
 80025fc:	2099      	movs	r0, #153	; 0x99
 80025fe:	f7ff fedb 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_PRECHARGE_SPEED_C);//Set Second Pre-change Speed For ColorC
 8002602:	208c      	movs	r0, #140	; 0x8c
 8002604:	f7ff fed8 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x99);                     //100
 8002608:	2099      	movs	r0, #153	; 0x99
 800260a:	f7ff fed5 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_REMAP);            //set remap & data format
 800260e:	20a0      	movs	r0, #160	; 0xa0
 8002610:	f7ff fed2 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x72);                     //0x72
 8002614:	2072      	movs	r0, #114	; 0x72
 8002616:	f7ff fecf 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_DISPLAY_START_LINE);//Set display Start Line
 800261a:	20a1      	movs	r0, #161	; 0xa1
 800261c:	f7ff fecc 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x0);
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fec9 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_DISPLAY_OFFSET);   //Set display offset
 8002626:	20a2      	movs	r0, #162	; 0xa2
 8002628:	f7ff fec6 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x0);
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff fec3 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(NORMAL_DISPLAY);       //Set display mode
 8002632:	20a4      	movs	r0, #164	; 0xa4
 8002634:	f7ff fec0 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_MULTIPLEX_RATIO);  //Set multiplex ratio
 8002638:	20a8      	movs	r0, #168	; 0xa8
 800263a:	f7ff febd 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x3F);
 800263e:	203f      	movs	r0, #63	; 0x3f
 8002640:	f7ff feba 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_MASTER_CONFIGURE); //Set master configuration
 8002644:	20ad      	movs	r0, #173	; 0xad
 8002646:	f7ff feb7 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x8E);
 800264a:	208e      	movs	r0, #142	; 0x8e
 800264c:	f7ff feb4 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(POWER_SAVE_MODE);      //Set Power Save Mode
 8002650:	20b0      	movs	r0, #176	; 0xb0
 8002652:	f7ff feb1 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x00);                     //0x00
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff feae 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(PHASE_PERIOD_ADJUSTMENT);//phase 1 and 2 period adjustment
 800265c:	20b1      	movs	r0, #177	; 0xb1
 800265e:	f7ff feab 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x31);                     //0x31
 8002662:	2031      	movs	r0, #49	; 0x31
 8002664:	f7ff fea8 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(DISPLAY_CLOCK_DIV);    //display clock divider/oscillator frequency
 8002668:	20b3      	movs	r0, #179	; 0xb3
 800266a:	f7ff fea5 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0xF0);
 800266e:	20f0      	movs	r0, #240	; 0xf0
 8002670:	f7ff fea2 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_PRECHARGE_VOLTAGE);//Set Pre-Change Level
 8002674:	20bb      	movs	r0, #187	; 0xbb
 8002676:	f7ff fe9f 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x3A);
 800267a:	203a      	movs	r0, #58	; 0x3a
 800267c:	f7ff fe9c 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(SET_V_VOLTAGE);        //Set vcomH
 8002680:	20be      	movs	r0, #190	; 0xbe
 8002682:	f7ff fe99 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(0x3E);
 8002686:	203e      	movs	r0, #62	; 0x3e
 8002688:	f7ff fe96 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(DEACTIVE_SCROLLING);   //disable scrolling
 800268c:	202e      	movs	r0, #46	; 0x2e
 800268e:	f7ff fe93 	bl	80023b8 <ssd1331_command>
	    ssd1331_command(NORMAL_BRIGHTNESS_DISPLAY_ON);//set display on
 8002692:	20af      	movs	r0, #175	; 0xaf
 8002694:	f7ff fe90 	bl	80023b8 <ssd1331_command>
	    Uartlength=sprintf((char*)dataUart,"Udalo sie! \n \r");
 8002698:	4910      	ldr	r1, [pc, #64]	; (80026dc <ssd1331_init+0x164>)
 800269a:	4811      	ldr	r0, [pc, #68]	; (80026e0 <ssd1331_init+0x168>)
 800269c:	f004 f89a 	bl	80067d4 <siprintf>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <ssd1331_init+0x16c>)
 80026a6:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Transmit(&huart2, dataUart, Uartlength, ssd1331_TIMEOUT);
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <ssd1331_init+0x16c>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b2:	490b      	ldr	r1, [pc, #44]	; (80026e0 <ssd1331_init+0x168>)
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <ssd1331_init+0x170>)
 80026b6:	f002 fd5c 	bl	8005172 <HAL_UART_Transmit>
	    HAL_Delay(1000);
 80026ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026be:	f000 fa51 	bl	8002b64 <HAL_Delay>
	    ssd1331_clear();
 80026c2:	f7ff febd 	bl	8002440 <ssd1331_clear>
	    ssd1331_display(0);
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff fee6 	bl	8002498 <ssd1331_display>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40020800 	.word	0x40020800
 80026d8:	20000378 	.word	0x20000378
 80026dc:	0800a350 	.word	0x0800a350
 80026e0:	20000364 	.word	0x20000364
 80026e4:	2000037c 	.word	0x2000037c
 80026e8:	20003380 	.word	0x20003380

080026ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_MspInit+0x4c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <HAL_MspInit+0x4c>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_MspInit+0x4c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_MspInit+0x4c>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_MspInit+0x4c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <NMI_Handler+0x4>

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <MemManage_Handler+0x4>

0800274e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>

0800275a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002788:	f000 f9cc 	bl	8002b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
	return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_kill>:

int _kill(int pid, int sig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027aa:	f003 f961 	bl	8005a70 <__errno>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2216      	movs	r2, #22
 80027b2:	601a      	str	r2, [r3, #0]
	return -1;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_exit>:

void _exit (int status)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027c8:	f04f 31ff 	mov.w	r1, #4294967295
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ffe7 	bl	80027a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027d2:	e7fe      	b.n	80027d2 <_exit+0x12>

080027d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e00a      	b.n	80027fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027e6:	f3af 8000 	nop.w
 80027ea:	4601      	mov	r1, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	b2ca      	uxtb	r2, r1
 80027f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	dbf0      	blt.n	80027e6 <_read+0x12>
	}

return len;
 8002804:	687b      	ldr	r3, [r7, #4]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e009      	b.n	8002834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	60ba      	str	r2, [r7, #8]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbf1      	blt.n	8002820 <_write+0x12>
	}
	return len;
 800283c:	687b      	ldr	r3, [r7, #4]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_close>:

int _close(int file)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
	return -1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800286e:	605a      	str	r2, [r3, #4]
	return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <_isatty>:

int _isatty(int file)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
	return 1;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	return 0;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <_sbrk+0x5c>)
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <_sbrk+0x60>)
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <_sbrk+0x64>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <_sbrk+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d207      	bcs.n	80028f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e0:	f003 f8c6 	bl	8005a70 <__errno>
 80028e4:	4603      	mov	r3, r0
 80028e6:	220c      	movs	r2, #12
 80028e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e009      	b.n	8002904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <_sbrk+0x64>)
 8002900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20020000 	.word	0x20020000
 8002910:	00000400 	.word	0x00000400
 8002914:	20000208 	.word	0x20000208
 8002918:	200033d8 	.word	0x200033d8

0800291c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <SystemInit+0x28>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <SystemInit+0x28>)
 8002928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800292c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SystemInit+0x28>)
 8002932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002936:	609a      	str	r2, [r3, #8]
#endif
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <MX_USART2_UART_Init+0x50>)
 8002950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002980:	f002 fbaa 	bl	80050d8 <HAL_UART_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800298a:	f7ff fc25 	bl	80021d8 <Error_Handler>
  }

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20003380 	.word	0x20003380
 8002998:	40004400 	.word	0x40004400

0800299c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_UART_MspInit+0x84>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12b      	bne.n	8002a16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_UART_MspInit+0x88>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_UART_MspInit+0x88>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_UART_MspInit+0x88>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_UART_MspInit+0x88>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_UART_MspInit+0x88>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_UART_MspInit+0x88>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029f6:	230c      	movs	r3, #12
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a06:	2307      	movs	r3, #7
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <HAL_UART_MspInit+0x8c>)
 8002a12:	f000 f9b1 	bl	8002d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a16:	bf00      	nop
 8002a18:	3728      	adds	r7, #40	; 0x28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40004400 	.word	0x40004400
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000

08002a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a32:	e003      	b.n	8002a3c <LoopCopyDataInit>

08002a34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a3a:	3104      	adds	r1, #4

08002a3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a3c:	480b      	ldr	r0, [pc, #44]	; (8002a6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a44:	d3f6      	bcc.n	8002a34 <CopyDataInit>
  ldr  r2, =_sbss
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a48:	e002      	b.n	8002a50 <LoopFillZerobss>

08002a4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a4c:	f842 3b04 	str.w	r3, [r2], #4

08002a50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a54:	d3f9      	bcc.n	8002a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a56:	f7ff ff61 	bl	800291c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f003 f80f 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a5e:	f7ff fa55 	bl	8001f0c <main>
  bx  lr    
 8002a62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a68:	0800aa1c 	.word	0x0800aa1c
  ldr  r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a70:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8002a74:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002a78:	200033d4 	.word	0x200033d4

08002a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC_IRQHandler>
	...

08002a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_Init+0x40>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_Init+0x40>)
 8002a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_Init+0x40>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_Init+0x40>)
 8002a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_Init+0x40>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <HAL_Init+0x40>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa8:	2003      	movs	r0, #3
 8002aaa:	f000 f931 	bl	8002d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f000 f808 	bl	8002ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab4:	f7ff fe1a 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023c00 	.word	0x40023c00

08002ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_InitTick+0x54>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_InitTick+0x58>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f93b 	bl	8002d5e <HAL_SYSTICK_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00e      	b.n	8002b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b0f      	cmp	r3, #15
 8002af6:	d80a      	bhi.n	8002b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af8:	2200      	movs	r2, #0
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f000 f911 	bl	8002d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b04:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <HAL_InitTick+0x5c>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000008 	.word	0x20000008
 8002b1c:	20000010 	.word	0x20000010
 8002b20:	2000000c 	.word	0x2000000c

08002b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_IncTick+0x20>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_IncTick+0x24>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4413      	add	r3, r2
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_IncTick+0x24>)
 8002b36:	6013      	str	r3, [r2, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000010 	.word	0x20000010
 8002b48:	200033c0 	.word	0x200033c0

08002b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <HAL_GetTick+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	200033c0 	.word	0x200033c0

08002b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff ffee 	bl	8002b4c <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d005      	beq.n	8002b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_Delay+0x44>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b8a:	bf00      	nop
 8002b8c:	f7ff ffde 	bl	8002b4c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d8f7      	bhi.n	8002b8c <HAL_Delay+0x28>
  {
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000010 	.word	0x20000010

08002bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	60d3      	str	r3, [r2, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <__NVIC_GetPriorityGrouping+0x18>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	f003 0307 	and.w	r3, r3, #7
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	db0a      	blt.n	8002c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	490c      	ldr	r1, [pc, #48]	; (8002c5c <__NVIC_SetPriority+0x4c>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	440b      	add	r3, r1
 8002c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c38:	e00a      	b.n	8002c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4908      	ldr	r1, [pc, #32]	; (8002c60 <__NVIC_SetPriority+0x50>)
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	3b04      	subs	r3, #4
 8002c48:	0112      	lsls	r2, r2, #4
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	761a      	strb	r2, [r3, #24]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f1c3 0307 	rsb	r3, r3, #7
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	bf28      	it	cs
 8002c82:	2304      	movcs	r3, #4
 8002c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d902      	bls.n	8002c94 <NVIC_EncodePriority+0x30>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3b03      	subs	r3, #3
 8002c92:	e000      	b.n	8002c96 <NVIC_EncodePriority+0x32>
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cac:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	43d9      	mvns	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	4313      	orrs	r3, r2
         );
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3724      	adds	r7, #36	; 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cdc:	d301      	bcc.n	8002ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00f      	b.n	8002d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <SysTick_Config+0x40>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cea:	210f      	movs	r1, #15
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	f7ff ff8e 	bl	8002c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <SysTick_Config+0x40>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <SysTick_Config+0x40>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	e000e010 	.word	0xe000e010

08002d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff47 	bl	8002bac <__NVIC_SetPriorityGrouping>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d38:	f7ff ff5c 	bl	8002bf4 <__NVIC_GetPriorityGrouping>
 8002d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f7ff ff8e 	bl	8002c64 <NVIC_EncodePriority>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff5d 	bl	8002c10 <__NVIC_SetPriority>
}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ffb0 	bl	8002ccc <SysTick_Config>
 8002d6c:	4603      	mov	r3, r0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	e159      	b.n	8003048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d94:	2201      	movs	r2, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	f040 8148 	bne.w	8003042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d00b      	beq.n	8002dd2 <HAL_GPIO_Init+0x5a>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dc6:	2b11      	cmp	r3, #17
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b12      	cmp	r3, #18
 8002dd0:	d130      	bne.n	8002e34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2203      	movs	r2, #3
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 0201 	and.w	r2, r3, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0xfc>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b12      	cmp	r3, #18
 8002e72:	d123      	bne.n	8002ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	08da      	lsrs	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3208      	adds	r2, #8
 8002eb6:	69b9      	ldr	r1, [r7, #24]
 8002eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0203 	and.w	r2, r3, #3
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a2 	beq.w	8003042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b57      	ldr	r3, [pc, #348]	; (8003060 <HAL_GPIO_Init+0x2e8>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a56      	ldr	r2, [pc, #344]	; (8003060 <HAL_GPIO_Init+0x2e8>)
 8002f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b54      	ldr	r3, [pc, #336]	; (8003060 <HAL_GPIO_Init+0x2e8>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f1a:	4a52      	ldr	r2, [pc, #328]	; (8003064 <HAL_GPIO_Init+0x2ec>)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a49      	ldr	r2, [pc, #292]	; (8003068 <HAL_GPIO_Init+0x2f0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d019      	beq.n	8002f7a <HAL_GPIO_Init+0x202>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a48      	ldr	r2, [pc, #288]	; (800306c <HAL_GPIO_Init+0x2f4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_GPIO_Init+0x1fe>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a47      	ldr	r2, [pc, #284]	; (8003070 <HAL_GPIO_Init+0x2f8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00d      	beq.n	8002f72 <HAL_GPIO_Init+0x1fa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a46      	ldr	r2, [pc, #280]	; (8003074 <HAL_GPIO_Init+0x2fc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <HAL_GPIO_Init+0x1f6>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a45      	ldr	r2, [pc, #276]	; (8003078 <HAL_GPIO_Init+0x300>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_GPIO_Init+0x1f2>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e008      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x204>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f002 0203 	and.w	r2, r2, #3
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	4093      	lsls	r3, r2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8c:	4935      	ldr	r1, [pc, #212]	; (8003064 <HAL_GPIO_Init+0x2ec>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_GPIO_Init+0x304>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbe:	4a2f      	ldr	r2, [pc, #188]	; (800307c <HAL_GPIO_Init+0x304>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_GPIO_Init+0x304>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe8:	4a24      	ldr	r2, [pc, #144]	; (800307c <HAL_GPIO_Init+0x304>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fee:	4b23      	ldr	r3, [pc, #140]	; (800307c <HAL_GPIO_Init+0x304>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003012:	4a1a      	ldr	r2, [pc, #104]	; (800307c <HAL_GPIO_Init+0x304>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_GPIO_Init+0x304>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800303c:	4a0f      	ldr	r2, [pc, #60]	; (800307c <HAL_GPIO_Init+0x304>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	f67f aea2 	bls.w	8002d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40013800 	.word	0x40013800
 8003068:	40020000 	.word	0x40020000
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800
 8003074:	40020c00 	.word	0x40020c00
 8003078:	40021000 	.word	0x40021000
 800307c:	40013c00 	.word	0x40013c00

08003080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003090:	787b      	ldrb	r3, [r7, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800309c:	e003      	b.n	80030a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	041a      	lsls	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	619a      	str	r2, [r3, #24]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e12b      	b.n	800331e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe fdd0 	bl	8001c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003118:	f001 fbd0 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 800311c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a81      	ldr	r2, [pc, #516]	; (8003328 <HAL_I2C_Init+0x274>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d807      	bhi.n	8003138 <HAL_I2C_Init+0x84>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a80      	ldr	r2, [pc, #512]	; (800332c <HAL_I2C_Init+0x278>)
 800312c:	4293      	cmp	r3, r2
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e006      	b.n	8003146 <HAL_I2C_Init+0x92>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a7d      	ldr	r2, [pc, #500]	; (8003330 <HAL_I2C_Init+0x27c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	bf94      	ite	ls
 8003140:	2301      	movls	r3, #1
 8003142:	2300      	movhi	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0e7      	b.n	800331e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a78      	ldr	r2, [pc, #480]	; (8003334 <HAL_I2C_Init+0x280>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0c9b      	lsrs	r3, r3, #18
 8003158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a6a      	ldr	r2, [pc, #424]	; (8003328 <HAL_I2C_Init+0x274>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d802      	bhi.n	8003188 <HAL_I2C_Init+0xd4>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3301      	adds	r3, #1
 8003186:	e009      	b.n	800319c <HAL_I2C_Init+0xe8>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	4a69      	ldr	r2, [pc, #420]	; (8003338 <HAL_I2C_Init+0x284>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	3301      	adds	r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	495c      	ldr	r1, [pc, #368]	; (8003328 <HAL_I2C_Init+0x274>)
 80031b8:	428b      	cmp	r3, r1
 80031ba:	d819      	bhi.n	80031f0 <HAL_I2C_Init+0x13c>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e59      	subs	r1, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ca:	1c59      	adds	r1, r3, #1
 80031cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031d0:	400b      	ands	r3, r1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_I2C_Init+0x138>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1e59      	subs	r1, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e4:	3301      	adds	r3, #1
 80031e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ea:	e051      	b.n	8003290 <HAL_I2C_Init+0x1dc>
 80031ec:	2304      	movs	r3, #4
 80031ee:	e04f      	b.n	8003290 <HAL_I2C_Init+0x1dc>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d111      	bne.n	800321c <HAL_I2C_Init+0x168>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	e012      	b.n	8003242 <HAL_I2C_Init+0x18e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e58      	subs	r0, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	0099      	lsls	r1, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Init+0x196>
 8003246:	2301      	movs	r3, #1
 8003248:	e022      	b.n	8003290 <HAL_I2C_Init+0x1dc>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10e      	bne.n	8003270 <HAL_I2C_Init+0x1bc>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1e58      	subs	r0, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	440b      	add	r3, r1
 8003260:	fbb0 f3f3 	udiv	r3, r0, r3
 8003264:	3301      	adds	r3, #1
 8003266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326e:	e00f      	b.n	8003290 <HAL_I2C_Init+0x1dc>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1e58      	subs	r0, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	0099      	lsls	r1, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	fbb0 f3f3 	udiv	r3, r0, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	6809      	ldr	r1, [r1, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6911      	ldr	r1, [r2, #16]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68d2      	ldr	r2, [r2, #12]
 80032ca:	4311      	orrs	r1, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	000186a0 	.word	0x000186a0
 800332c:	001e847f 	.word	0x001e847f
 8003330:	003d08ff 	.word	0x003d08ff
 8003334:	431bde83 	.word	0x431bde83
 8003338:	10624dd3 	.word	0x10624dd3

0800333c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	460b      	mov	r3, r1
 8003350:	813b      	strh	r3, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003356:	f7ff fbf9 	bl	8002b4c <HAL_GetTick>
 800335a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b20      	cmp	r3, #32
 8003366:	f040 80d9 	bne.w	800351c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2319      	movs	r3, #25
 8003370:	2201      	movs	r2, #1
 8003372:	496d      	ldr	r1, [pc, #436]	; (8003528 <HAL_I2C_Mem_Write+0x1ec>)
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fc7f 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
 8003382:	e0cc      	b.n	800351e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_I2C_Mem_Write+0x56>
 800338e:	2302      	movs	r3, #2
 8003390:	e0c5      	b.n	800351e <HAL_I2C_Mem_Write+0x1e2>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d007      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2221      	movs	r2, #33	; 0x21
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2240      	movs	r2, #64	; 0x40
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a4d      	ldr	r2, [pc, #308]	; (800352c <HAL_I2C_Mem_Write+0x1f0>)
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033fa:	88f8      	ldrh	r0, [r7, #6]
 80033fc:	893a      	ldrh	r2, [r7, #8]
 80033fe:	8979      	ldrh	r1, [r7, #10]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	4603      	mov	r3, r0
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fab6 	bl	800397c <I2C_RequestMemoryWrite>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d052      	beq.n	80034bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e081      	b.n	800351e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fd00 	bl	8003e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b04      	cmp	r3, #4
 8003430:	d107      	bne.n	8003442 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e06b      	b.n	800351e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	781a      	ldrb	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11b      	bne.n	80034bc <HAL_I2C_Mem_Write+0x180>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d017      	beq.n	80034bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1aa      	bne.n	800341a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fcec 	bl	8003ea6 <I2C_WaitOnBTFFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d107      	bne.n	80034ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e016      	b.n	800351e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	00100002 	.word	0x00100002
 800352c:	ffff0000 	.word	0xffff0000

08003530 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08c      	sub	sp, #48	; 0x30
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	460b      	mov	r3, r1
 8003544:	813b      	strh	r3, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800354a:	f7ff faff 	bl	8002b4c <HAL_GetTick>
 800354e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b20      	cmp	r3, #32
 800355a:	f040 8208 	bne.w	800396e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2319      	movs	r3, #25
 8003564:	2201      	movs	r2, #1
 8003566:	497b      	ldr	r1, [pc, #492]	; (8003754 <HAL_I2C_Mem_Read+0x224>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fb85 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
 8003576:	e1fb      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_I2C_Mem_Read+0x56>
 8003582:	2302      	movs	r3, #2
 8003584:	e1f4      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d007      	beq.n	80035ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2222      	movs	r2, #34	; 0x22
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a5b      	ldr	r2, [pc, #364]	; (8003758 <HAL_I2C_Mem_Read+0x228>)
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ee:	88f8      	ldrh	r0, [r7, #6]
 80035f0:	893a      	ldrh	r2, [r7, #8]
 80035f2:	8979      	ldrh	r1, [r7, #10]
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	4603      	mov	r3, r0
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fa52 	bl	8003aa8 <I2C_RequestMemoryRead>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e1b0      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d113      	bne.n	800363e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	623b      	str	r3, [r7, #32]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e184      	b.n	8003948 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	2b01      	cmp	r3, #1
 8003644:	d11b      	bne.n	800367e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e164      	b.n	8003948 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	2b02      	cmp	r3, #2
 8003684:	d11b      	bne.n	80036be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003694:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	e144      	b.n	8003948 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036d4:	e138      	b.n	8003948 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	2b03      	cmp	r3, #3
 80036dc:	f200 80f1 	bhi.w	80038c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d123      	bne.n	8003730 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fc1b 	bl	8003f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e139      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800372e:	e10b      	b.n	8003948 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	2b02      	cmp	r3, #2
 8003736:	d14e      	bne.n	80037d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	2200      	movs	r2, #0
 8003740:	4906      	ldr	r1, [pc, #24]	; (800375c <HAL_I2C_Mem_Read+0x22c>)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fa98 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e10e      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
 8003752:	bf00      	nop
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000
 800375c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d4:	e0b8      	b.n	8003948 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	2200      	movs	r2, #0
 80037de:	4966      	ldr	r1, [pc, #408]	; (8003978 <HAL_I2C_Mem_Read+0x448>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fa49 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0bf      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	2200      	movs	r2, #0
 800383a:	494f      	ldr	r1, [pc, #316]	; (8003978 <HAL_I2C_Mem_Read+0x448>)
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fa1b 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e091      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038c0:	e042      	b.n	8003948 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fb2e 	bl	8003f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e04c      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b04      	cmp	r3, #4
 8003914:	d118      	bne.n	8003948 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	f47f aec2 	bne.w	80036d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3728      	adds	r7, #40	; 0x28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	00010004 	.word	0x00010004

0800397c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	4603      	mov	r3, r0
 800398c:	817b      	strh	r3, [r7, #10]
 800398e:	460b      	mov	r3, r1
 8003990:	813b      	strh	r3, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f960 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039cc:	d103      	bne.n	80039d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e05f      	b.n	8003a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039da:	897b      	ldrh	r3, [r7, #10]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	492d      	ldr	r1, [pc, #180]	; (8003aa4 <I2C_RequestMemoryWrite+0x128>)
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f998 	bl	8003d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e04c      	b.n	8003a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	6a39      	ldr	r1, [r7, #32]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fa02 	bl	8003e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00d      	beq.n	8003a42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d107      	bne.n	8003a3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e02b      	b.n	8003a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]
 8003a52:	e021      	b.n	8003a98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a54:	893b      	ldrh	r3, [r7, #8]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	6a39      	ldr	r1, [r7, #32]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f9dc 	bl	8003e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d107      	bne.n	8003a8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e005      	b.n	8003a9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a8e:	893b      	ldrh	r3, [r7, #8]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	00010002 	.word	0x00010002

08003aa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	817b      	strh	r3, [r7, #10]
 8003aba:	460b      	mov	r3, r1
 8003abc:	813b      	strh	r3, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f8c2 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b08:	d103      	bne.n	8003b12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e0aa      	b.n	8003c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b16:	897b      	ldrh	r3, [r7, #10]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	4952      	ldr	r1, [pc, #328]	; (8003c74 <I2C_RequestMemoryRead+0x1cc>)
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f8fa 	bl	8003d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e097      	b.n	8003c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	6a39      	ldr	r1, [r7, #32]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f964 	bl	8003e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d107      	bne.n	8003b7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e076      	b.n	8003c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b84:	893b      	ldrh	r3, [r7, #8]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	611a      	str	r2, [r3, #16]
 8003b8e:	e021      	b.n	8003bd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b90:	893b      	ldrh	r3, [r7, #8]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	6a39      	ldr	r1, [r7, #32]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f93e 	bl	8003e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d107      	bne.n	8003bc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e050      	b.n	8003c6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bca:	893b      	ldrh	r3, [r7, #8]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	6a39      	ldr	r1, [r7, #32]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f923 	bl	8003e24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d107      	bne.n	8003bfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e035      	b.n	8003c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f82b 	bl	8003c78 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00d      	beq.n	8003c44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c36:	d103      	bne.n	8003c40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e013      	b.n	8003c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c44:	897b      	ldrh	r3, [r7, #10]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	4906      	ldr	r1, [pc, #24]	; (8003c74 <I2C_RequestMemoryRead+0x1cc>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f863 	bl	8003d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	00010002 	.word	0x00010002

08003c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c88:	e025      	b.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d021      	beq.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fe ff5b 	bl	8002b4c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d116      	bne.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e023      	b.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10d      	bne.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	e00c      	b.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d0b6      	beq.n	8003c8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d34:	e051      	b.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d44:	d123      	bne.n	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0204 	orr.w	r2, r3, #4
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e046      	b.n	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d021      	beq.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d96:	f7fe fed9 	bl	8002b4c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d116      	bne.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e020      	b.n	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d10c      	bne.n	8003dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	e00b      	b.n	8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	43da      	mvns	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d18d      	bne.n	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e30:	e02d      	b.n	8003e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f8ce 	bl	8003fd4 <I2C_IsAcknowledgeFailed>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e02d      	b.n	8003e9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d021      	beq.n	8003e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fe fe7f 	bl	8002b4c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d116      	bne.n	8003e8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e007      	b.n	8003e9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d1ca      	bne.n	8003e32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb2:	e02d      	b.n	8003f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f88d 	bl	8003fd4 <I2C_IsAcknowledgeFailed>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e02d      	b.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d021      	beq.n	8003f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ecc:	f7fe fe3e 	bl	8002b4c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d116      	bne.n	8003f10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e007      	b.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d1ca      	bne.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f34:	e042      	b.n	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d119      	bne.n	8003f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0210 	mvn.w	r2, #16
 8003f4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e029      	b.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f78:	f7fe fde8 	bl	8002b4c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d302      	bcc.n	8003f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d116      	bne.n	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e007      	b.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d1b5      	bne.n	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fea:	d11b      	bne.n	8004024 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ff4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f043 0204 	orr.w	r2, r3, #4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e25b      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d075      	beq.n	800413e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004052:	4ba3      	ldr	r3, [pc, #652]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b04      	cmp	r3, #4
 800405c:	d00c      	beq.n	8004078 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405e:	4ba0      	ldr	r3, [pc, #640]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004066:	2b08      	cmp	r3, #8
 8004068:	d112      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406a:	4b9d      	ldr	r3, [pc, #628]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004076:	d10b      	bne.n	8004090 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	4b99      	ldr	r3, [pc, #612]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05b      	beq.n	800413c <HAL_RCC_OscConfig+0x108>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d157      	bne.n	800413c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e236      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x74>
 800409a:	4b91      	ldr	r3, [pc, #580]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a90      	ldr	r2, [pc, #576]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e01d      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x98>
 80040b2:	4b8b      	ldr	r3, [pc, #556]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a8a      	ldr	r2, [pc, #552]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b88      	ldr	r3, [pc, #544]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a87      	ldr	r2, [pc, #540]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0xb0>
 80040cc:	4b84      	ldr	r3, [pc, #528]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a83      	ldr	r2, [pc, #524]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a80      	ldr	r2, [pc, #512]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80040de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fe fd2e 	bl	8002b4c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fe fd2a 	bl	8002b4c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e1fb      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0xc0>
 8004112:	e014      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fe fd1a 	bl	8002b4c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800411c:	f7fe fd16 	bl	8002b4c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1e7      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	4b6c      	ldr	r3, [pc, #432]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0xe8>
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d063      	beq.n	8004212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004156:	4b62      	ldr	r3, [pc, #392]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415e:	2b08      	cmp	r3, #8
 8004160:	d11c      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1bb      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4952      	ldr	r1, [pc, #328]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	e03a      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d020      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a4:	4b4f      	ldr	r3, [pc, #316]	; (80042e4 <HAL_RCC_OscConfig+0x2b0>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fe fccf 	bl	8002b4c <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fe fccb 	bl	8002b4c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e19c      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4940      	ldr	r1, [pc, #256]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
 80041e4:	e015      	b.n	8004212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e6:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <HAL_RCC_OscConfig+0x2b0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fe fcae 	bl	8002b4c <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f4:	f7fe fcaa 	bl	8002b4c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e17b      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d030      	beq.n	8004280 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004226:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <HAL_RCC_OscConfig+0x2b4>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fe fc8e 	bl	8002b4c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004234:	f7fe fc8a 	bl	8002b4c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e15b      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x200>
 8004252:	e015      	b.n	8004280 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004254:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_OscConfig+0x2b4>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fe fc77 	bl	8002b4c <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004262:	f7fe fc73 	bl	8002b4c <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e144      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a0 	beq.w	80043ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10f      	bne.n	80042be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_OscConfig+0x2b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d121      	bne.n	800430e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ca:	4b08      	ldr	r3, [pc, #32]	; (80042ec <HAL_RCC_OscConfig+0x2b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a07      	ldr	r2, [pc, #28]	; (80042ec <HAL_RCC_OscConfig+0x2b8>)
 80042d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d6:	f7fe fc39 	bl	8002b4c <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	e011      	b.n	8004302 <HAL_RCC_OscConfig+0x2ce>
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	42470000 	.word	0x42470000
 80042e8:	42470e80 	.word	0x42470e80
 80042ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fe fc2c 	bl	8002b4c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0fd      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b81      	ldr	r3, [pc, #516]	; (8004508 <HAL_RCC_OscConfig+0x4d4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d106      	bne.n	8004324 <HAL_RCC_OscConfig+0x2f0>
 8004316:	4b7d      	ldr	r3, [pc, #500]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	4a7c      	ldr	r2, [pc, #496]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6713      	str	r3, [r2, #112]	; 0x70
 8004322:	e01c      	b.n	800435e <HAL_RCC_OscConfig+0x32a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b05      	cmp	r3, #5
 800432a:	d10c      	bne.n	8004346 <HAL_RCC_OscConfig+0x312>
 800432c:	4b77      	ldr	r3, [pc, #476]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a76      	ldr	r2, [pc, #472]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 8004332:	f043 0304 	orr.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
 8004338:	4b74      	ldr	r3, [pc, #464]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a73      	ldr	r2, [pc, #460]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	e00b      	b.n	800435e <HAL_RCC_OscConfig+0x32a>
 8004346:	4b71      	ldr	r3, [pc, #452]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a70      	ldr	r2, [pc, #448]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
 8004352:	4b6e      	ldr	r3, [pc, #440]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004356:	4a6d      	ldr	r2, [pc, #436]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d015      	beq.n	8004392 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fe fbf1 	bl	8002b4c <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fe fbed 	bl	8002b4c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	; 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0bc      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	4b61      	ldr	r3, [pc, #388]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ee      	beq.n	800436e <HAL_RCC_OscConfig+0x33a>
 8004390:	e014      	b.n	80043bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fe fbdb 	bl	8002b4c <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fe fbd7 	bl	8002b4c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0a6      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b0:	4b56      	ldr	r3, [pc, #344]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1ee      	bne.n	800439a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d105      	bne.n	80043ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c2:	4b52      	ldr	r3, [pc, #328]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a51      	ldr	r2, [pc, #324]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 80043c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8092 	beq.w	80044fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d8:	4b4c      	ldr	r3, [pc, #304]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d05c      	beq.n	800449e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d141      	bne.n	8004470 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ec:	4b48      	ldr	r3, [pc, #288]	; (8004510 <HAL_RCC_OscConfig+0x4dc>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe fbab 	bl	8002b4c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fe fba7 	bl	8002b4c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e078      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440c:	4b3f      	ldr	r3, [pc, #252]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	3b01      	subs	r3, #1
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	4933      	ldr	r1, [pc, #204]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 800443e:	4313      	orrs	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004442:	4b33      	ldr	r3, [pc, #204]	; (8004510 <HAL_RCC_OscConfig+0x4dc>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7fe fb80 	bl	8002b4c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004450:	f7fe fb7c 	bl	8002b4c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e04d      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x41c>
 800446e:	e045      	b.n	80044fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004470:	4b27      	ldr	r3, [pc, #156]	; (8004510 <HAL_RCC_OscConfig+0x4dc>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004476:	f7fe fb69 	bl	8002b4c <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447e:	f7fe fb65 	bl	8002b4c <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e036      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004490:	4b1e      	ldr	r3, [pc, #120]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x44a>
 800449c:	e02e      	b.n	80044fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e029      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <HAL_RCC_OscConfig+0x4d8>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d11c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d115      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d2:	4013      	ands	r3, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10d      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d106      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40007000 	.word	0x40007000
 800450c:	40023800 	.word	0x40023800
 8004510:	42470060 	.word	0x42470060

08004514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0cc      	b.n	80046c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004528:	4b68      	ldr	r3, [pc, #416]	; (80046cc <HAL_RCC_ClockConfig+0x1b8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d90c      	bls.n	8004550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004536:	4b65      	ldr	r3, [pc, #404]	; (80046cc <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b63      	ldr	r3, [pc, #396]	; (80046cc <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0b8      	b.n	80046c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d020      	beq.n	800459e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004568:	4b59      	ldr	r3, [pc, #356]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4a58      	ldr	r2, [pc, #352]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004572:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004580:	4b53      	ldr	r3, [pc, #332]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a52      	ldr	r2, [pc, #328]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800458a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800458c:	4b50      	ldr	r3, [pc, #320]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	494d      	ldr	r1, [pc, #308]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d044      	beq.n	8004634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	4b47      	ldr	r3, [pc, #284]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d119      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e07f      	b.n	80046c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d003      	beq.n	80045d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d2:	4b3f      	ldr	r3, [pc, #252]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e06f      	b.n	80046c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e2:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e067      	b.n	80046c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045f2:	4b37      	ldr	r3, [pc, #220]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f023 0203 	bic.w	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4934      	ldr	r1, [pc, #208]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	4313      	orrs	r3, r2
 8004602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004604:	f7fe faa2 	bl	8002b4c <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	e00a      	b.n	8004622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460c:	f7fe fa9e 	bl	8002b4c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	; 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e04f      	b.n	80046c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 020c 	and.w	r2, r3, #12
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	429a      	cmp	r2, r3
 8004632:	d1eb      	bne.n	800460c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004634:	4b25      	ldr	r3, [pc, #148]	; (80046cc <HAL_RCC_ClockConfig+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d20c      	bcs.n	800465c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800464a:	4b20      	ldr	r3, [pc, #128]	; (80046cc <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d001      	beq.n	800465c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e032      	b.n	80046c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004668:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4916      	ldr	r1, [pc, #88]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	490e      	ldr	r1, [pc, #56]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800469a:	f000 f821 	bl	80046e0 <HAL_RCC_GetSysClockFreq>
 800469e:	4602      	mov	r2, r0
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	490a      	ldr	r1, [pc, #40]	; (80046d4 <HAL_RCC_ClockConfig+0x1c0>)
 80046ac:	5ccb      	ldrb	r3, [r1, r3]
 80046ae:	fa22 f303 	lsr.w	r3, r2, r3
 80046b2:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_RCC_ClockConfig+0x1c8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe fa02 	bl	8002ac4 <HAL_InitTick>

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40023c00 	.word	0x40023c00
 80046d0:	40023800 	.word	0x40023800
 80046d4:	0800a540 	.word	0x0800a540
 80046d8:	20000008 	.word	0x20000008
 80046dc:	2000000c 	.word	0x2000000c

080046e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	2300      	movs	r3, #0
 80046f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046f8:	4b67      	ldr	r3, [pc, #412]	; (8004898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b08      	cmp	r3, #8
 8004702:	d00d      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0x40>
 8004704:	2b08      	cmp	r3, #8
 8004706:	f200 80bd 	bhi.w	8004884 <HAL_RCC_GetSysClockFreq+0x1a4>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x34>
 800470e:	2b04      	cmp	r3, #4
 8004710:	d003      	beq.n	800471a <HAL_RCC_GetSysClockFreq+0x3a>
 8004712:	e0b7      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004714:	4b61      	ldr	r3, [pc, #388]	; (800489c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004716:	60bb      	str	r3, [r7, #8]
       break;
 8004718:	e0b7      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800471a:	4b61      	ldr	r3, [pc, #388]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800471c:	60bb      	str	r3, [r7, #8]
      break;
 800471e:	e0b4      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004720:	4b5d      	ldr	r3, [pc, #372]	; (8004898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004728:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800472a:	4b5b      	ldr	r3, [pc, #364]	; (8004898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d04d      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004736:	4b58      	ldr	r3, [pc, #352]	; (8004898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	099b      	lsrs	r3, r3, #6
 800473c:	461a      	mov	r2, r3
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	ea02 0800 	and.w	r8, r2, r0
 800474e:	ea03 0901 	and.w	r9, r3, r1
 8004752:	4640      	mov	r0, r8
 8004754:	4649      	mov	r1, r9
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	014b      	lsls	r3, r1, #5
 8004760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004764:	0142      	lsls	r2, r0, #5
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	ebb0 0008 	subs.w	r0, r0, r8
 800476e:	eb61 0109 	sbc.w	r1, r1, r9
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	018b      	lsls	r3, r1, #6
 800477c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004780:	0182      	lsls	r2, r0, #6
 8004782:	1a12      	subs	r2, r2, r0
 8004784:	eb63 0301 	sbc.w	r3, r3, r1
 8004788:	f04f 0000 	mov.w	r0, #0
 800478c:	f04f 0100 	mov.w	r1, #0
 8004790:	00d9      	lsls	r1, r3, #3
 8004792:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004796:	00d0      	lsls	r0, r2, #3
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	eb12 0208 	adds.w	r2, r2, r8
 80047a0:	eb43 0309 	adc.w	r3, r3, r9
 80047a4:	f04f 0000 	mov.w	r0, #0
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	0259      	lsls	r1, r3, #9
 80047ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047b2:	0250      	lsls	r0, r2, #9
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	461a      	mov	r2, r3
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	f7fc fa68 	bl	8000c98 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4613      	mov	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e04a      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d2:	4b31      	ldr	r3, [pc, #196]	; (8004898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	461a      	mov	r2, r3
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	ea02 0400 	and.w	r4, r2, r0
 80047ea:	ea03 0501 	and.w	r5, r3, r1
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	014b      	lsls	r3, r1, #5
 80047fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004800:	0142      	lsls	r2, r0, #5
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	1b00      	subs	r0, r0, r4
 8004808:	eb61 0105 	sbc.w	r1, r1, r5
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	018b      	lsls	r3, r1, #6
 8004816:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800481a:	0182      	lsls	r2, r0, #6
 800481c:	1a12      	subs	r2, r2, r0
 800481e:	eb63 0301 	sbc.w	r3, r3, r1
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	00d9      	lsls	r1, r3, #3
 800482c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004830:	00d0      	lsls	r0, r2, #3
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	1912      	adds	r2, r2, r4
 8004838:	eb45 0303 	adc.w	r3, r5, r3
 800483c:	f04f 0000 	mov.w	r0, #0
 8004840:	f04f 0100 	mov.w	r1, #0
 8004844:	0299      	lsls	r1, r3, #10
 8004846:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800484a:	0290      	lsls	r0, r2, #10
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	461a      	mov	r2, r3
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	f7fc fa1c 	bl	8000c98 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4613      	mov	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	3301      	adds	r3, #1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004880:	60bb      	str	r3, [r7, #8]
      break;
 8004882:	e002      	b.n	800488a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004886:	60bb      	str	r3, [r7, #8]
      break;
 8004888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800488a:	68bb      	ldr	r3, [r7, #8]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	00f42400 	.word	0x00f42400
 80048a0:	007a1200 	.word	0x007a1200

080048a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048aa:	681b      	ldr	r3, [r3, #0]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000008 	.word	0x20000008

080048bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048c0:	f7ff fff0 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 80048c4:	4602      	mov	r2, r0
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	0a9b      	lsrs	r3, r3, #10
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	4903      	ldr	r1, [pc, #12]	; (80048e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048d2:	5ccb      	ldrb	r3, [r1, r3]
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40023800 	.word	0x40023800
 80048e0:	0800a550 	.word	0x0800a550

080048e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048e8:	f7ff ffdc 	bl	80048a4 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0b5b      	lsrs	r3, r3, #13
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4903      	ldr	r1, [pc, #12]	; (8004908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40023800 	.word	0x40023800
 8004908:	0800a550 	.word	0x0800a550

0800490c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e056      	b.n	80049cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fd fcbf 	bl	80022bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004954:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	ea42 0103 	orr.w	r1, r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	f003 0104 	and.w	r1, r3, #4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_SPI_Transmit+0x22>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e11e      	b.n	8004c34 <HAL_SPI_Transmit+0x260>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049fe:	f7fe f8a5 	bl	8002b4c <HAL_GetTick>
 8004a02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d002      	beq.n	8004a1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
 8004a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a18:	e103      	b.n	8004c22 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_SPI_Transmit+0x52>
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a2a:	e0fa      	b.n	8004c22 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2203      	movs	r2, #3
 8004a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	88fa      	ldrh	r2, [r7, #6]
 8004a44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	88fa      	ldrh	r2, [r7, #6]
 8004a4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a72:	d107      	bne.n	8004a84 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d007      	beq.n	8004aa2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aaa:	d14b      	bne.n	8004b44 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <HAL_SPI_Transmit+0xe6>
 8004ab4:	8afb      	ldrh	r3, [r7, #22]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d13e      	bne.n	8004b38 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ade:	e02b      	b.n	8004b38 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d112      	bne.n	8004b14 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	881a      	ldrh	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	1c9a      	adds	r2, r3, #2
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b12:	e011      	b.n	8004b38 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b14:	f7fe f81a 	bl	8002b4c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d803      	bhi.n	8004b2c <HAL_SPI_Transmit+0x158>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d102      	bne.n	8004b32 <HAL_SPI_Transmit+0x15e>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b36:	e074      	b.n	8004c22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ce      	bne.n	8004ae0 <HAL_SPI_Transmit+0x10c>
 8004b42:	e04c      	b.n	8004bde <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_Transmit+0x17e>
 8004b4c:	8afb      	ldrh	r3, [r7, #22]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d140      	bne.n	8004bd4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b78:	e02c      	b.n	8004bd4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d113      	bne.n	8004bb0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bae:	e011      	b.n	8004bd4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb0:	f7fd ffcc 	bl	8002b4c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d803      	bhi.n	8004bc8 <HAL_SPI_Transmit+0x1f4>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d102      	bne.n	8004bce <HAL_SPI_Transmit+0x1fa>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bd2:	e026      	b.n	8004c22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1cd      	bne.n	8004b7a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa36 	bl	8005054 <SPI_EndRxTxTransaction>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e000      	b.n	8004c22 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08c      	sub	sp, #48	; 0x30
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_SPI_TransmitReceive+0x26>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e18a      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x33c>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c6a:	f7fd ff6f 	bl	8002b4c <HAL_GetTick>
 8004c6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d00f      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x70>
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c92:	d107      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x68>
 8004c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d003      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004caa:	e15b      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x82>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x82>
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cc4:	e14e      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d003      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	887a      	ldrh	r2, [r7, #2]
 8004d02:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d007      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d36:	d178      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0x10a>
 8004d40:	8b7b      	ldrh	r3, [r7, #26]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d166      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	881a      	ldrh	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d6a:	e053      	b.n	8004e14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d11b      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x176>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d016      	beq.n	8004db2 <HAL_SPI_TransmitReceive+0x176>
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d113      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d119      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x1b8>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d014      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	b292      	uxth	r2, r2
 8004dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004df0:	2301      	movs	r3, #1
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004df4:	f7fd feaa 	bl	8002b4c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d807      	bhi.n	8004e14 <HAL_SPI_TransmitReceive+0x1d8>
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d003      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e12:	e0a7      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1a6      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x130>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1a1      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x130>
 8004e28:	e07c      	b.n	8004f24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x1fc>
 8004e32:	8b7b      	ldrh	r3, [r7, #26]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d16b      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5e:	e057      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x26c>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0x26c>
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d114      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	7812      	ldrb	r2, [r2, #0]
 8004e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d119      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x2ae>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d014      	beq.n	8004eea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eea:	f7fd fe2f 	bl	8002b4c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d803      	bhi.n	8004f02 <HAL_SPI_TransmitReceive+0x2c6>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d102      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x2cc>
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d103      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f0e:	e029      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1a2      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x224>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d19d      	bne.n	8004e60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f893 	bl	8005054 <SPI_EndRxTxTransaction>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f40:	e010      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	e000      	b.n	8004f64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3730      	adds	r7, #48	; 0x30
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f90:	e04c      	b.n	800502c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d048      	beq.n	800502c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f9a:	f7fd fdd7 	bl	8002b4c <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d902      	bls.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d13d      	bne.n	800502c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc8:	d111      	bne.n	8004fee <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd2:	d004      	beq.n	8004fde <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fdc:	d107      	bne.n	8004fee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	d10f      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005016:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e00f      	b.n	800504c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4013      	ands	r3, r2
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	429a      	cmp	r2, r3
 8005048:	d1a3      	bne.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <SPI_EndRxTxTransaction+0x7c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <SPI_EndRxTxTransaction+0x80>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	0d5b      	lsrs	r3, r3, #21
 800506c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800507e:	d112      	bne.n	80050a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2200      	movs	r2, #0
 8005088:	2180      	movs	r1, #128	; 0x80
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff ff78 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e00f      	b.n	80050c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b80      	cmp	r3, #128	; 0x80
 80050be:	d0f2      	beq.n	80050a6 <SPI_EndRxTxTransaction+0x52>
 80050c0:	e000      	b.n	80050c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80050c2:	bf00      	nop
  }

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000008 	.word	0x20000008
 80050d4:	165e9f81 	.word	0x165e9f81

080050d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e03f      	b.n	800516a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fd fc4c 	bl	800299c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2224      	movs	r2, #36	; 0x24
 8005108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800511a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f90b 	bl	8005338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b088      	sub	sp, #32
 8005176:	af02      	add	r7, sp, #8
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b20      	cmp	r3, #32
 8005190:	f040 8083 	bne.w	800529a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_UART_Transmit+0x2e>
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e07b      	b.n	800529c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Transmit+0x40>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e074      	b.n	800529c <HAL_UART_Transmit+0x12a>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2221      	movs	r2, #33	; 0x21
 80051c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80051c8:	f7fd fcc0 	bl	8002b4c <HAL_GetTick>
 80051cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	88fa      	ldrh	r2, [r7, #6]
 80051d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80051e2:	e042      	b.n	800526a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	d122      	bne.n	8005242 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2200      	movs	r2, #0
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f84c 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e042      	b.n	800529c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005228:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d103      	bne.n	800523a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	3302      	adds	r3, #2
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	e017      	b.n	800526a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	3301      	adds	r3, #1
 800523e:	60bb      	str	r3, [r7, #8]
 8005240:	e013      	b.n	800526a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2200      	movs	r2, #0
 800524a:	2180      	movs	r1, #128	; 0x80
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f829 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e01f      	b.n	800529c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	60ba      	str	r2, [r7, #8]
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1b7      	bne.n	80051e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2200      	movs	r2, #0
 800527c:	2140      	movs	r1, #64	; 0x40
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f810 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e006      	b.n	800529c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b4:	e02c      	b.n	8005310 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d028      	beq.n	8005310 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052c4:	f7fd fc42 	bl	8002b4c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d21d      	bcs.n	8005310 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e00f      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	429a      	cmp	r2, r3
 800532c:	d0c3      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	b0bd      	sub	sp, #244	; 0xf4
 800533e:	af00      	add	r7, sp, #0
 8005340:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005354:	68d9      	ldr	r1, [r3, #12]
 8005356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	ea40 0301 	orr.w	r3, r0, r1
 8005360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	431a      	orrs	r2, r3
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	431a      	orrs	r2, r3
 8005378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005390:	f021 010c 	bic.w	r1, r1, #12
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800539e:	430b      	orrs	r3, r1
 80053a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	6999      	ldr	r1, [r3, #24]
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	ea40 0301 	orr.w	r3, r0, r1
 80053be:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ca:	f040 81a5 	bne.w	8005718 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4bcd      	ldr	r3, [pc, #820]	; (800570c <UART_SetConfig+0x3d4>)
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d006      	beq.n	80053e8 <UART_SetConfig+0xb0>
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4bcb      	ldr	r3, [pc, #812]	; (8005710 <UART_SetConfig+0x3d8>)
 80053e2:	429a      	cmp	r2, r3
 80053e4:	f040 80cb 	bne.w	800557e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053e8:	f7ff fa7c 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 80053ec:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053f4:	461c      	mov	r4, r3
 80053f6:	f04f 0500 	mov.w	r5, #0
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	1891      	adds	r1, r2, r2
 8005400:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005404:	415b      	adcs	r3, r3
 8005406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800540a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800540e:	1912      	adds	r2, r2, r4
 8005410:	eb45 0303 	adc.w	r3, r5, r3
 8005414:	f04f 0000 	mov.w	r0, #0
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	00d9      	lsls	r1, r3, #3
 800541e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005422:	00d0      	lsls	r0, r2, #3
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	1911      	adds	r1, r2, r4
 800542a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800542e:	416b      	adcs	r3, r5
 8005430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	461a      	mov	r2, r3
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	1891      	adds	r1, r2, r2
 8005442:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005446:	415b      	adcs	r3, r3
 8005448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800544c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005450:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005454:	f7fb fc20 	bl	8000c98 <__aeabi_uldivmod>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4bad      	ldr	r3, [pc, #692]	; (8005714 <UART_SetConfig+0x3dc>)
 800545e:	fba3 2302 	umull	r2, r3, r3, r2
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	011e      	lsls	r6, r3, #4
 8005466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800546a:	461c      	mov	r4, r3
 800546c:	f04f 0500 	mov.w	r5, #0
 8005470:	4622      	mov	r2, r4
 8005472:	462b      	mov	r3, r5
 8005474:	1891      	adds	r1, r2, r2
 8005476:	67b9      	str	r1, [r7, #120]	; 0x78
 8005478:	415b      	adcs	r3, r3
 800547a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800547c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005480:	1912      	adds	r2, r2, r4
 8005482:	eb45 0303 	adc.w	r3, r5, r3
 8005486:	f04f 0000 	mov.w	r0, #0
 800548a:	f04f 0100 	mov.w	r1, #0
 800548e:	00d9      	lsls	r1, r3, #3
 8005490:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005494:	00d0      	lsls	r0, r2, #3
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	1911      	adds	r1, r2, r4
 800549c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80054a0:	416b      	adcs	r3, r5
 80054a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	461a      	mov	r2, r3
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	1891      	adds	r1, r2, r2
 80054b4:	6739      	str	r1, [r7, #112]	; 0x70
 80054b6:	415b      	adcs	r3, r3
 80054b8:	677b      	str	r3, [r7, #116]	; 0x74
 80054ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80054be:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80054c2:	f7fb fbe9 	bl	8000c98 <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4b92      	ldr	r3, [pc, #584]	; (8005714 <UART_SetConfig+0x3dc>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	; 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	3332      	adds	r3, #50	; 0x32
 80054de:	4a8d      	ldr	r2, [pc, #564]	; (8005714 <UART_SetConfig+0x3dc>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054ec:	441e      	add	r6, r3
 80054ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054f2:	4618      	mov	r0, r3
 80054f4:	f04f 0100 	mov.w	r1, #0
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	1894      	adds	r4, r2, r2
 80054fe:	66bc      	str	r4, [r7, #104]	; 0x68
 8005500:	415b      	adcs	r3, r3
 8005502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005504:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005508:	1812      	adds	r2, r2, r0
 800550a:	eb41 0303 	adc.w	r3, r1, r3
 800550e:	f04f 0400 	mov.w	r4, #0
 8005512:	f04f 0500 	mov.w	r5, #0
 8005516:	00dd      	lsls	r5, r3, #3
 8005518:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800551c:	00d4      	lsls	r4, r2, #3
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	1814      	adds	r4, r2, r0
 8005524:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005528:	414b      	adcs	r3, r1
 800552a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	461a      	mov	r2, r3
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	1891      	adds	r1, r2, r2
 800553c:	6639      	str	r1, [r7, #96]	; 0x60
 800553e:	415b      	adcs	r3, r3
 8005540:	667b      	str	r3, [r7, #100]	; 0x64
 8005542:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800554a:	f7fb fba5 	bl	8000c98 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4b70      	ldr	r3, [pc, #448]	; (8005714 <UART_SetConfig+0x3dc>)
 8005554:	fba3 1302 	umull	r1, r3, r3, r2
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	2164      	movs	r1, #100	; 0x64
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	3332      	adds	r3, #50	; 0x32
 8005566:	4a6b      	ldr	r2, [pc, #428]	; (8005714 <UART_SetConfig+0x3dc>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	f003 0207 	and.w	r2, r3, #7
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4432      	add	r2, r6
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	e26d      	b.n	8005a5a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800557e:	f7ff f99d 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 8005582:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800558a:	461c      	mov	r4, r3
 800558c:	f04f 0500 	mov.w	r5, #0
 8005590:	4622      	mov	r2, r4
 8005592:	462b      	mov	r3, r5
 8005594:	1891      	adds	r1, r2, r2
 8005596:	65b9      	str	r1, [r7, #88]	; 0x58
 8005598:	415b      	adcs	r3, r3
 800559a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800559c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055a0:	1912      	adds	r2, r2, r4
 80055a2:	eb45 0303 	adc.w	r3, r5, r3
 80055a6:	f04f 0000 	mov.w	r0, #0
 80055aa:	f04f 0100 	mov.w	r1, #0
 80055ae:	00d9      	lsls	r1, r3, #3
 80055b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055b4:	00d0      	lsls	r0, r2, #3
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	1911      	adds	r1, r2, r4
 80055bc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80055c0:	416b      	adcs	r3, r5
 80055c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	461a      	mov	r2, r3
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	1891      	adds	r1, r2, r2
 80055d4:	6539      	str	r1, [r7, #80]	; 0x50
 80055d6:	415b      	adcs	r3, r3
 80055d8:	657b      	str	r3, [r7, #84]	; 0x54
 80055da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055de:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80055e2:	f7fb fb59 	bl	8000c98 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4b4a      	ldr	r3, [pc, #296]	; (8005714 <UART_SetConfig+0x3dc>)
 80055ec:	fba3 2302 	umull	r2, r3, r3, r2
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	011e      	lsls	r6, r3, #4
 80055f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055f8:	461c      	mov	r4, r3
 80055fa:	f04f 0500 	mov.w	r5, #0
 80055fe:	4622      	mov	r2, r4
 8005600:	462b      	mov	r3, r5
 8005602:	1891      	adds	r1, r2, r2
 8005604:	64b9      	str	r1, [r7, #72]	; 0x48
 8005606:	415b      	adcs	r3, r3
 8005608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800560a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800560e:	1912      	adds	r2, r2, r4
 8005610:	eb45 0303 	adc.w	r3, r5, r3
 8005614:	f04f 0000 	mov.w	r0, #0
 8005618:	f04f 0100 	mov.w	r1, #0
 800561c:	00d9      	lsls	r1, r3, #3
 800561e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005622:	00d0      	lsls	r0, r2, #3
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	1911      	adds	r1, r2, r4
 800562a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800562e:	416b      	adcs	r3, r5
 8005630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	1891      	adds	r1, r2, r2
 8005642:	6439      	str	r1, [r7, #64]	; 0x40
 8005644:	415b      	adcs	r3, r3
 8005646:	647b      	str	r3, [r7, #68]	; 0x44
 8005648:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800564c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005650:	f7fb fb22 	bl	8000c98 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b2e      	ldr	r3, [pc, #184]	; (8005714 <UART_SetConfig+0x3dc>)
 800565a:	fba3 1302 	umull	r1, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	2164      	movs	r1, #100	; 0x64
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	3332      	adds	r3, #50	; 0x32
 800566c:	4a29      	ldr	r2, [pc, #164]	; (8005714 <UART_SetConfig+0x3dc>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800567a:	441e      	add	r6, r3
 800567c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005680:	4618      	mov	r0, r3
 8005682:	f04f 0100 	mov.w	r1, #0
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	1894      	adds	r4, r2, r2
 800568c:	63bc      	str	r4, [r7, #56]	; 0x38
 800568e:	415b      	adcs	r3, r3
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005692:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005696:	1812      	adds	r2, r2, r0
 8005698:	eb41 0303 	adc.w	r3, r1, r3
 800569c:	f04f 0400 	mov.w	r4, #0
 80056a0:	f04f 0500 	mov.w	r5, #0
 80056a4:	00dd      	lsls	r5, r3, #3
 80056a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056aa:	00d4      	lsls	r4, r2, #3
 80056ac:	4622      	mov	r2, r4
 80056ae:	462b      	mov	r3, r5
 80056b0:	1814      	adds	r4, r2, r0
 80056b2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80056b6:	414b      	adcs	r3, r1
 80056b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	1891      	adds	r1, r2, r2
 80056ca:	6339      	str	r1, [r7, #48]	; 0x30
 80056cc:	415b      	adcs	r3, r3
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
 80056d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80056d4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056d8:	f7fb fade 	bl	8000c98 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <UART_SetConfig+0x3dc>)
 80056e2:	fba3 1302 	umull	r1, r3, r3, r2
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	2164      	movs	r1, #100	; 0x64
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	3332      	adds	r3, #50	; 0x32
 80056f4:	4a07      	ldr	r2, [pc, #28]	; (8005714 <UART_SetConfig+0x3dc>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	f003 0207 	and.w	r2, r3, #7
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4432      	add	r2, r6
 8005708:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800570a:	e1a6      	b.n	8005a5a <UART_SetConfig+0x722>
 800570c:	40011000 	.word	0x40011000
 8005710:	40011400 	.word	0x40011400
 8005714:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4bd1      	ldr	r3, [pc, #836]	; (8005a64 <UART_SetConfig+0x72c>)
 8005720:	429a      	cmp	r2, r3
 8005722:	d006      	beq.n	8005732 <UART_SetConfig+0x3fa>
 8005724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4bcf      	ldr	r3, [pc, #828]	; (8005a68 <UART_SetConfig+0x730>)
 800572c:	429a      	cmp	r2, r3
 800572e:	f040 80ca 	bne.w	80058c6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005732:	f7ff f8d7 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 8005736:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800573a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800573e:	461c      	mov	r4, r3
 8005740:	f04f 0500 	mov.w	r5, #0
 8005744:	4622      	mov	r2, r4
 8005746:	462b      	mov	r3, r5
 8005748:	1891      	adds	r1, r2, r2
 800574a:	62b9      	str	r1, [r7, #40]	; 0x28
 800574c:	415b      	adcs	r3, r3
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005754:	1912      	adds	r2, r2, r4
 8005756:	eb45 0303 	adc.w	r3, r5, r3
 800575a:	f04f 0000 	mov.w	r0, #0
 800575e:	f04f 0100 	mov.w	r1, #0
 8005762:	00d9      	lsls	r1, r3, #3
 8005764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005768:	00d0      	lsls	r0, r2, #3
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	eb12 0a04 	adds.w	sl, r2, r4
 8005772:	eb43 0b05 	adc.w	fp, r3, r5
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4618      	mov	r0, r3
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	008b      	lsls	r3, r1, #2
 800578c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005790:	0082      	lsls	r2, r0, #2
 8005792:	4650      	mov	r0, sl
 8005794:	4659      	mov	r1, fp
 8005796:	f7fb fa7f 	bl	8000c98 <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4bb3      	ldr	r3, [pc, #716]	; (8005a6c <UART_SetConfig+0x734>)
 80057a0:	fba3 2302 	umull	r2, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	011e      	lsls	r6, r3, #4
 80057a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057ac:	4618      	mov	r0, r3
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	1894      	adds	r4, r2, r2
 80057b8:	623c      	str	r4, [r7, #32]
 80057ba:	415b      	adcs	r3, r3
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057c2:	1812      	adds	r2, r2, r0
 80057c4:	eb41 0303 	adc.w	r3, r1, r3
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	f04f 0500 	mov.w	r5, #0
 80057d0:	00dd      	lsls	r5, r3, #3
 80057d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057d6:	00d4      	lsls	r4, r2, #3
 80057d8:	4622      	mov	r2, r4
 80057da:	462b      	mov	r3, r5
 80057dc:	1814      	adds	r4, r2, r0
 80057de:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80057e2:	414b      	adcs	r3, r1
 80057e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	008b      	lsls	r3, r1, #2
 80057fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005802:	0082      	lsls	r2, r0, #2
 8005804:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005808:	f7fb fa46 	bl	8000c98 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4b96      	ldr	r3, [pc, #600]	; (8005a6c <UART_SetConfig+0x734>)
 8005812:	fba3 1302 	umull	r1, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	2164      	movs	r1, #100	; 0x64
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	3332      	adds	r3, #50	; 0x32
 8005824:	4a91      	ldr	r2, [pc, #580]	; (8005a6c <UART_SetConfig+0x734>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005830:	441e      	add	r6, r3
 8005832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005836:	4618      	mov	r0, r3
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	1894      	adds	r4, r2, r2
 8005842:	61bc      	str	r4, [r7, #24]
 8005844:	415b      	adcs	r3, r3
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800584c:	1812      	adds	r2, r2, r0
 800584e:	eb41 0303 	adc.w	r3, r1, r3
 8005852:	f04f 0400 	mov.w	r4, #0
 8005856:	f04f 0500 	mov.w	r5, #0
 800585a:	00dd      	lsls	r5, r3, #3
 800585c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005860:	00d4      	lsls	r4, r2, #3
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	1814      	adds	r4, r2, r0
 8005868:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800586c:	414b      	adcs	r3, r1
 800586e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4618      	mov	r0, r3
 800587a:	f04f 0100 	mov.w	r1, #0
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	008b      	lsls	r3, r1, #2
 8005888:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800588c:	0082      	lsls	r2, r0, #2
 800588e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005892:	f7fb fa01 	bl	8000c98 <__aeabi_uldivmod>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4b74      	ldr	r3, [pc, #464]	; (8005a6c <UART_SetConfig+0x734>)
 800589c:	fba3 1302 	umull	r1, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	2164      	movs	r1, #100	; 0x64
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	3332      	adds	r3, #50	; 0x32
 80058ae:	4a6f      	ldr	r2, [pc, #444]	; (8005a6c <UART_SetConfig+0x734>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4432      	add	r2, r6
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	e0c9      	b.n	8005a5a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80058c6:	f7fe fff9 	bl	80048bc <HAL_RCC_GetPCLK1Freq>
 80058ca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058d2:	461c      	mov	r4, r3
 80058d4:	f04f 0500 	mov.w	r5, #0
 80058d8:	4622      	mov	r2, r4
 80058da:	462b      	mov	r3, r5
 80058dc:	1891      	adds	r1, r2, r2
 80058de:	6139      	str	r1, [r7, #16]
 80058e0:	415b      	adcs	r3, r3
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058e8:	1912      	adds	r2, r2, r4
 80058ea:	eb45 0303 	adc.w	r3, r5, r3
 80058ee:	f04f 0000 	mov.w	r0, #0
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	00d9      	lsls	r1, r3, #3
 80058f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058fc:	00d0      	lsls	r0, r2, #3
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	eb12 0804 	adds.w	r8, r2, r4
 8005906:	eb43 0905 	adc.w	r9, r3, r5
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4618      	mov	r0, r3
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	008b      	lsls	r3, r1, #2
 8005920:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005924:	0082      	lsls	r2, r0, #2
 8005926:	4640      	mov	r0, r8
 8005928:	4649      	mov	r1, r9
 800592a:	f7fb f9b5 	bl	8000c98 <__aeabi_uldivmod>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <UART_SetConfig+0x734>)
 8005934:	fba3 2302 	umull	r2, r3, r3, r2
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	011e      	lsls	r6, r3, #4
 800593c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005940:	4618      	mov	r0, r3
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	1894      	adds	r4, r2, r2
 800594c:	60bc      	str	r4, [r7, #8]
 800594e:	415b      	adcs	r3, r3
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005956:	1812      	adds	r2, r2, r0
 8005958:	eb41 0303 	adc.w	r3, r1, r3
 800595c:	f04f 0400 	mov.w	r4, #0
 8005960:	f04f 0500 	mov.w	r5, #0
 8005964:	00dd      	lsls	r5, r3, #3
 8005966:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800596a:	00d4      	lsls	r4, r2, #3
 800596c:	4622      	mov	r2, r4
 800596e:	462b      	mov	r3, r5
 8005970:	1814      	adds	r4, r2, r0
 8005972:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005976:	414b      	adcs	r3, r1
 8005978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	008b      	lsls	r3, r1, #2
 8005992:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005996:	0082      	lsls	r2, r0, #2
 8005998:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800599c:	f7fb f97c 	bl	8000c98 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <UART_SetConfig+0x734>)
 80059a6:	fba3 1302 	umull	r1, r3, r3, r2
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	2164      	movs	r1, #100	; 0x64
 80059ae:	fb01 f303 	mul.w	r3, r1, r3
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	3332      	adds	r3, #50	; 0x32
 80059b8:	4a2c      	ldr	r2, [pc, #176]	; (8005a6c <UART_SetConfig+0x734>)
 80059ba:	fba2 2303 	umull	r2, r3, r2, r3
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c4:	441e      	add	r6, r3
 80059c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059ca:	4618      	mov	r0, r3
 80059cc:	f04f 0100 	mov.w	r1, #0
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	1894      	adds	r4, r2, r2
 80059d6:	603c      	str	r4, [r7, #0]
 80059d8:	415b      	adcs	r3, r3
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e0:	1812      	adds	r2, r2, r0
 80059e2:	eb41 0303 	adc.w	r3, r1, r3
 80059e6:	f04f 0400 	mov.w	r4, #0
 80059ea:	f04f 0500 	mov.w	r5, #0
 80059ee:	00dd      	lsls	r5, r3, #3
 80059f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059f4:	00d4      	lsls	r4, r2, #3
 80059f6:	4622      	mov	r2, r4
 80059f8:	462b      	mov	r3, r5
 80059fa:	1814      	adds	r4, r2, r0
 80059fc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005a00:	414b      	adcs	r3, r1
 8005a02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f04f 0100 	mov.w	r1, #0
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	008b      	lsls	r3, r1, #2
 8005a1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a20:	0082      	lsls	r2, r0, #2
 8005a22:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005a26:	f7fb f937 	bl	8000c98 <__aeabi_uldivmod>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <UART_SetConfig+0x734>)
 8005a30:	fba3 1302 	umull	r1, r3, r3, r2
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	2164      	movs	r1, #100	; 0x64
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	3332      	adds	r3, #50	; 0x32
 8005a42:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <UART_SetConfig+0x734>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	f003 020f 	and.w	r2, r3, #15
 8005a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4432      	add	r2, r6
 8005a56:	609a      	str	r2, [r3, #8]
}
 8005a58:	e7ff      	b.n	8005a5a <UART_SetConfig+0x722>
 8005a5a:	bf00      	nop
 8005a5c:	37f4      	adds	r7, #244	; 0xf4
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a64:	40011000 	.word	0x40011000
 8005a68:	40011400 	.word	0x40011400
 8005a6c:	51eb851f 	.word	0x51eb851f

08005a70 <__errno>:
 8005a70:	4b01      	ldr	r3, [pc, #4]	; (8005a78 <__errno+0x8>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000014 	.word	0x20000014

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	; (8005ab4 <__libc_init_array+0x38>)
 8005a80:	4c0d      	ldr	r4, [pc, #52]	; (8005ab8 <__libc_init_array+0x3c>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	2600      	movs	r6, #0
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	4d0b      	ldr	r5, [pc, #44]	; (8005abc <__libc_init_array+0x40>)
 8005a8e:	4c0c      	ldr	r4, [pc, #48]	; (8005ac0 <__libc_init_array+0x44>)
 8005a90:	f004 fc46 	bl	800a320 <_init>
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	2600      	movs	r6, #0
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	0800aa14 	.word	0x0800aa14
 8005ab8:	0800aa14 	.word	0x0800aa14
 8005abc:	0800aa14 	.word	0x0800aa14
 8005ac0:	0800aa18 	.word	0x0800aa18

08005ac4 <memset>:
 8005ac4:	4402      	add	r2, r0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d100      	bne.n	8005ace <memset+0xa>
 8005acc:	4770      	bx	lr
 8005ace:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad2:	e7f9      	b.n	8005ac8 <memset+0x4>

08005ad4 <__cvt>:
 8005ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	ec55 4b10 	vmov	r4, r5, d0
 8005adc:	2d00      	cmp	r5, #0
 8005ade:	460e      	mov	r6, r1
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	bfbb      	ittet	lt
 8005ae6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005aea:	461d      	movlt	r5, r3
 8005aec:	2300      	movge	r3, #0
 8005aee:	232d      	movlt	r3, #45	; 0x2d
 8005af0:	700b      	strb	r3, [r1, #0]
 8005af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005af8:	4691      	mov	r9, r2
 8005afa:	f023 0820 	bic.w	r8, r3, #32
 8005afe:	bfbc      	itt	lt
 8005b00:	4622      	movlt	r2, r4
 8005b02:	4614      	movlt	r4, r2
 8005b04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b08:	d005      	beq.n	8005b16 <__cvt+0x42>
 8005b0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b0e:	d100      	bne.n	8005b12 <__cvt+0x3e>
 8005b10:	3601      	adds	r6, #1
 8005b12:	2102      	movs	r1, #2
 8005b14:	e000      	b.n	8005b18 <__cvt+0x44>
 8005b16:	2103      	movs	r1, #3
 8005b18:	ab03      	add	r3, sp, #12
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	ab02      	add	r3, sp, #8
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	ec45 4b10 	vmov	d0, r4, r5
 8005b24:	4653      	mov	r3, sl
 8005b26:	4632      	mov	r2, r6
 8005b28:	f001 fdb6 	bl	8007698 <_dtoa_r>
 8005b2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b30:	4607      	mov	r7, r0
 8005b32:	d102      	bne.n	8005b3a <__cvt+0x66>
 8005b34:	f019 0f01 	tst.w	r9, #1
 8005b38:	d022      	beq.n	8005b80 <__cvt+0xac>
 8005b3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b3e:	eb07 0906 	add.w	r9, r7, r6
 8005b42:	d110      	bne.n	8005b66 <__cvt+0x92>
 8005b44:	783b      	ldrb	r3, [r7, #0]
 8005b46:	2b30      	cmp	r3, #48	; 0x30
 8005b48:	d10a      	bne.n	8005b60 <__cvt+0x8c>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4629      	mov	r1, r5
 8005b52:	f7fa ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b56:	b918      	cbnz	r0, 8005b60 <__cvt+0x8c>
 8005b58:	f1c6 0601 	rsb	r6, r6, #1
 8005b5c:	f8ca 6000 	str.w	r6, [sl]
 8005b60:	f8da 3000 	ldr.w	r3, [sl]
 8005b64:	4499      	add	r9, r3
 8005b66:	2200      	movs	r2, #0
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa ffb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b72:	b108      	cbz	r0, 8005b78 <__cvt+0xa4>
 8005b74:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b78:	2230      	movs	r2, #48	; 0x30
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	454b      	cmp	r3, r9
 8005b7e:	d307      	bcc.n	8005b90 <__cvt+0xbc>
 8005b80:	9b03      	ldr	r3, [sp, #12]
 8005b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b84:	1bdb      	subs	r3, r3, r7
 8005b86:	4638      	mov	r0, r7
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	b004      	add	sp, #16
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	9103      	str	r1, [sp, #12]
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e7f0      	b.n	8005b7a <__cvt+0xa6>

08005b98 <__exponent>:
 8005b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	bfb8      	it	lt
 8005ba0:	4249      	neglt	r1, r1
 8005ba2:	f803 2b02 	strb.w	r2, [r3], #2
 8005ba6:	bfb4      	ite	lt
 8005ba8:	222d      	movlt	r2, #45	; 0x2d
 8005baa:	222b      	movge	r2, #43	; 0x2b
 8005bac:	2909      	cmp	r1, #9
 8005bae:	7042      	strb	r2, [r0, #1]
 8005bb0:	dd2a      	ble.n	8005c08 <__exponent+0x70>
 8005bb2:	f10d 0407 	add.w	r4, sp, #7
 8005bb6:	46a4      	mov	ip, r4
 8005bb8:	270a      	movs	r7, #10
 8005bba:	46a6      	mov	lr, r4
 8005bbc:	460a      	mov	r2, r1
 8005bbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bc2:	fb07 1516 	mls	r5, r7, r6, r1
 8005bc6:	3530      	adds	r5, #48	; 0x30
 8005bc8:	2a63      	cmp	r2, #99	; 0x63
 8005bca:	f104 34ff 	add.w	r4, r4, #4294967295
 8005bce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	dcf1      	bgt.n	8005bba <__exponent+0x22>
 8005bd6:	3130      	adds	r1, #48	; 0x30
 8005bd8:	f1ae 0502 	sub.w	r5, lr, #2
 8005bdc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005be0:	1c44      	adds	r4, r0, #1
 8005be2:	4629      	mov	r1, r5
 8005be4:	4561      	cmp	r1, ip
 8005be6:	d30a      	bcc.n	8005bfe <__exponent+0x66>
 8005be8:	f10d 0209 	add.w	r2, sp, #9
 8005bec:	eba2 020e 	sub.w	r2, r2, lr
 8005bf0:	4565      	cmp	r5, ip
 8005bf2:	bf88      	it	hi
 8005bf4:	2200      	movhi	r2, #0
 8005bf6:	4413      	add	r3, r2
 8005bf8:	1a18      	subs	r0, r3, r0
 8005bfa:	b003      	add	sp, #12
 8005bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c06:	e7ed      	b.n	8005be4 <__exponent+0x4c>
 8005c08:	2330      	movs	r3, #48	; 0x30
 8005c0a:	3130      	adds	r1, #48	; 0x30
 8005c0c:	7083      	strb	r3, [r0, #2]
 8005c0e:	70c1      	strb	r1, [r0, #3]
 8005c10:	1d03      	adds	r3, r0, #4
 8005c12:	e7f1      	b.n	8005bf8 <__exponent+0x60>

08005c14 <_printf_float>:
 8005c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c18:	ed2d 8b02 	vpush	{d8}
 8005c1c:	b08d      	sub	sp, #52	; 0x34
 8005c1e:	460c      	mov	r4, r1
 8005c20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c24:	4616      	mov	r6, r2
 8005c26:	461f      	mov	r7, r3
 8005c28:	4605      	mov	r5, r0
 8005c2a:	f002 fe91 	bl	8008950 <_localeconv_r>
 8005c2e:	f8d0 a000 	ldr.w	sl, [r0]
 8005c32:	4650      	mov	r0, sl
 8005c34:	f7fa fad4 	bl	80001e0 <strlen>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	9305      	str	r3, [sp, #20]
 8005c40:	f8d8 3000 	ldr.w	r3, [r8]
 8005c44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c48:	3307      	adds	r3, #7
 8005c4a:	f023 0307 	bic.w	r3, r3, #7
 8005c4e:	f103 0208 	add.w	r2, r3, #8
 8005c52:	f8c8 2000 	str.w	r2, [r8]
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c66:	9307      	str	r3, [sp, #28]
 8005c68:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c6c:	ee08 0a10 	vmov	s16, r0
 8005c70:	4b9f      	ldr	r3, [pc, #636]	; (8005ef0 <_printf_float+0x2dc>)
 8005c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c76:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7a:	f7fa ff5f 	bl	8000b3c <__aeabi_dcmpun>
 8005c7e:	bb88      	cbnz	r0, 8005ce4 <_printf_float+0xd0>
 8005c80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c84:	4b9a      	ldr	r3, [pc, #616]	; (8005ef0 <_printf_float+0x2dc>)
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8a:	f7fa ff39 	bl	8000b00 <__aeabi_dcmple>
 8005c8e:	bb48      	cbnz	r0, 8005ce4 <_printf_float+0xd0>
 8005c90:	2200      	movs	r2, #0
 8005c92:	2300      	movs	r3, #0
 8005c94:	4640      	mov	r0, r8
 8005c96:	4649      	mov	r1, r9
 8005c98:	f7fa ff28 	bl	8000aec <__aeabi_dcmplt>
 8005c9c:	b110      	cbz	r0, 8005ca4 <_printf_float+0x90>
 8005c9e:	232d      	movs	r3, #45	; 0x2d
 8005ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca4:	4b93      	ldr	r3, [pc, #588]	; (8005ef4 <_printf_float+0x2e0>)
 8005ca6:	4894      	ldr	r0, [pc, #592]	; (8005ef8 <_printf_float+0x2e4>)
 8005ca8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005cac:	bf94      	ite	ls
 8005cae:	4698      	movls	r8, r3
 8005cb0:	4680      	movhi	r8, r0
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	6123      	str	r3, [r4, #16]
 8005cb6:	9b05      	ldr	r3, [sp, #20]
 8005cb8:	f023 0204 	bic.w	r2, r3, #4
 8005cbc:	6022      	str	r2, [r4, #0]
 8005cbe:	f04f 0900 	mov.w	r9, #0
 8005cc2:	9700      	str	r7, [sp, #0]
 8005cc4:	4633      	mov	r3, r6
 8005cc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 f9d8 	bl	8006080 <_printf_common>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f040 8090 	bne.w	8005df6 <_printf_float+0x1e2>
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	b00d      	add	sp, #52	; 0x34
 8005cdc:	ecbd 8b02 	vpop	{d8}
 8005ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	4640      	mov	r0, r8
 8005cea:	4649      	mov	r1, r9
 8005cec:	f7fa ff26 	bl	8000b3c <__aeabi_dcmpun>
 8005cf0:	b140      	cbz	r0, 8005d04 <_printf_float+0xf0>
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bfbc      	itt	lt
 8005cf8:	232d      	movlt	r3, #45	; 0x2d
 8005cfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cfe:	487f      	ldr	r0, [pc, #508]	; (8005efc <_printf_float+0x2e8>)
 8005d00:	4b7f      	ldr	r3, [pc, #508]	; (8005f00 <_printf_float+0x2ec>)
 8005d02:	e7d1      	b.n	8005ca8 <_printf_float+0x94>
 8005d04:	6863      	ldr	r3, [r4, #4]
 8005d06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d0a:	9206      	str	r2, [sp, #24]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	d13f      	bne.n	8005d90 <_printf_float+0x17c>
 8005d10:	2306      	movs	r3, #6
 8005d12:	6063      	str	r3, [r4, #4]
 8005d14:	9b05      	ldr	r3, [sp, #20]
 8005d16:	6861      	ldr	r1, [r4, #4]
 8005d18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9303      	str	r3, [sp, #12]
 8005d20:	ab0a      	add	r3, sp, #40	; 0x28
 8005d22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d26:	ab09      	add	r3, sp, #36	; 0x24
 8005d28:	ec49 8b10 	vmov	d0, r8, r9
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	6022      	str	r2, [r4, #0]
 8005d30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d34:	4628      	mov	r0, r5
 8005d36:	f7ff fecd 	bl	8005ad4 <__cvt>
 8005d3a:	9b06      	ldr	r3, [sp, #24]
 8005d3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d3e:	2b47      	cmp	r3, #71	; 0x47
 8005d40:	4680      	mov	r8, r0
 8005d42:	d108      	bne.n	8005d56 <_printf_float+0x142>
 8005d44:	1cc8      	adds	r0, r1, #3
 8005d46:	db02      	blt.n	8005d4e <_printf_float+0x13a>
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	4299      	cmp	r1, r3
 8005d4c:	dd41      	ble.n	8005dd2 <_printf_float+0x1be>
 8005d4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d52:	fa5f fb8b 	uxtb.w	fp, fp
 8005d56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d5a:	d820      	bhi.n	8005d9e <_printf_float+0x18a>
 8005d5c:	3901      	subs	r1, #1
 8005d5e:	465a      	mov	r2, fp
 8005d60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d64:	9109      	str	r1, [sp, #36]	; 0x24
 8005d66:	f7ff ff17 	bl	8005b98 <__exponent>
 8005d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d6c:	1813      	adds	r3, r2, r0
 8005d6e:	2a01      	cmp	r2, #1
 8005d70:	4681      	mov	r9, r0
 8005d72:	6123      	str	r3, [r4, #16]
 8005d74:	dc02      	bgt.n	8005d7c <_printf_float+0x168>
 8005d76:	6822      	ldr	r2, [r4, #0]
 8005d78:	07d2      	lsls	r2, r2, #31
 8005d7a:	d501      	bpl.n	8005d80 <_printf_float+0x16c>
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d09c      	beq.n	8005cc2 <_printf_float+0xae>
 8005d88:	232d      	movs	r3, #45	; 0x2d
 8005d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8e:	e798      	b.n	8005cc2 <_printf_float+0xae>
 8005d90:	9a06      	ldr	r2, [sp, #24]
 8005d92:	2a47      	cmp	r2, #71	; 0x47
 8005d94:	d1be      	bne.n	8005d14 <_printf_float+0x100>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1bc      	bne.n	8005d14 <_printf_float+0x100>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e7b9      	b.n	8005d12 <_printf_float+0xfe>
 8005d9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005da2:	d118      	bne.n	8005dd6 <_printf_float+0x1c2>
 8005da4:	2900      	cmp	r1, #0
 8005da6:	6863      	ldr	r3, [r4, #4]
 8005da8:	dd0b      	ble.n	8005dc2 <_printf_float+0x1ae>
 8005daa:	6121      	str	r1, [r4, #16]
 8005dac:	b913      	cbnz	r3, 8005db4 <_printf_float+0x1a0>
 8005dae:	6822      	ldr	r2, [r4, #0]
 8005db0:	07d0      	lsls	r0, r2, #31
 8005db2:	d502      	bpl.n	8005dba <_printf_float+0x1a6>
 8005db4:	3301      	adds	r3, #1
 8005db6:	440b      	add	r3, r1
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dbc:	f04f 0900 	mov.w	r9, #0
 8005dc0:	e7de      	b.n	8005d80 <_printf_float+0x16c>
 8005dc2:	b913      	cbnz	r3, 8005dca <_printf_float+0x1b6>
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	07d2      	lsls	r2, r2, #31
 8005dc8:	d501      	bpl.n	8005dce <_printf_float+0x1ba>
 8005dca:	3302      	adds	r3, #2
 8005dcc:	e7f4      	b.n	8005db8 <_printf_float+0x1a4>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e7f2      	b.n	8005db8 <_printf_float+0x1a4>
 8005dd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd8:	4299      	cmp	r1, r3
 8005dda:	db05      	blt.n	8005de8 <_printf_float+0x1d4>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	6121      	str	r1, [r4, #16]
 8005de0:	07d8      	lsls	r0, r3, #31
 8005de2:	d5ea      	bpl.n	8005dba <_printf_float+0x1a6>
 8005de4:	1c4b      	adds	r3, r1, #1
 8005de6:	e7e7      	b.n	8005db8 <_printf_float+0x1a4>
 8005de8:	2900      	cmp	r1, #0
 8005dea:	bfd4      	ite	le
 8005dec:	f1c1 0202 	rsble	r2, r1, #2
 8005df0:	2201      	movgt	r2, #1
 8005df2:	4413      	add	r3, r2
 8005df4:	e7e0      	b.n	8005db8 <_printf_float+0x1a4>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	055a      	lsls	r2, r3, #21
 8005dfa:	d407      	bmi.n	8005e0c <_printf_float+0x1f8>
 8005dfc:	6923      	ldr	r3, [r4, #16]
 8005dfe:	4642      	mov	r2, r8
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	d12c      	bne.n	8005e64 <_printf_float+0x250>
 8005e0a:	e764      	b.n	8005cd6 <_printf_float+0xc2>
 8005e0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e10:	f240 80e0 	bls.w	8005fd4 <_printf_float+0x3c0>
 8005e14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f7fa fe5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d034      	beq.n	8005e8e <_printf_float+0x27a>
 8005e24:	4a37      	ldr	r2, [pc, #220]	; (8005f04 <_printf_float+0x2f0>)
 8005e26:	2301      	movs	r3, #1
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	47b8      	blx	r7
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f43f af51 	beq.w	8005cd6 <_printf_float+0xc2>
 8005e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	db02      	blt.n	8005e42 <_printf_float+0x22e>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	07d8      	lsls	r0, r3, #31
 8005e40:	d510      	bpl.n	8005e64 <_printf_float+0x250>
 8005e42:	ee18 3a10 	vmov	r3, s16
 8005e46:	4652      	mov	r2, sl
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f43f af41 	beq.w	8005cd6 <_printf_float+0xc2>
 8005e54:	f04f 0800 	mov.w	r8, #0
 8005e58:	f104 091a 	add.w	r9, r4, #26
 8005e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	4543      	cmp	r3, r8
 8005e62:	dc09      	bgt.n	8005e78 <_printf_float+0x264>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	079b      	lsls	r3, r3, #30
 8005e68:	f100 8105 	bmi.w	8006076 <_printf_float+0x462>
 8005e6c:	68e0      	ldr	r0, [r4, #12]
 8005e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e70:	4298      	cmp	r0, r3
 8005e72:	bfb8      	it	lt
 8005e74:	4618      	movlt	r0, r3
 8005e76:	e730      	b.n	8005cda <_printf_float+0xc6>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	464a      	mov	r2, r9
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	f43f af27 	beq.w	8005cd6 <_printf_float+0xc2>
 8005e88:	f108 0801 	add.w	r8, r8, #1
 8005e8c:	e7e6      	b.n	8005e5c <_printf_float+0x248>
 8005e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	dc39      	bgt.n	8005f08 <_printf_float+0x2f4>
 8005e94:	4a1b      	ldr	r2, [pc, #108]	; (8005f04 <_printf_float+0x2f0>)
 8005e96:	2301      	movs	r3, #1
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b8      	blx	r7
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	f43f af19 	beq.w	8005cd6 <_printf_float+0xc2>
 8005ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	d102      	bne.n	8005eb2 <_printf_float+0x29e>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	07d9      	lsls	r1, r3, #31
 8005eb0:	d5d8      	bpl.n	8005e64 <_printf_float+0x250>
 8005eb2:	ee18 3a10 	vmov	r3, s16
 8005eb6:	4652      	mov	r2, sl
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	f43f af09 	beq.w	8005cd6 <_printf_float+0xc2>
 8005ec4:	f04f 0900 	mov.w	r9, #0
 8005ec8:	f104 0a1a 	add.w	sl, r4, #26
 8005ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ece:	425b      	negs	r3, r3
 8005ed0:	454b      	cmp	r3, r9
 8005ed2:	dc01      	bgt.n	8005ed8 <_printf_float+0x2c4>
 8005ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed6:	e792      	b.n	8005dfe <_printf_float+0x1ea>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4652      	mov	r2, sl
 8005edc:	4631      	mov	r1, r6
 8005ede:	4628      	mov	r0, r5
 8005ee0:	47b8      	blx	r7
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	f43f aef7 	beq.w	8005cd6 <_printf_float+0xc2>
 8005ee8:	f109 0901 	add.w	r9, r9, #1
 8005eec:	e7ee      	b.n	8005ecc <_printf_float+0x2b8>
 8005eee:	bf00      	nop
 8005ef0:	7fefffff 	.word	0x7fefffff
 8005ef4:	0800a55c 	.word	0x0800a55c
 8005ef8:	0800a560 	.word	0x0800a560
 8005efc:	0800a568 	.word	0x0800a568
 8005f00:	0800a564 	.word	0x0800a564
 8005f04:	0800a56c 	.word	0x0800a56c
 8005f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	bfa8      	it	ge
 8005f10:	461a      	movge	r2, r3
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	4691      	mov	r9, r2
 8005f16:	dc37      	bgt.n	8005f88 <_printf_float+0x374>
 8005f18:	f04f 0b00 	mov.w	fp, #0
 8005f1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f20:	f104 021a 	add.w	r2, r4, #26
 8005f24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f26:	9305      	str	r3, [sp, #20]
 8005f28:	eba3 0309 	sub.w	r3, r3, r9
 8005f2c:	455b      	cmp	r3, fp
 8005f2e:	dc33      	bgt.n	8005f98 <_printf_float+0x384>
 8005f30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f34:	429a      	cmp	r2, r3
 8005f36:	db3b      	blt.n	8005fb0 <_printf_float+0x39c>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	07da      	lsls	r2, r3, #31
 8005f3c:	d438      	bmi.n	8005fb0 <_printf_float+0x39c>
 8005f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f40:	9b05      	ldr	r3, [sp, #20]
 8005f42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	eba2 0901 	sub.w	r9, r2, r1
 8005f4a:	4599      	cmp	r9, r3
 8005f4c:	bfa8      	it	ge
 8005f4e:	4699      	movge	r9, r3
 8005f50:	f1b9 0f00 	cmp.w	r9, #0
 8005f54:	dc35      	bgt.n	8005fc2 <_printf_float+0x3ae>
 8005f56:	f04f 0800 	mov.w	r8, #0
 8005f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f5e:	f104 0a1a 	add.w	sl, r4, #26
 8005f62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	eba3 0309 	sub.w	r3, r3, r9
 8005f6c:	4543      	cmp	r3, r8
 8005f6e:	f77f af79 	ble.w	8005e64 <_printf_float+0x250>
 8005f72:	2301      	movs	r3, #1
 8005f74:	4652      	mov	r2, sl
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f43f aeaa 	beq.w	8005cd6 <_printf_float+0xc2>
 8005f82:	f108 0801 	add.w	r8, r8, #1
 8005f86:	e7ec      	b.n	8005f62 <_printf_float+0x34e>
 8005f88:	4613      	mov	r3, r2
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	4628      	mov	r0, r5
 8005f90:	47b8      	blx	r7
 8005f92:	3001      	adds	r0, #1
 8005f94:	d1c0      	bne.n	8005f18 <_printf_float+0x304>
 8005f96:	e69e      	b.n	8005cd6 <_printf_float+0xc2>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	9205      	str	r2, [sp, #20]
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f ae97 	beq.w	8005cd6 <_printf_float+0xc2>
 8005fa8:	9a05      	ldr	r2, [sp, #20]
 8005faa:	f10b 0b01 	add.w	fp, fp, #1
 8005fae:	e7b9      	b.n	8005f24 <_printf_float+0x310>
 8005fb0:	ee18 3a10 	vmov	r3, s16
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d1be      	bne.n	8005f3e <_printf_float+0x32a>
 8005fc0:	e689      	b.n	8005cd6 <_printf_float+0xc2>
 8005fc2:	9a05      	ldr	r2, [sp, #20]
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	4442      	add	r2, r8
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d1c1      	bne.n	8005f56 <_printf_float+0x342>
 8005fd2:	e680      	b.n	8005cd6 <_printf_float+0xc2>
 8005fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fd6:	2a01      	cmp	r2, #1
 8005fd8:	dc01      	bgt.n	8005fde <_printf_float+0x3ca>
 8005fda:	07db      	lsls	r3, r3, #31
 8005fdc:	d538      	bpl.n	8006050 <_printf_float+0x43c>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f43f ae74 	beq.w	8005cd6 <_printf_float+0xc2>
 8005fee:	ee18 3a10 	vmov	r3, s16
 8005ff2:	4652      	mov	r2, sl
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	f43f ae6b 	beq.w	8005cd6 <_printf_float+0xc2>
 8006000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	f7fa fd66 	bl	8000ad8 <__aeabi_dcmpeq>
 800600c:	b9d8      	cbnz	r0, 8006046 <_printf_float+0x432>
 800600e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006010:	f108 0201 	add.w	r2, r8, #1
 8006014:	3b01      	subs	r3, #1
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	d10e      	bne.n	800603e <_printf_float+0x42a>
 8006020:	e659      	b.n	8005cd6 <_printf_float+0xc2>
 8006022:	2301      	movs	r3, #1
 8006024:	4652      	mov	r2, sl
 8006026:	4631      	mov	r1, r6
 8006028:	4628      	mov	r0, r5
 800602a:	47b8      	blx	r7
 800602c:	3001      	adds	r0, #1
 800602e:	f43f ae52 	beq.w	8005cd6 <_printf_float+0xc2>
 8006032:	f108 0801 	add.w	r8, r8, #1
 8006036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006038:	3b01      	subs	r3, #1
 800603a:	4543      	cmp	r3, r8
 800603c:	dcf1      	bgt.n	8006022 <_printf_float+0x40e>
 800603e:	464b      	mov	r3, r9
 8006040:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006044:	e6dc      	b.n	8005e00 <_printf_float+0x1ec>
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	f104 0a1a 	add.w	sl, r4, #26
 800604e:	e7f2      	b.n	8006036 <_printf_float+0x422>
 8006050:	2301      	movs	r3, #1
 8006052:	4642      	mov	r2, r8
 8006054:	e7df      	b.n	8006016 <_printf_float+0x402>
 8006056:	2301      	movs	r3, #1
 8006058:	464a      	mov	r2, r9
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f ae38 	beq.w	8005cd6 <_printf_float+0xc2>
 8006066:	f108 0801 	add.w	r8, r8, #1
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800606e:	1a5b      	subs	r3, r3, r1
 8006070:	4543      	cmp	r3, r8
 8006072:	dcf0      	bgt.n	8006056 <_printf_float+0x442>
 8006074:	e6fa      	b.n	8005e6c <_printf_float+0x258>
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	f104 0919 	add.w	r9, r4, #25
 800607e:	e7f4      	b.n	800606a <_printf_float+0x456>

08006080 <_printf_common>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	4616      	mov	r6, r2
 8006086:	4699      	mov	r9, r3
 8006088:	688a      	ldr	r2, [r1, #8]
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006090:	4293      	cmp	r3, r2
 8006092:	bfb8      	it	lt
 8006094:	4613      	movlt	r3, r2
 8006096:	6033      	str	r3, [r6, #0]
 8006098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800609c:	4607      	mov	r7, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	b10a      	cbz	r2, 80060a6 <_printf_common+0x26>
 80060a2:	3301      	adds	r3, #1
 80060a4:	6033      	str	r3, [r6, #0]
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	0699      	lsls	r1, r3, #26
 80060aa:	bf42      	ittt	mi
 80060ac:	6833      	ldrmi	r3, [r6, #0]
 80060ae:	3302      	addmi	r3, #2
 80060b0:	6033      	strmi	r3, [r6, #0]
 80060b2:	6825      	ldr	r5, [r4, #0]
 80060b4:	f015 0506 	ands.w	r5, r5, #6
 80060b8:	d106      	bne.n	80060c8 <_printf_common+0x48>
 80060ba:	f104 0a19 	add.w	sl, r4, #25
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	6832      	ldr	r2, [r6, #0]
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	dc26      	bgt.n	8006116 <_printf_common+0x96>
 80060c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060cc:	1e13      	subs	r3, r2, #0
 80060ce:	6822      	ldr	r2, [r4, #0]
 80060d0:	bf18      	it	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	0692      	lsls	r2, r2, #26
 80060d6:	d42b      	bmi.n	8006130 <_printf_common+0xb0>
 80060d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060dc:	4649      	mov	r1, r9
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	3001      	adds	r0, #1
 80060e4:	d01e      	beq.n	8006124 <_printf_common+0xa4>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	68e5      	ldr	r5, [r4, #12]
 80060ea:	6832      	ldr	r2, [r6, #0]
 80060ec:	f003 0306 	and.w	r3, r3, #6
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	bf08      	it	eq
 80060f4:	1aad      	subeq	r5, r5, r2
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	6922      	ldr	r2, [r4, #16]
 80060fa:	bf0c      	ite	eq
 80060fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006100:	2500      	movne	r5, #0
 8006102:	4293      	cmp	r3, r2
 8006104:	bfc4      	itt	gt
 8006106:	1a9b      	subgt	r3, r3, r2
 8006108:	18ed      	addgt	r5, r5, r3
 800610a:	2600      	movs	r6, #0
 800610c:	341a      	adds	r4, #26
 800610e:	42b5      	cmp	r5, r6
 8006110:	d11a      	bne.n	8006148 <_printf_common+0xc8>
 8006112:	2000      	movs	r0, #0
 8006114:	e008      	b.n	8006128 <_printf_common+0xa8>
 8006116:	2301      	movs	r3, #1
 8006118:	4652      	mov	r2, sl
 800611a:	4649      	mov	r1, r9
 800611c:	4638      	mov	r0, r7
 800611e:	47c0      	blx	r8
 8006120:	3001      	adds	r0, #1
 8006122:	d103      	bne.n	800612c <_printf_common+0xac>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612c:	3501      	adds	r5, #1
 800612e:	e7c6      	b.n	80060be <_printf_common+0x3e>
 8006130:	18e1      	adds	r1, r4, r3
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	2030      	movs	r0, #48	; 0x30
 8006136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800613a:	4422      	add	r2, r4
 800613c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006144:	3302      	adds	r3, #2
 8006146:	e7c7      	b.n	80060d8 <_printf_common+0x58>
 8006148:	2301      	movs	r3, #1
 800614a:	4622      	mov	r2, r4
 800614c:	4649      	mov	r1, r9
 800614e:	4638      	mov	r0, r7
 8006150:	47c0      	blx	r8
 8006152:	3001      	adds	r0, #1
 8006154:	d0e6      	beq.n	8006124 <_printf_common+0xa4>
 8006156:	3601      	adds	r6, #1
 8006158:	e7d9      	b.n	800610e <_printf_common+0x8e>
	...

0800615c <_printf_i>:
 800615c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	460c      	mov	r4, r1
 8006162:	4691      	mov	r9, r2
 8006164:	7e27      	ldrb	r7, [r4, #24]
 8006166:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006168:	2f78      	cmp	r7, #120	; 0x78
 800616a:	4680      	mov	r8, r0
 800616c:	469a      	mov	sl, r3
 800616e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006172:	d807      	bhi.n	8006184 <_printf_i+0x28>
 8006174:	2f62      	cmp	r7, #98	; 0x62
 8006176:	d80a      	bhi.n	800618e <_printf_i+0x32>
 8006178:	2f00      	cmp	r7, #0
 800617a:	f000 80d8 	beq.w	800632e <_printf_i+0x1d2>
 800617e:	2f58      	cmp	r7, #88	; 0x58
 8006180:	f000 80a3 	beq.w	80062ca <_printf_i+0x16e>
 8006184:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800618c:	e03a      	b.n	8006204 <_printf_i+0xa8>
 800618e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006192:	2b15      	cmp	r3, #21
 8006194:	d8f6      	bhi.n	8006184 <_printf_i+0x28>
 8006196:	a001      	add	r0, pc, #4	; (adr r0, 800619c <_printf_i+0x40>)
 8006198:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	08006209 	.word	0x08006209
 80061a4:	08006185 	.word	0x08006185
 80061a8:	08006185 	.word	0x08006185
 80061ac:	08006185 	.word	0x08006185
 80061b0:	08006185 	.word	0x08006185
 80061b4:	08006209 	.word	0x08006209
 80061b8:	08006185 	.word	0x08006185
 80061bc:	08006185 	.word	0x08006185
 80061c0:	08006185 	.word	0x08006185
 80061c4:	08006185 	.word	0x08006185
 80061c8:	08006315 	.word	0x08006315
 80061cc:	08006239 	.word	0x08006239
 80061d0:	080062f7 	.word	0x080062f7
 80061d4:	08006185 	.word	0x08006185
 80061d8:	08006185 	.word	0x08006185
 80061dc:	08006337 	.word	0x08006337
 80061e0:	08006185 	.word	0x08006185
 80061e4:	08006239 	.word	0x08006239
 80061e8:	08006185 	.word	0x08006185
 80061ec:	08006185 	.word	0x08006185
 80061f0:	080062ff 	.word	0x080062ff
 80061f4:	680b      	ldr	r3, [r1, #0]
 80061f6:	1d1a      	adds	r2, r3, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	600a      	str	r2, [r1, #0]
 80061fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006204:	2301      	movs	r3, #1
 8006206:	e0a3      	b.n	8006350 <_printf_i+0x1f4>
 8006208:	6825      	ldr	r5, [r4, #0]
 800620a:	6808      	ldr	r0, [r1, #0]
 800620c:	062e      	lsls	r6, r5, #24
 800620e:	f100 0304 	add.w	r3, r0, #4
 8006212:	d50a      	bpl.n	800622a <_printf_i+0xce>
 8006214:	6805      	ldr	r5, [r0, #0]
 8006216:	600b      	str	r3, [r1, #0]
 8006218:	2d00      	cmp	r5, #0
 800621a:	da03      	bge.n	8006224 <_printf_i+0xc8>
 800621c:	232d      	movs	r3, #45	; 0x2d
 800621e:	426d      	negs	r5, r5
 8006220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006224:	485e      	ldr	r0, [pc, #376]	; (80063a0 <_printf_i+0x244>)
 8006226:	230a      	movs	r3, #10
 8006228:	e019      	b.n	800625e <_printf_i+0x102>
 800622a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800622e:	6805      	ldr	r5, [r0, #0]
 8006230:	600b      	str	r3, [r1, #0]
 8006232:	bf18      	it	ne
 8006234:	b22d      	sxthne	r5, r5
 8006236:	e7ef      	b.n	8006218 <_printf_i+0xbc>
 8006238:	680b      	ldr	r3, [r1, #0]
 800623a:	6825      	ldr	r5, [r4, #0]
 800623c:	1d18      	adds	r0, r3, #4
 800623e:	6008      	str	r0, [r1, #0]
 8006240:	0628      	lsls	r0, r5, #24
 8006242:	d501      	bpl.n	8006248 <_printf_i+0xec>
 8006244:	681d      	ldr	r5, [r3, #0]
 8006246:	e002      	b.n	800624e <_printf_i+0xf2>
 8006248:	0669      	lsls	r1, r5, #25
 800624a:	d5fb      	bpl.n	8006244 <_printf_i+0xe8>
 800624c:	881d      	ldrh	r5, [r3, #0]
 800624e:	4854      	ldr	r0, [pc, #336]	; (80063a0 <_printf_i+0x244>)
 8006250:	2f6f      	cmp	r7, #111	; 0x6f
 8006252:	bf0c      	ite	eq
 8006254:	2308      	moveq	r3, #8
 8006256:	230a      	movne	r3, #10
 8006258:	2100      	movs	r1, #0
 800625a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800625e:	6866      	ldr	r6, [r4, #4]
 8006260:	60a6      	str	r6, [r4, #8]
 8006262:	2e00      	cmp	r6, #0
 8006264:	bfa2      	ittt	ge
 8006266:	6821      	ldrge	r1, [r4, #0]
 8006268:	f021 0104 	bicge.w	r1, r1, #4
 800626c:	6021      	strge	r1, [r4, #0]
 800626e:	b90d      	cbnz	r5, 8006274 <_printf_i+0x118>
 8006270:	2e00      	cmp	r6, #0
 8006272:	d04d      	beq.n	8006310 <_printf_i+0x1b4>
 8006274:	4616      	mov	r6, r2
 8006276:	fbb5 f1f3 	udiv	r1, r5, r3
 800627a:	fb03 5711 	mls	r7, r3, r1, r5
 800627e:	5dc7      	ldrb	r7, [r0, r7]
 8006280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006284:	462f      	mov	r7, r5
 8006286:	42bb      	cmp	r3, r7
 8006288:	460d      	mov	r5, r1
 800628a:	d9f4      	bls.n	8006276 <_printf_i+0x11a>
 800628c:	2b08      	cmp	r3, #8
 800628e:	d10b      	bne.n	80062a8 <_printf_i+0x14c>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	07df      	lsls	r7, r3, #31
 8006294:	d508      	bpl.n	80062a8 <_printf_i+0x14c>
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	6861      	ldr	r1, [r4, #4]
 800629a:	4299      	cmp	r1, r3
 800629c:	bfde      	ittt	le
 800629e:	2330      	movle	r3, #48	; 0x30
 80062a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062a8:	1b92      	subs	r2, r2, r6
 80062aa:	6122      	str	r2, [r4, #16]
 80062ac:	f8cd a000 	str.w	sl, [sp]
 80062b0:	464b      	mov	r3, r9
 80062b2:	aa03      	add	r2, sp, #12
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff fee2 	bl	8006080 <_printf_common>
 80062bc:	3001      	adds	r0, #1
 80062be:	d14c      	bne.n	800635a <_printf_i+0x1fe>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	b004      	add	sp, #16
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	4835      	ldr	r0, [pc, #212]	; (80063a0 <_printf_i+0x244>)
 80062cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	680e      	ldr	r6, [r1, #0]
 80062d4:	061f      	lsls	r7, r3, #24
 80062d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80062da:	600e      	str	r6, [r1, #0]
 80062dc:	d514      	bpl.n	8006308 <_printf_i+0x1ac>
 80062de:	07d9      	lsls	r1, r3, #31
 80062e0:	bf44      	itt	mi
 80062e2:	f043 0320 	orrmi.w	r3, r3, #32
 80062e6:	6023      	strmi	r3, [r4, #0]
 80062e8:	b91d      	cbnz	r5, 80062f2 <_printf_i+0x196>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	f023 0320 	bic.w	r3, r3, #32
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	2310      	movs	r3, #16
 80062f4:	e7b0      	b.n	8006258 <_printf_i+0xfc>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	f043 0320 	orr.w	r3, r3, #32
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	2378      	movs	r3, #120	; 0x78
 8006300:	4828      	ldr	r0, [pc, #160]	; (80063a4 <_printf_i+0x248>)
 8006302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006306:	e7e3      	b.n	80062d0 <_printf_i+0x174>
 8006308:	065e      	lsls	r6, r3, #25
 800630a:	bf48      	it	mi
 800630c:	b2ad      	uxthmi	r5, r5
 800630e:	e7e6      	b.n	80062de <_printf_i+0x182>
 8006310:	4616      	mov	r6, r2
 8006312:	e7bb      	b.n	800628c <_printf_i+0x130>
 8006314:	680b      	ldr	r3, [r1, #0]
 8006316:	6826      	ldr	r6, [r4, #0]
 8006318:	6960      	ldr	r0, [r4, #20]
 800631a:	1d1d      	adds	r5, r3, #4
 800631c:	600d      	str	r5, [r1, #0]
 800631e:	0635      	lsls	r5, r6, #24
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	d501      	bpl.n	8006328 <_printf_i+0x1cc>
 8006324:	6018      	str	r0, [r3, #0]
 8006326:	e002      	b.n	800632e <_printf_i+0x1d2>
 8006328:	0671      	lsls	r1, r6, #25
 800632a:	d5fb      	bpl.n	8006324 <_printf_i+0x1c8>
 800632c:	8018      	strh	r0, [r3, #0]
 800632e:	2300      	movs	r3, #0
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	4616      	mov	r6, r2
 8006334:	e7ba      	b.n	80062ac <_printf_i+0x150>
 8006336:	680b      	ldr	r3, [r1, #0]
 8006338:	1d1a      	adds	r2, r3, #4
 800633a:	600a      	str	r2, [r1, #0]
 800633c:	681e      	ldr	r6, [r3, #0]
 800633e:	6862      	ldr	r2, [r4, #4]
 8006340:	2100      	movs	r1, #0
 8006342:	4630      	mov	r0, r6
 8006344:	f7f9 ff54 	bl	80001f0 <memchr>
 8006348:	b108      	cbz	r0, 800634e <_printf_i+0x1f2>
 800634a:	1b80      	subs	r0, r0, r6
 800634c:	6060      	str	r0, [r4, #4]
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	2300      	movs	r3, #0
 8006354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006358:	e7a8      	b.n	80062ac <_printf_i+0x150>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	4632      	mov	r2, r6
 800635e:	4649      	mov	r1, r9
 8006360:	4640      	mov	r0, r8
 8006362:	47d0      	blx	sl
 8006364:	3001      	adds	r0, #1
 8006366:	d0ab      	beq.n	80062c0 <_printf_i+0x164>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	079b      	lsls	r3, r3, #30
 800636c:	d413      	bmi.n	8006396 <_printf_i+0x23a>
 800636e:	68e0      	ldr	r0, [r4, #12]
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	4298      	cmp	r0, r3
 8006374:	bfb8      	it	lt
 8006376:	4618      	movlt	r0, r3
 8006378:	e7a4      	b.n	80062c4 <_printf_i+0x168>
 800637a:	2301      	movs	r3, #1
 800637c:	4632      	mov	r2, r6
 800637e:	4649      	mov	r1, r9
 8006380:	4640      	mov	r0, r8
 8006382:	47d0      	blx	sl
 8006384:	3001      	adds	r0, #1
 8006386:	d09b      	beq.n	80062c0 <_printf_i+0x164>
 8006388:	3501      	adds	r5, #1
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	9903      	ldr	r1, [sp, #12]
 800638e:	1a5b      	subs	r3, r3, r1
 8006390:	42ab      	cmp	r3, r5
 8006392:	dcf2      	bgt.n	800637a <_printf_i+0x21e>
 8006394:	e7eb      	b.n	800636e <_printf_i+0x212>
 8006396:	2500      	movs	r5, #0
 8006398:	f104 0619 	add.w	r6, r4, #25
 800639c:	e7f5      	b.n	800638a <_printf_i+0x22e>
 800639e:	bf00      	nop
 80063a0:	0800a56e 	.word	0x0800a56e
 80063a4:	0800a57f 	.word	0x0800a57f

080063a8 <_scanf_float>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	b087      	sub	sp, #28
 80063ae:	4617      	mov	r7, r2
 80063b0:	9303      	str	r3, [sp, #12]
 80063b2:	688b      	ldr	r3, [r1, #8]
 80063b4:	1e5a      	subs	r2, r3, #1
 80063b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80063ba:	bf83      	ittte	hi
 80063bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80063c0:	195b      	addhi	r3, r3, r5
 80063c2:	9302      	strhi	r3, [sp, #8]
 80063c4:	2300      	movls	r3, #0
 80063c6:	bf86      	itte	hi
 80063c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80063cc:	608b      	strhi	r3, [r1, #8]
 80063ce:	9302      	strls	r3, [sp, #8]
 80063d0:	680b      	ldr	r3, [r1, #0]
 80063d2:	468b      	mov	fp, r1
 80063d4:	2500      	movs	r5, #0
 80063d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80063da:	f84b 3b1c 	str.w	r3, [fp], #28
 80063de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80063e2:	4680      	mov	r8, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	465e      	mov	r6, fp
 80063e8:	46aa      	mov	sl, r5
 80063ea:	46a9      	mov	r9, r5
 80063ec:	9501      	str	r5, [sp, #4]
 80063ee:	68a2      	ldr	r2, [r4, #8]
 80063f0:	b152      	cbz	r2, 8006408 <_scanf_float+0x60>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b4e      	cmp	r3, #78	; 0x4e
 80063f8:	d864      	bhi.n	80064c4 <_scanf_float+0x11c>
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d83c      	bhi.n	8006478 <_scanf_float+0xd0>
 80063fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006402:	b2c8      	uxtb	r0, r1
 8006404:	280e      	cmp	r0, #14
 8006406:	d93a      	bls.n	800647e <_scanf_float+0xd6>
 8006408:	f1b9 0f00 	cmp.w	r9, #0
 800640c:	d003      	beq.n	8006416 <_scanf_float+0x6e>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800641a:	f1ba 0f01 	cmp.w	sl, #1
 800641e:	f200 8113 	bhi.w	8006648 <_scanf_float+0x2a0>
 8006422:	455e      	cmp	r6, fp
 8006424:	f200 8105 	bhi.w	8006632 <_scanf_float+0x28a>
 8006428:	2501      	movs	r5, #1
 800642a:	4628      	mov	r0, r5
 800642c:	b007      	add	sp, #28
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006436:	2a0d      	cmp	r2, #13
 8006438:	d8e6      	bhi.n	8006408 <_scanf_float+0x60>
 800643a:	a101      	add	r1, pc, #4	; (adr r1, 8006440 <_scanf_float+0x98>)
 800643c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006440:	0800657f 	.word	0x0800657f
 8006444:	08006409 	.word	0x08006409
 8006448:	08006409 	.word	0x08006409
 800644c:	08006409 	.word	0x08006409
 8006450:	080065df 	.word	0x080065df
 8006454:	080065b7 	.word	0x080065b7
 8006458:	08006409 	.word	0x08006409
 800645c:	08006409 	.word	0x08006409
 8006460:	0800658d 	.word	0x0800658d
 8006464:	08006409 	.word	0x08006409
 8006468:	08006409 	.word	0x08006409
 800646c:	08006409 	.word	0x08006409
 8006470:	08006409 	.word	0x08006409
 8006474:	08006545 	.word	0x08006545
 8006478:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800647c:	e7db      	b.n	8006436 <_scanf_float+0x8e>
 800647e:	290e      	cmp	r1, #14
 8006480:	d8c2      	bhi.n	8006408 <_scanf_float+0x60>
 8006482:	a001      	add	r0, pc, #4	; (adr r0, 8006488 <_scanf_float+0xe0>)
 8006484:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006488:	08006537 	.word	0x08006537
 800648c:	08006409 	.word	0x08006409
 8006490:	08006537 	.word	0x08006537
 8006494:	080065cb 	.word	0x080065cb
 8006498:	08006409 	.word	0x08006409
 800649c:	080064e5 	.word	0x080064e5
 80064a0:	08006521 	.word	0x08006521
 80064a4:	08006521 	.word	0x08006521
 80064a8:	08006521 	.word	0x08006521
 80064ac:	08006521 	.word	0x08006521
 80064b0:	08006521 	.word	0x08006521
 80064b4:	08006521 	.word	0x08006521
 80064b8:	08006521 	.word	0x08006521
 80064bc:	08006521 	.word	0x08006521
 80064c0:	08006521 	.word	0x08006521
 80064c4:	2b6e      	cmp	r3, #110	; 0x6e
 80064c6:	d809      	bhi.n	80064dc <_scanf_float+0x134>
 80064c8:	2b60      	cmp	r3, #96	; 0x60
 80064ca:	d8b2      	bhi.n	8006432 <_scanf_float+0x8a>
 80064cc:	2b54      	cmp	r3, #84	; 0x54
 80064ce:	d077      	beq.n	80065c0 <_scanf_float+0x218>
 80064d0:	2b59      	cmp	r3, #89	; 0x59
 80064d2:	d199      	bne.n	8006408 <_scanf_float+0x60>
 80064d4:	2d07      	cmp	r5, #7
 80064d6:	d197      	bne.n	8006408 <_scanf_float+0x60>
 80064d8:	2508      	movs	r5, #8
 80064da:	e029      	b.n	8006530 <_scanf_float+0x188>
 80064dc:	2b74      	cmp	r3, #116	; 0x74
 80064de:	d06f      	beq.n	80065c0 <_scanf_float+0x218>
 80064e0:	2b79      	cmp	r3, #121	; 0x79
 80064e2:	e7f6      	b.n	80064d2 <_scanf_float+0x12a>
 80064e4:	6821      	ldr	r1, [r4, #0]
 80064e6:	05c8      	lsls	r0, r1, #23
 80064e8:	d51a      	bpl.n	8006520 <_scanf_float+0x178>
 80064ea:	9b02      	ldr	r3, [sp, #8]
 80064ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064f0:	6021      	str	r1, [r4, #0]
 80064f2:	f109 0901 	add.w	r9, r9, #1
 80064f6:	b11b      	cbz	r3, 8006500 <_scanf_float+0x158>
 80064f8:	3b01      	subs	r3, #1
 80064fa:	3201      	adds	r2, #1
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	60a2      	str	r2, [r4, #8]
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	60a3      	str	r3, [r4, #8]
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	3301      	adds	r3, #1
 800650a:	6123      	str	r3, [r4, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3b01      	subs	r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	f340 8084 	ble.w	8006620 <_scanf_float+0x278>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	603b      	str	r3, [r7, #0]
 800651e:	e766      	b.n	80063ee <_scanf_float+0x46>
 8006520:	eb1a 0f05 	cmn.w	sl, r5
 8006524:	f47f af70 	bne.w	8006408 <_scanf_float+0x60>
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800652e:	6022      	str	r2, [r4, #0]
 8006530:	f806 3b01 	strb.w	r3, [r6], #1
 8006534:	e7e4      	b.n	8006500 <_scanf_float+0x158>
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	0610      	lsls	r0, r2, #24
 800653a:	f57f af65 	bpl.w	8006408 <_scanf_float+0x60>
 800653e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006542:	e7f4      	b.n	800652e <_scanf_float+0x186>
 8006544:	f1ba 0f00 	cmp.w	sl, #0
 8006548:	d10e      	bne.n	8006568 <_scanf_float+0x1c0>
 800654a:	f1b9 0f00 	cmp.w	r9, #0
 800654e:	d10e      	bne.n	800656e <_scanf_float+0x1c6>
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006556:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800655a:	d108      	bne.n	800656e <_scanf_float+0x1c6>
 800655c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006560:	6022      	str	r2, [r4, #0]
 8006562:	f04f 0a01 	mov.w	sl, #1
 8006566:	e7e3      	b.n	8006530 <_scanf_float+0x188>
 8006568:	f1ba 0f02 	cmp.w	sl, #2
 800656c:	d055      	beq.n	800661a <_scanf_float+0x272>
 800656e:	2d01      	cmp	r5, #1
 8006570:	d002      	beq.n	8006578 <_scanf_float+0x1d0>
 8006572:	2d04      	cmp	r5, #4
 8006574:	f47f af48 	bne.w	8006408 <_scanf_float+0x60>
 8006578:	3501      	adds	r5, #1
 800657a:	b2ed      	uxtb	r5, r5
 800657c:	e7d8      	b.n	8006530 <_scanf_float+0x188>
 800657e:	f1ba 0f01 	cmp.w	sl, #1
 8006582:	f47f af41 	bne.w	8006408 <_scanf_float+0x60>
 8006586:	f04f 0a02 	mov.w	sl, #2
 800658a:	e7d1      	b.n	8006530 <_scanf_float+0x188>
 800658c:	b97d      	cbnz	r5, 80065ae <_scanf_float+0x206>
 800658e:	f1b9 0f00 	cmp.w	r9, #0
 8006592:	f47f af3c 	bne.w	800640e <_scanf_float+0x66>
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800659c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065a0:	f47f af39 	bne.w	8006416 <_scanf_float+0x6e>
 80065a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	2501      	movs	r5, #1
 80065ac:	e7c0      	b.n	8006530 <_scanf_float+0x188>
 80065ae:	2d03      	cmp	r5, #3
 80065b0:	d0e2      	beq.n	8006578 <_scanf_float+0x1d0>
 80065b2:	2d05      	cmp	r5, #5
 80065b4:	e7de      	b.n	8006574 <_scanf_float+0x1cc>
 80065b6:	2d02      	cmp	r5, #2
 80065b8:	f47f af26 	bne.w	8006408 <_scanf_float+0x60>
 80065bc:	2503      	movs	r5, #3
 80065be:	e7b7      	b.n	8006530 <_scanf_float+0x188>
 80065c0:	2d06      	cmp	r5, #6
 80065c2:	f47f af21 	bne.w	8006408 <_scanf_float+0x60>
 80065c6:	2507      	movs	r5, #7
 80065c8:	e7b2      	b.n	8006530 <_scanf_float+0x188>
 80065ca:	6822      	ldr	r2, [r4, #0]
 80065cc:	0591      	lsls	r1, r2, #22
 80065ce:	f57f af1b 	bpl.w	8006408 <_scanf_float+0x60>
 80065d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80065d6:	6022      	str	r2, [r4, #0]
 80065d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80065dc:	e7a8      	b.n	8006530 <_scanf_float+0x188>
 80065de:	6822      	ldr	r2, [r4, #0]
 80065e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80065e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80065e8:	d006      	beq.n	80065f8 <_scanf_float+0x250>
 80065ea:	0550      	lsls	r0, r2, #21
 80065ec:	f57f af0c 	bpl.w	8006408 <_scanf_float+0x60>
 80065f0:	f1b9 0f00 	cmp.w	r9, #0
 80065f4:	f43f af0f 	beq.w	8006416 <_scanf_float+0x6e>
 80065f8:	0591      	lsls	r1, r2, #22
 80065fa:	bf58      	it	pl
 80065fc:	9901      	ldrpl	r1, [sp, #4]
 80065fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006602:	bf58      	it	pl
 8006604:	eba9 0101 	subpl.w	r1, r9, r1
 8006608:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800660c:	bf58      	it	pl
 800660e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006612:	6022      	str	r2, [r4, #0]
 8006614:	f04f 0900 	mov.w	r9, #0
 8006618:	e78a      	b.n	8006530 <_scanf_float+0x188>
 800661a:	f04f 0a03 	mov.w	sl, #3
 800661e:	e787      	b.n	8006530 <_scanf_float+0x188>
 8006620:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006624:	4639      	mov	r1, r7
 8006626:	4640      	mov	r0, r8
 8006628:	4798      	blx	r3
 800662a:	2800      	cmp	r0, #0
 800662c:	f43f aedf 	beq.w	80063ee <_scanf_float+0x46>
 8006630:	e6ea      	b.n	8006408 <_scanf_float+0x60>
 8006632:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006636:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800663a:	463a      	mov	r2, r7
 800663c:	4640      	mov	r0, r8
 800663e:	4798      	blx	r3
 8006640:	6923      	ldr	r3, [r4, #16]
 8006642:	3b01      	subs	r3, #1
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	e6ec      	b.n	8006422 <_scanf_float+0x7a>
 8006648:	1e6b      	subs	r3, r5, #1
 800664a:	2b06      	cmp	r3, #6
 800664c:	d825      	bhi.n	800669a <_scanf_float+0x2f2>
 800664e:	2d02      	cmp	r5, #2
 8006650:	d836      	bhi.n	80066c0 <_scanf_float+0x318>
 8006652:	455e      	cmp	r6, fp
 8006654:	f67f aee8 	bls.w	8006428 <_scanf_float+0x80>
 8006658:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800665c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006660:	463a      	mov	r2, r7
 8006662:	4640      	mov	r0, r8
 8006664:	4798      	blx	r3
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	3b01      	subs	r3, #1
 800666a:	6123      	str	r3, [r4, #16]
 800666c:	e7f1      	b.n	8006652 <_scanf_float+0x2aa>
 800666e:	9802      	ldr	r0, [sp, #8]
 8006670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006674:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006678:	9002      	str	r0, [sp, #8]
 800667a:	463a      	mov	r2, r7
 800667c:	4640      	mov	r0, r8
 800667e:	4798      	blx	r3
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	3b01      	subs	r3, #1
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800668a:	fa5f fa8a 	uxtb.w	sl, sl
 800668e:	f1ba 0f02 	cmp.w	sl, #2
 8006692:	d1ec      	bne.n	800666e <_scanf_float+0x2c6>
 8006694:	3d03      	subs	r5, #3
 8006696:	b2ed      	uxtb	r5, r5
 8006698:	1b76      	subs	r6, r6, r5
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	05da      	lsls	r2, r3, #23
 800669e:	d52f      	bpl.n	8006700 <_scanf_float+0x358>
 80066a0:	055b      	lsls	r3, r3, #21
 80066a2:	d510      	bpl.n	80066c6 <_scanf_float+0x31e>
 80066a4:	455e      	cmp	r6, fp
 80066a6:	f67f aebf 	bls.w	8006428 <_scanf_float+0x80>
 80066aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066b2:	463a      	mov	r2, r7
 80066b4:	4640      	mov	r0, r8
 80066b6:	4798      	blx	r3
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	e7f1      	b.n	80066a4 <_scanf_float+0x2fc>
 80066c0:	46aa      	mov	sl, r5
 80066c2:	9602      	str	r6, [sp, #8]
 80066c4:	e7df      	b.n	8006686 <_scanf_float+0x2de>
 80066c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	2965      	cmp	r1, #101	; 0x65
 80066ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80066d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80066d6:	6123      	str	r3, [r4, #16]
 80066d8:	d00c      	beq.n	80066f4 <_scanf_float+0x34c>
 80066da:	2945      	cmp	r1, #69	; 0x45
 80066dc:	d00a      	beq.n	80066f4 <_scanf_float+0x34c>
 80066de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066e2:	463a      	mov	r2, r7
 80066e4:	4640      	mov	r0, r8
 80066e6:	4798      	blx	r3
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	1eb5      	subs	r5, r6, #2
 80066f2:	6123      	str	r3, [r4, #16]
 80066f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066f8:	463a      	mov	r2, r7
 80066fa:	4640      	mov	r0, r8
 80066fc:	4798      	blx	r3
 80066fe:	462e      	mov	r6, r5
 8006700:	6825      	ldr	r5, [r4, #0]
 8006702:	f015 0510 	ands.w	r5, r5, #16
 8006706:	d158      	bne.n	80067ba <_scanf_float+0x412>
 8006708:	7035      	strb	r5, [r6, #0]
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006714:	d11c      	bne.n	8006750 <_scanf_float+0x3a8>
 8006716:	9b01      	ldr	r3, [sp, #4]
 8006718:	454b      	cmp	r3, r9
 800671a:	eba3 0209 	sub.w	r2, r3, r9
 800671e:	d124      	bne.n	800676a <_scanf_float+0x3c2>
 8006720:	2200      	movs	r2, #0
 8006722:	4659      	mov	r1, fp
 8006724:	4640      	mov	r0, r8
 8006726:	f000 fe9d 	bl	8007464 <_strtod_r>
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	6821      	ldr	r1, [r4, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f011 0f02 	tst.w	r1, #2
 8006734:	ec57 6b10 	vmov	r6, r7, d0
 8006738:	f103 0204 	add.w	r2, r3, #4
 800673c:	d020      	beq.n	8006780 <_scanf_float+0x3d8>
 800673e:	9903      	ldr	r1, [sp, #12]
 8006740:	600a      	str	r2, [r1, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	e9c3 6700 	strd	r6, r7, [r3]
 8006748:	68e3      	ldr	r3, [r4, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60e3      	str	r3, [r4, #12]
 800674e:	e66c      	b.n	800642a <_scanf_float+0x82>
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0e4      	beq.n	8006720 <_scanf_float+0x378>
 8006756:	9905      	ldr	r1, [sp, #20]
 8006758:	230a      	movs	r3, #10
 800675a:	462a      	mov	r2, r5
 800675c:	3101      	adds	r1, #1
 800675e:	4640      	mov	r0, r8
 8006760:	f000 ff0a 	bl	8007578 <_strtol_r>
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	9e05      	ldr	r6, [sp, #20]
 8006768:	1ac2      	subs	r2, r0, r3
 800676a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800676e:	429e      	cmp	r6, r3
 8006770:	bf28      	it	cs
 8006772:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006776:	4912      	ldr	r1, [pc, #72]	; (80067c0 <_scanf_float+0x418>)
 8006778:	4630      	mov	r0, r6
 800677a:	f000 f82b 	bl	80067d4 <siprintf>
 800677e:	e7cf      	b.n	8006720 <_scanf_float+0x378>
 8006780:	f011 0f04 	tst.w	r1, #4
 8006784:	9903      	ldr	r1, [sp, #12]
 8006786:	600a      	str	r2, [r1, #0]
 8006788:	d1db      	bne.n	8006742 <_scanf_float+0x39a>
 800678a:	f8d3 8000 	ldr.w	r8, [r3]
 800678e:	ee10 2a10 	vmov	r2, s0
 8006792:	ee10 0a10 	vmov	r0, s0
 8006796:	463b      	mov	r3, r7
 8006798:	4639      	mov	r1, r7
 800679a:	f7fa f9cf 	bl	8000b3c <__aeabi_dcmpun>
 800679e:	b128      	cbz	r0, 80067ac <_scanf_float+0x404>
 80067a0:	4808      	ldr	r0, [pc, #32]	; (80067c4 <_scanf_float+0x41c>)
 80067a2:	f000 f811 	bl	80067c8 <nanf>
 80067a6:	ed88 0a00 	vstr	s0, [r8]
 80067aa:	e7cd      	b.n	8006748 <_scanf_float+0x3a0>
 80067ac:	4630      	mov	r0, r6
 80067ae:	4639      	mov	r1, r7
 80067b0:	f7fa fa22 	bl	8000bf8 <__aeabi_d2f>
 80067b4:	f8c8 0000 	str.w	r0, [r8]
 80067b8:	e7c6      	b.n	8006748 <_scanf_float+0x3a0>
 80067ba:	2500      	movs	r5, #0
 80067bc:	e635      	b.n	800642a <_scanf_float+0x82>
 80067be:	bf00      	nop
 80067c0:	0800a590 	.word	0x0800a590
 80067c4:	0800a9a8 	.word	0x0800a9a8

080067c8 <nanf>:
 80067c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80067d0 <nanf+0x8>
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	7fc00000 	.word	0x7fc00000

080067d4 <siprintf>:
 80067d4:	b40e      	push	{r1, r2, r3}
 80067d6:	b500      	push	{lr}
 80067d8:	b09c      	sub	sp, #112	; 0x70
 80067da:	ab1d      	add	r3, sp, #116	; 0x74
 80067dc:	9002      	str	r0, [sp, #8]
 80067de:	9006      	str	r0, [sp, #24]
 80067e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067e4:	4809      	ldr	r0, [pc, #36]	; (800680c <siprintf+0x38>)
 80067e6:	9107      	str	r1, [sp, #28]
 80067e8:	9104      	str	r1, [sp, #16]
 80067ea:	4909      	ldr	r1, [pc, #36]	; (8006810 <siprintf+0x3c>)
 80067ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80067f0:	9105      	str	r1, [sp, #20]
 80067f2:	6800      	ldr	r0, [r0, #0]
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	a902      	add	r1, sp, #8
 80067f8:	f002 fea6 	bl	8009548 <_svfiprintf_r>
 80067fc:	9b02      	ldr	r3, [sp, #8]
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	b01c      	add	sp, #112	; 0x70
 8006804:	f85d eb04 	ldr.w	lr, [sp], #4
 8006808:	b003      	add	sp, #12
 800680a:	4770      	bx	lr
 800680c:	20000014 	.word	0x20000014
 8006810:	ffff0208 	.word	0xffff0208

08006814 <sulp>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	4604      	mov	r4, r0
 8006818:	460d      	mov	r5, r1
 800681a:	ec45 4b10 	vmov	d0, r4, r5
 800681e:	4616      	mov	r6, r2
 8006820:	f002 fc2e 	bl	8009080 <__ulp>
 8006824:	ec51 0b10 	vmov	r0, r1, d0
 8006828:	b17e      	cbz	r6, 800684a <sulp+0x36>
 800682a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800682e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006832:	2b00      	cmp	r3, #0
 8006834:	dd09      	ble.n	800684a <sulp+0x36>
 8006836:	051b      	lsls	r3, r3, #20
 8006838:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800683c:	2400      	movs	r4, #0
 800683e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	f7f9 fedf 	bl	8000608 <__aeabi_dmul>
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	0000      	movs	r0, r0
	...

08006850 <_strtod_l>:
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	b0a3      	sub	sp, #140	; 0x8c
 8006856:	461f      	mov	r7, r3
 8006858:	2300      	movs	r3, #0
 800685a:	931e      	str	r3, [sp, #120]	; 0x78
 800685c:	4ba4      	ldr	r3, [pc, #656]	; (8006af0 <_strtod_l+0x2a0>)
 800685e:	9219      	str	r2, [sp, #100]	; 0x64
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	9307      	str	r3, [sp, #28]
 8006864:	4604      	mov	r4, r0
 8006866:	4618      	mov	r0, r3
 8006868:	4688      	mov	r8, r1
 800686a:	f7f9 fcb9 	bl	80001e0 <strlen>
 800686e:	f04f 0a00 	mov.w	sl, #0
 8006872:	4605      	mov	r5, r0
 8006874:	f04f 0b00 	mov.w	fp, #0
 8006878:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800687c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800687e:	781a      	ldrb	r2, [r3, #0]
 8006880:	2a2b      	cmp	r2, #43	; 0x2b
 8006882:	d04c      	beq.n	800691e <_strtod_l+0xce>
 8006884:	d839      	bhi.n	80068fa <_strtod_l+0xaa>
 8006886:	2a0d      	cmp	r2, #13
 8006888:	d832      	bhi.n	80068f0 <_strtod_l+0xa0>
 800688a:	2a08      	cmp	r2, #8
 800688c:	d832      	bhi.n	80068f4 <_strtod_l+0xa4>
 800688e:	2a00      	cmp	r2, #0
 8006890:	d03c      	beq.n	800690c <_strtod_l+0xbc>
 8006892:	2300      	movs	r3, #0
 8006894:	930e      	str	r3, [sp, #56]	; 0x38
 8006896:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006898:	7833      	ldrb	r3, [r6, #0]
 800689a:	2b30      	cmp	r3, #48	; 0x30
 800689c:	f040 80b4 	bne.w	8006a08 <_strtod_l+0x1b8>
 80068a0:	7873      	ldrb	r3, [r6, #1]
 80068a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068a6:	2b58      	cmp	r3, #88	; 0x58
 80068a8:	d16c      	bne.n	8006984 <_strtod_l+0x134>
 80068aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	ab1e      	add	r3, sp, #120	; 0x78
 80068b0:	9702      	str	r7, [sp, #8]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4a8f      	ldr	r2, [pc, #572]	; (8006af4 <_strtod_l+0x2a4>)
 80068b6:	ab1f      	add	r3, sp, #124	; 0x7c
 80068b8:	a91d      	add	r1, sp, #116	; 0x74
 80068ba:	4620      	mov	r0, r4
 80068bc:	f001 fd40 	bl	8008340 <__gethex>
 80068c0:	f010 0707 	ands.w	r7, r0, #7
 80068c4:	4605      	mov	r5, r0
 80068c6:	d005      	beq.n	80068d4 <_strtod_l+0x84>
 80068c8:	2f06      	cmp	r7, #6
 80068ca:	d12a      	bne.n	8006922 <_strtod_l+0xd2>
 80068cc:	3601      	adds	r6, #1
 80068ce:	2300      	movs	r3, #0
 80068d0:	961d      	str	r6, [sp, #116]	; 0x74
 80068d2:	930e      	str	r3, [sp, #56]	; 0x38
 80068d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f040 8596 	bne.w	8007408 <_strtod_l+0xbb8>
 80068dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068de:	b1db      	cbz	r3, 8006918 <_strtod_l+0xc8>
 80068e0:	4652      	mov	r2, sl
 80068e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068e6:	ec43 2b10 	vmov	d0, r2, r3
 80068ea:	b023      	add	sp, #140	; 0x8c
 80068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	2a20      	cmp	r2, #32
 80068f2:	d1ce      	bne.n	8006892 <_strtod_l+0x42>
 80068f4:	3301      	adds	r3, #1
 80068f6:	931d      	str	r3, [sp, #116]	; 0x74
 80068f8:	e7c0      	b.n	800687c <_strtod_l+0x2c>
 80068fa:	2a2d      	cmp	r2, #45	; 0x2d
 80068fc:	d1c9      	bne.n	8006892 <_strtod_l+0x42>
 80068fe:	2201      	movs	r2, #1
 8006900:	920e      	str	r2, [sp, #56]	; 0x38
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	921d      	str	r2, [sp, #116]	; 0x74
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1c4      	bne.n	8006896 <_strtod_l+0x46>
 800690c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800690e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006912:	2b00      	cmp	r3, #0
 8006914:	f040 8576 	bne.w	8007404 <_strtod_l+0xbb4>
 8006918:	4652      	mov	r2, sl
 800691a:	465b      	mov	r3, fp
 800691c:	e7e3      	b.n	80068e6 <_strtod_l+0x96>
 800691e:	2200      	movs	r2, #0
 8006920:	e7ee      	b.n	8006900 <_strtod_l+0xb0>
 8006922:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006924:	b13a      	cbz	r2, 8006936 <_strtod_l+0xe6>
 8006926:	2135      	movs	r1, #53	; 0x35
 8006928:	a820      	add	r0, sp, #128	; 0x80
 800692a:	f002 fcb4 	bl	8009296 <__copybits>
 800692e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006930:	4620      	mov	r0, r4
 8006932:	f002 f879 	bl	8008a28 <_Bfree>
 8006936:	3f01      	subs	r7, #1
 8006938:	2f05      	cmp	r7, #5
 800693a:	d807      	bhi.n	800694c <_strtod_l+0xfc>
 800693c:	e8df f007 	tbb	[pc, r7]
 8006940:	1d180b0e 	.word	0x1d180b0e
 8006944:	030e      	.short	0x030e
 8006946:	f04f 0b00 	mov.w	fp, #0
 800694a:	46da      	mov	sl, fp
 800694c:	0728      	lsls	r0, r5, #28
 800694e:	d5c1      	bpl.n	80068d4 <_strtod_l+0x84>
 8006950:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006954:	e7be      	b.n	80068d4 <_strtod_l+0x84>
 8006956:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800695a:	e7f7      	b.n	800694c <_strtod_l+0xfc>
 800695c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006960:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006962:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006966:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800696a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800696e:	e7ed      	b.n	800694c <_strtod_l+0xfc>
 8006970:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006af8 <_strtod_l+0x2a8>
 8006974:	f04f 0a00 	mov.w	sl, #0
 8006978:	e7e8      	b.n	800694c <_strtod_l+0xfc>
 800697a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800697e:	f04f 3aff 	mov.w	sl, #4294967295
 8006982:	e7e3      	b.n	800694c <_strtod_l+0xfc>
 8006984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	921d      	str	r2, [sp, #116]	; 0x74
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b30      	cmp	r3, #48	; 0x30
 800698e:	d0f9      	beq.n	8006984 <_strtod_l+0x134>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d09f      	beq.n	80068d4 <_strtod_l+0x84>
 8006994:	2301      	movs	r3, #1
 8006996:	f04f 0900 	mov.w	r9, #0
 800699a:	9304      	str	r3, [sp, #16]
 800699c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800699e:	930a      	str	r3, [sp, #40]	; 0x28
 80069a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80069a4:	464f      	mov	r7, r9
 80069a6:	220a      	movs	r2, #10
 80069a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80069aa:	7806      	ldrb	r6, [r0, #0]
 80069ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80069b0:	b2d9      	uxtb	r1, r3
 80069b2:	2909      	cmp	r1, #9
 80069b4:	d92a      	bls.n	8006a0c <_strtod_l+0x1bc>
 80069b6:	9907      	ldr	r1, [sp, #28]
 80069b8:	462a      	mov	r2, r5
 80069ba:	f002 fedd 	bl	8009778 <strncmp>
 80069be:	b398      	cbz	r0, 8006a28 <_strtod_l+0x1d8>
 80069c0:	2000      	movs	r0, #0
 80069c2:	4633      	mov	r3, r6
 80069c4:	463d      	mov	r5, r7
 80069c6:	9007      	str	r0, [sp, #28]
 80069c8:	4602      	mov	r2, r0
 80069ca:	2b65      	cmp	r3, #101	; 0x65
 80069cc:	d001      	beq.n	80069d2 <_strtod_l+0x182>
 80069ce:	2b45      	cmp	r3, #69	; 0x45
 80069d0:	d118      	bne.n	8006a04 <_strtod_l+0x1b4>
 80069d2:	b91d      	cbnz	r5, 80069dc <_strtod_l+0x18c>
 80069d4:	9b04      	ldr	r3, [sp, #16]
 80069d6:	4303      	orrs	r3, r0
 80069d8:	d098      	beq.n	800690c <_strtod_l+0xbc>
 80069da:	2500      	movs	r5, #0
 80069dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80069e0:	f108 0301 	add.w	r3, r8, #1
 80069e4:	931d      	str	r3, [sp, #116]	; 0x74
 80069e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80069ea:	2b2b      	cmp	r3, #43	; 0x2b
 80069ec:	d075      	beq.n	8006ada <_strtod_l+0x28a>
 80069ee:	2b2d      	cmp	r3, #45	; 0x2d
 80069f0:	d07b      	beq.n	8006aea <_strtod_l+0x29a>
 80069f2:	f04f 0c00 	mov.w	ip, #0
 80069f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80069fa:	2909      	cmp	r1, #9
 80069fc:	f240 8082 	bls.w	8006b04 <_strtod_l+0x2b4>
 8006a00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a04:	2600      	movs	r6, #0
 8006a06:	e09d      	b.n	8006b44 <_strtod_l+0x2f4>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e7c4      	b.n	8006996 <_strtod_l+0x146>
 8006a0c:	2f08      	cmp	r7, #8
 8006a0e:	bfd8      	it	le
 8006a10:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006a12:	f100 0001 	add.w	r0, r0, #1
 8006a16:	bfda      	itte	le
 8006a18:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a1c:	9309      	strle	r3, [sp, #36]	; 0x24
 8006a1e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006a22:	3701      	adds	r7, #1
 8006a24:	901d      	str	r0, [sp, #116]	; 0x74
 8006a26:	e7bf      	b.n	80069a8 <_strtod_l+0x158>
 8006a28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a2a:	195a      	adds	r2, r3, r5
 8006a2c:	921d      	str	r2, [sp, #116]	; 0x74
 8006a2e:	5d5b      	ldrb	r3, [r3, r5]
 8006a30:	2f00      	cmp	r7, #0
 8006a32:	d037      	beq.n	8006aa4 <_strtod_l+0x254>
 8006a34:	9007      	str	r0, [sp, #28]
 8006a36:	463d      	mov	r5, r7
 8006a38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006a3c:	2a09      	cmp	r2, #9
 8006a3e:	d912      	bls.n	8006a66 <_strtod_l+0x216>
 8006a40:	2201      	movs	r2, #1
 8006a42:	e7c2      	b.n	80069ca <_strtod_l+0x17a>
 8006a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	921d      	str	r2, [sp, #116]	; 0x74
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	2b30      	cmp	r3, #48	; 0x30
 8006a50:	d0f8      	beq.n	8006a44 <_strtod_l+0x1f4>
 8006a52:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006a56:	2a08      	cmp	r2, #8
 8006a58:	f200 84db 	bhi.w	8007412 <_strtod_l+0xbc2>
 8006a5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006a5e:	9007      	str	r0, [sp, #28]
 8006a60:	2000      	movs	r0, #0
 8006a62:	920a      	str	r2, [sp, #40]	; 0x28
 8006a64:	4605      	mov	r5, r0
 8006a66:	3b30      	subs	r3, #48	; 0x30
 8006a68:	f100 0201 	add.w	r2, r0, #1
 8006a6c:	d014      	beq.n	8006a98 <_strtod_l+0x248>
 8006a6e:	9907      	ldr	r1, [sp, #28]
 8006a70:	4411      	add	r1, r2
 8006a72:	9107      	str	r1, [sp, #28]
 8006a74:	462a      	mov	r2, r5
 8006a76:	eb00 0e05 	add.w	lr, r0, r5
 8006a7a:	210a      	movs	r1, #10
 8006a7c:	4572      	cmp	r2, lr
 8006a7e:	d113      	bne.n	8006aa8 <_strtod_l+0x258>
 8006a80:	182a      	adds	r2, r5, r0
 8006a82:	2a08      	cmp	r2, #8
 8006a84:	f105 0501 	add.w	r5, r5, #1
 8006a88:	4405      	add	r5, r0
 8006a8a:	dc1c      	bgt.n	8006ac6 <_strtod_l+0x276>
 8006a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a8e:	220a      	movs	r2, #10
 8006a90:	fb02 3301 	mla	r3, r2, r1, r3
 8006a94:	9309      	str	r3, [sp, #36]	; 0x24
 8006a96:	2200      	movs	r2, #0
 8006a98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	911d      	str	r1, [sp, #116]	; 0x74
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	e7c9      	b.n	8006a38 <_strtod_l+0x1e8>
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	e7d2      	b.n	8006a4e <_strtod_l+0x1fe>
 8006aa8:	2a08      	cmp	r2, #8
 8006aaa:	dc04      	bgt.n	8006ab6 <_strtod_l+0x266>
 8006aac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006aae:	434e      	muls	r6, r1
 8006ab0:	9609      	str	r6, [sp, #36]	; 0x24
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	e7e2      	b.n	8006a7c <_strtod_l+0x22c>
 8006ab6:	f102 0c01 	add.w	ip, r2, #1
 8006aba:	f1bc 0f10 	cmp.w	ip, #16
 8006abe:	bfd8      	it	le
 8006ac0:	fb01 f909 	mulle.w	r9, r1, r9
 8006ac4:	e7f5      	b.n	8006ab2 <_strtod_l+0x262>
 8006ac6:	2d10      	cmp	r5, #16
 8006ac8:	bfdc      	itt	le
 8006aca:	220a      	movle	r2, #10
 8006acc:	fb02 3909 	mlale	r9, r2, r9, r3
 8006ad0:	e7e1      	b.n	8006a96 <_strtod_l+0x246>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9307      	str	r3, [sp, #28]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	e77c      	b.n	80069d4 <_strtod_l+0x184>
 8006ada:	f04f 0c00 	mov.w	ip, #0
 8006ade:	f108 0302 	add.w	r3, r8, #2
 8006ae2:	931d      	str	r3, [sp, #116]	; 0x74
 8006ae4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006ae8:	e785      	b.n	80069f6 <_strtod_l+0x1a6>
 8006aea:	f04f 0c01 	mov.w	ip, #1
 8006aee:	e7f6      	b.n	8006ade <_strtod_l+0x28e>
 8006af0:	0800a7e8 	.word	0x0800a7e8
 8006af4:	0800a598 	.word	0x0800a598
 8006af8:	7ff00000 	.word	0x7ff00000
 8006afc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	911d      	str	r1, [sp, #116]	; 0x74
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	2b30      	cmp	r3, #48	; 0x30
 8006b06:	d0f9      	beq.n	8006afc <_strtod_l+0x2ac>
 8006b08:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006b0c:	2908      	cmp	r1, #8
 8006b0e:	f63f af79 	bhi.w	8006a04 <_strtod_l+0x1b4>
 8006b12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006b16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b18:	9308      	str	r3, [sp, #32]
 8006b1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b1c:	1c59      	adds	r1, r3, #1
 8006b1e:	911d      	str	r1, [sp, #116]	; 0x74
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006b26:	2e09      	cmp	r6, #9
 8006b28:	d937      	bls.n	8006b9a <_strtod_l+0x34a>
 8006b2a:	9e08      	ldr	r6, [sp, #32]
 8006b2c:	1b89      	subs	r1, r1, r6
 8006b2e:	2908      	cmp	r1, #8
 8006b30:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006b34:	dc02      	bgt.n	8006b3c <_strtod_l+0x2ec>
 8006b36:	4576      	cmp	r6, lr
 8006b38:	bfa8      	it	ge
 8006b3a:	4676      	movge	r6, lr
 8006b3c:	f1bc 0f00 	cmp.w	ip, #0
 8006b40:	d000      	beq.n	8006b44 <_strtod_l+0x2f4>
 8006b42:	4276      	negs	r6, r6
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	d14f      	bne.n	8006be8 <_strtod_l+0x398>
 8006b48:	9904      	ldr	r1, [sp, #16]
 8006b4a:	4301      	orrs	r1, r0
 8006b4c:	f47f aec2 	bne.w	80068d4 <_strtod_l+0x84>
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	f47f aedb 	bne.w	800690c <_strtod_l+0xbc>
 8006b56:	2b69      	cmp	r3, #105	; 0x69
 8006b58:	d027      	beq.n	8006baa <_strtod_l+0x35a>
 8006b5a:	dc24      	bgt.n	8006ba6 <_strtod_l+0x356>
 8006b5c:	2b49      	cmp	r3, #73	; 0x49
 8006b5e:	d024      	beq.n	8006baa <_strtod_l+0x35a>
 8006b60:	2b4e      	cmp	r3, #78	; 0x4e
 8006b62:	f47f aed3 	bne.w	800690c <_strtod_l+0xbc>
 8006b66:	499e      	ldr	r1, [pc, #632]	; (8006de0 <_strtod_l+0x590>)
 8006b68:	a81d      	add	r0, sp, #116	; 0x74
 8006b6a:	f001 fe41 	bl	80087f0 <__match>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f43f aecc 	beq.w	800690c <_strtod_l+0xbc>
 8006b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b28      	cmp	r3, #40	; 0x28
 8006b7a:	d12d      	bne.n	8006bd8 <_strtod_l+0x388>
 8006b7c:	4999      	ldr	r1, [pc, #612]	; (8006de4 <_strtod_l+0x594>)
 8006b7e:	aa20      	add	r2, sp, #128	; 0x80
 8006b80:	a81d      	add	r0, sp, #116	; 0x74
 8006b82:	f001 fe49 	bl	8008818 <__hexnan>
 8006b86:	2805      	cmp	r0, #5
 8006b88:	d126      	bne.n	8006bd8 <_strtod_l+0x388>
 8006b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006b90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006b94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006b98:	e69c      	b.n	80068d4 <_strtod_l+0x84>
 8006b9a:	210a      	movs	r1, #10
 8006b9c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006ba0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006ba4:	e7b9      	b.n	8006b1a <_strtod_l+0x2ca>
 8006ba6:	2b6e      	cmp	r3, #110	; 0x6e
 8006ba8:	e7db      	b.n	8006b62 <_strtod_l+0x312>
 8006baa:	498f      	ldr	r1, [pc, #572]	; (8006de8 <_strtod_l+0x598>)
 8006bac:	a81d      	add	r0, sp, #116	; 0x74
 8006bae:	f001 fe1f 	bl	80087f0 <__match>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f43f aeaa 	beq.w	800690c <_strtod_l+0xbc>
 8006bb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bba:	498c      	ldr	r1, [pc, #560]	; (8006dec <_strtod_l+0x59c>)
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	a81d      	add	r0, sp, #116	; 0x74
 8006bc0:	931d      	str	r3, [sp, #116]	; 0x74
 8006bc2:	f001 fe15 	bl	80087f0 <__match>
 8006bc6:	b910      	cbnz	r0, 8006bce <_strtod_l+0x37e>
 8006bc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bca:	3301      	adds	r3, #1
 8006bcc:	931d      	str	r3, [sp, #116]	; 0x74
 8006bce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006dfc <_strtod_l+0x5ac>
 8006bd2:	f04f 0a00 	mov.w	sl, #0
 8006bd6:	e67d      	b.n	80068d4 <_strtod_l+0x84>
 8006bd8:	4885      	ldr	r0, [pc, #532]	; (8006df0 <_strtod_l+0x5a0>)
 8006bda:	f002 fdb5 	bl	8009748 <nan>
 8006bde:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006be2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006be6:	e675      	b.n	80068d4 <_strtod_l+0x84>
 8006be8:	9b07      	ldr	r3, [sp, #28]
 8006bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bec:	1af3      	subs	r3, r6, r3
 8006bee:	2f00      	cmp	r7, #0
 8006bf0:	bf08      	it	eq
 8006bf2:	462f      	moveq	r7, r5
 8006bf4:	2d10      	cmp	r5, #16
 8006bf6:	9308      	str	r3, [sp, #32]
 8006bf8:	46a8      	mov	r8, r5
 8006bfa:	bfa8      	it	ge
 8006bfc:	f04f 0810 	movge.w	r8, #16
 8006c00:	f7f9 fc88 	bl	8000514 <__aeabi_ui2d>
 8006c04:	2d09      	cmp	r5, #9
 8006c06:	4682      	mov	sl, r0
 8006c08:	468b      	mov	fp, r1
 8006c0a:	dd13      	ble.n	8006c34 <_strtod_l+0x3e4>
 8006c0c:	4b79      	ldr	r3, [pc, #484]	; (8006df4 <_strtod_l+0x5a4>)
 8006c0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c16:	f7f9 fcf7 	bl	8000608 <__aeabi_dmul>
 8006c1a:	4682      	mov	sl, r0
 8006c1c:	4648      	mov	r0, r9
 8006c1e:	468b      	mov	fp, r1
 8006c20:	f7f9 fc78 	bl	8000514 <__aeabi_ui2d>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4650      	mov	r0, sl
 8006c2a:	4659      	mov	r1, fp
 8006c2c:	f7f9 fb36 	bl	800029c <__adddf3>
 8006c30:	4682      	mov	sl, r0
 8006c32:	468b      	mov	fp, r1
 8006c34:	2d0f      	cmp	r5, #15
 8006c36:	dc38      	bgt.n	8006caa <_strtod_l+0x45a>
 8006c38:	9b08      	ldr	r3, [sp, #32]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f43f ae4a 	beq.w	80068d4 <_strtod_l+0x84>
 8006c40:	dd24      	ble.n	8006c8c <_strtod_l+0x43c>
 8006c42:	2b16      	cmp	r3, #22
 8006c44:	dc0b      	bgt.n	8006c5e <_strtod_l+0x40e>
 8006c46:	4d6b      	ldr	r5, [pc, #428]	; (8006df4 <_strtod_l+0x5a4>)
 8006c48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006c4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006c50:	4652      	mov	r2, sl
 8006c52:	465b      	mov	r3, fp
 8006c54:	f7f9 fcd8 	bl	8000608 <__aeabi_dmul>
 8006c58:	4682      	mov	sl, r0
 8006c5a:	468b      	mov	fp, r1
 8006c5c:	e63a      	b.n	80068d4 <_strtod_l+0x84>
 8006c5e:	9a08      	ldr	r2, [sp, #32]
 8006c60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006c64:	4293      	cmp	r3, r2
 8006c66:	db20      	blt.n	8006caa <_strtod_l+0x45a>
 8006c68:	4c62      	ldr	r4, [pc, #392]	; (8006df4 <_strtod_l+0x5a4>)
 8006c6a:	f1c5 050f 	rsb	r5, r5, #15
 8006c6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c72:	4652      	mov	r2, sl
 8006c74:	465b      	mov	r3, fp
 8006c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c7a:	f7f9 fcc5 	bl	8000608 <__aeabi_dmul>
 8006c7e:	9b08      	ldr	r3, [sp, #32]
 8006c80:	1b5d      	subs	r5, r3, r5
 8006c82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c8a:	e7e3      	b.n	8006c54 <_strtod_l+0x404>
 8006c8c:	9b08      	ldr	r3, [sp, #32]
 8006c8e:	3316      	adds	r3, #22
 8006c90:	db0b      	blt.n	8006caa <_strtod_l+0x45a>
 8006c92:	9b07      	ldr	r3, [sp, #28]
 8006c94:	4a57      	ldr	r2, [pc, #348]	; (8006df4 <_strtod_l+0x5a4>)
 8006c96:	1b9e      	subs	r6, r3, r6
 8006c98:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006c9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ca0:	4650      	mov	r0, sl
 8006ca2:	4659      	mov	r1, fp
 8006ca4:	f7f9 fdda 	bl	800085c <__aeabi_ddiv>
 8006ca8:	e7d6      	b.n	8006c58 <_strtod_l+0x408>
 8006caa:	9b08      	ldr	r3, [sp, #32]
 8006cac:	eba5 0808 	sub.w	r8, r5, r8
 8006cb0:	4498      	add	r8, r3
 8006cb2:	f1b8 0f00 	cmp.w	r8, #0
 8006cb6:	dd71      	ble.n	8006d9c <_strtod_l+0x54c>
 8006cb8:	f018 030f 	ands.w	r3, r8, #15
 8006cbc:	d00a      	beq.n	8006cd4 <_strtod_l+0x484>
 8006cbe:	494d      	ldr	r1, [pc, #308]	; (8006df4 <_strtod_l+0x5a4>)
 8006cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	465b      	mov	r3, fp
 8006cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ccc:	f7f9 fc9c 	bl	8000608 <__aeabi_dmul>
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	468b      	mov	fp, r1
 8006cd4:	f038 080f 	bics.w	r8, r8, #15
 8006cd8:	d04d      	beq.n	8006d76 <_strtod_l+0x526>
 8006cda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006cde:	dd22      	ble.n	8006d26 <_strtod_l+0x4d6>
 8006ce0:	2500      	movs	r5, #0
 8006ce2:	462e      	mov	r6, r5
 8006ce4:	9509      	str	r5, [sp, #36]	; 0x24
 8006ce6:	9507      	str	r5, [sp, #28]
 8006ce8:	2322      	movs	r3, #34	; 0x22
 8006cea:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006dfc <_strtod_l+0x5ac>
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	f04f 0a00 	mov.w	sl, #0
 8006cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f43f adec 	beq.w	80068d4 <_strtod_l+0x84>
 8006cfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f001 fe92 	bl	8008a28 <_Bfree>
 8006d04:	9907      	ldr	r1, [sp, #28]
 8006d06:	4620      	mov	r0, r4
 8006d08:	f001 fe8e 	bl	8008a28 <_Bfree>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f001 fe8a 	bl	8008a28 <_Bfree>
 8006d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d16:	4620      	mov	r0, r4
 8006d18:	f001 fe86 	bl	8008a28 <_Bfree>
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f001 fe82 	bl	8008a28 <_Bfree>
 8006d24:	e5d6      	b.n	80068d4 <_strtod_l+0x84>
 8006d26:	2300      	movs	r3, #0
 8006d28:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	4659      	mov	r1, fp
 8006d30:	4699      	mov	r9, r3
 8006d32:	f1b8 0f01 	cmp.w	r8, #1
 8006d36:	dc21      	bgt.n	8006d7c <_strtod_l+0x52c>
 8006d38:	b10b      	cbz	r3, 8006d3e <_strtod_l+0x4ee>
 8006d3a:	4682      	mov	sl, r0
 8006d3c:	468b      	mov	fp, r1
 8006d3e:	4b2e      	ldr	r3, [pc, #184]	; (8006df8 <_strtod_l+0x5a8>)
 8006d40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006d44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006d48:	4652      	mov	r2, sl
 8006d4a:	465b      	mov	r3, fp
 8006d4c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006d50:	f7f9 fc5a 	bl	8000608 <__aeabi_dmul>
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <_strtod_l+0x5ac>)
 8006d56:	460a      	mov	r2, r1
 8006d58:	400b      	ands	r3, r1
 8006d5a:	4929      	ldr	r1, [pc, #164]	; (8006e00 <_strtod_l+0x5b0>)
 8006d5c:	428b      	cmp	r3, r1
 8006d5e:	4682      	mov	sl, r0
 8006d60:	d8be      	bhi.n	8006ce0 <_strtod_l+0x490>
 8006d62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006d66:	428b      	cmp	r3, r1
 8006d68:	bf86      	itte	hi
 8006d6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006e04 <_strtod_l+0x5b4>
 8006d6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006d76:	2300      	movs	r3, #0
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	e081      	b.n	8006e80 <_strtod_l+0x630>
 8006d7c:	f018 0f01 	tst.w	r8, #1
 8006d80:	d007      	beq.n	8006d92 <_strtod_l+0x542>
 8006d82:	4b1d      	ldr	r3, [pc, #116]	; (8006df8 <_strtod_l+0x5a8>)
 8006d84:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fc3c 	bl	8000608 <__aeabi_dmul>
 8006d90:	2301      	movs	r3, #1
 8006d92:	f109 0901 	add.w	r9, r9, #1
 8006d96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d9a:	e7ca      	b.n	8006d32 <_strtod_l+0x4e2>
 8006d9c:	d0eb      	beq.n	8006d76 <_strtod_l+0x526>
 8006d9e:	f1c8 0800 	rsb	r8, r8, #0
 8006da2:	f018 020f 	ands.w	r2, r8, #15
 8006da6:	d00a      	beq.n	8006dbe <_strtod_l+0x56e>
 8006da8:	4b12      	ldr	r3, [pc, #72]	; (8006df4 <_strtod_l+0x5a4>)
 8006daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dae:	4650      	mov	r0, sl
 8006db0:	4659      	mov	r1, fp
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f7f9 fd51 	bl	800085c <__aeabi_ddiv>
 8006dba:	4682      	mov	sl, r0
 8006dbc:	468b      	mov	fp, r1
 8006dbe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006dc2:	d0d8      	beq.n	8006d76 <_strtod_l+0x526>
 8006dc4:	f1b8 0f1f 	cmp.w	r8, #31
 8006dc8:	dd1e      	ble.n	8006e08 <_strtod_l+0x5b8>
 8006dca:	2500      	movs	r5, #0
 8006dcc:	462e      	mov	r6, r5
 8006dce:	9509      	str	r5, [sp, #36]	; 0x24
 8006dd0:	9507      	str	r5, [sp, #28]
 8006dd2:	2322      	movs	r3, #34	; 0x22
 8006dd4:	f04f 0a00 	mov.w	sl, #0
 8006dd8:	f04f 0b00 	mov.w	fp, #0
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	e789      	b.n	8006cf4 <_strtod_l+0x4a4>
 8006de0:	0800a569 	.word	0x0800a569
 8006de4:	0800a5ac 	.word	0x0800a5ac
 8006de8:	0800a561 	.word	0x0800a561
 8006dec:	0800a6ec 	.word	0x0800a6ec
 8006df0:	0800a9a8 	.word	0x0800a9a8
 8006df4:	0800a888 	.word	0x0800a888
 8006df8:	0800a860 	.word	0x0800a860
 8006dfc:	7ff00000 	.word	0x7ff00000
 8006e00:	7ca00000 	.word	0x7ca00000
 8006e04:	7fefffff 	.word	0x7fefffff
 8006e08:	f018 0310 	ands.w	r3, r8, #16
 8006e0c:	bf18      	it	ne
 8006e0e:	236a      	movne	r3, #106	; 0x6a
 8006e10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80071c8 <_strtod_l+0x978>
 8006e14:	9304      	str	r3, [sp, #16]
 8006e16:	4650      	mov	r0, sl
 8006e18:	4659      	mov	r1, fp
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f018 0f01 	tst.w	r8, #1
 8006e20:	d004      	beq.n	8006e2c <_strtod_l+0x5dc>
 8006e22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e26:	f7f9 fbef 	bl	8000608 <__aeabi_dmul>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006e30:	f109 0908 	add.w	r9, r9, #8
 8006e34:	d1f2      	bne.n	8006e1c <_strtod_l+0x5cc>
 8006e36:	b10b      	cbz	r3, 8006e3c <_strtod_l+0x5ec>
 8006e38:	4682      	mov	sl, r0
 8006e3a:	468b      	mov	fp, r1
 8006e3c:	9b04      	ldr	r3, [sp, #16]
 8006e3e:	b1bb      	cbz	r3, 8006e70 <_strtod_l+0x620>
 8006e40:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006e44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	dd10      	ble.n	8006e70 <_strtod_l+0x620>
 8006e4e:	2b1f      	cmp	r3, #31
 8006e50:	f340 8128 	ble.w	80070a4 <_strtod_l+0x854>
 8006e54:	2b34      	cmp	r3, #52	; 0x34
 8006e56:	bfde      	ittt	le
 8006e58:	3b20      	suble	r3, #32
 8006e5a:	f04f 32ff 	movle.w	r2, #4294967295
 8006e5e:	fa02 f303 	lslle.w	r3, r2, r3
 8006e62:	f04f 0a00 	mov.w	sl, #0
 8006e66:	bfcc      	ite	gt
 8006e68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006e6c:	ea03 0b01 	andle.w	fp, r3, r1
 8006e70:	2200      	movs	r2, #0
 8006e72:	2300      	movs	r3, #0
 8006e74:	4650      	mov	r0, sl
 8006e76:	4659      	mov	r1, fp
 8006e78:	f7f9 fe2e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1a4      	bne.n	8006dca <_strtod_l+0x57a>
 8006e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e86:	462b      	mov	r3, r5
 8006e88:	463a      	mov	r2, r7
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f001 fe38 	bl	8008b00 <__s2b>
 8006e90:	9009      	str	r0, [sp, #36]	; 0x24
 8006e92:	2800      	cmp	r0, #0
 8006e94:	f43f af24 	beq.w	8006ce0 <_strtod_l+0x490>
 8006e98:	9b07      	ldr	r3, [sp, #28]
 8006e9a:	1b9e      	subs	r6, r3, r6
 8006e9c:	9b08      	ldr	r3, [sp, #32]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfb4      	ite	lt
 8006ea2:	4633      	movlt	r3, r6
 8006ea4:	2300      	movge	r3, #0
 8006ea6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ea8:	9b08      	ldr	r3, [sp, #32]
 8006eaa:	2500      	movs	r5, #0
 8006eac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006eb0:	9318      	str	r3, [sp, #96]	; 0x60
 8006eb2:	462e      	mov	r6, r5
 8006eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	f001 fd75 	bl	80089a8 <_Balloc>
 8006ebe:	9007      	str	r0, [sp, #28]
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f43f af11 	beq.w	8006ce8 <_strtod_l+0x498>
 8006ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	3202      	adds	r2, #2
 8006ecc:	f103 010c 	add.w	r1, r3, #12
 8006ed0:	0092      	lsls	r2, r2, #2
 8006ed2:	300c      	adds	r0, #12
 8006ed4:	f001 fd5a 	bl	800898c <memcpy>
 8006ed8:	ec4b ab10 	vmov	d0, sl, fp
 8006edc:	aa20      	add	r2, sp, #128	; 0x80
 8006ede:	a91f      	add	r1, sp, #124	; 0x7c
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006ee6:	f002 f947 	bl	8009178 <__d2b>
 8006eea:	901e      	str	r0, [sp, #120]	; 0x78
 8006eec:	2800      	cmp	r0, #0
 8006eee:	f43f aefb 	beq.w	8006ce8 <_strtod_l+0x498>
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f001 fe9d 	bl	8008c34 <__i2b>
 8006efa:	4606      	mov	r6, r0
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f43f aef3 	beq.w	8006ce8 <_strtod_l+0x498>
 8006f02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f04:	9904      	ldr	r1, [sp, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bfab      	itete	ge
 8006f0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006f0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006f0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006f10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006f14:	bfac      	ite	ge
 8006f16:	eb03 0902 	addge.w	r9, r3, r2
 8006f1a:	1ad7      	sublt	r7, r2, r3
 8006f1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f1e:	eba3 0801 	sub.w	r8, r3, r1
 8006f22:	4490      	add	r8, r2
 8006f24:	4ba3      	ldr	r3, [pc, #652]	; (80071b4 <_strtod_l+0x964>)
 8006f26:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f2a:	4598      	cmp	r8, r3
 8006f2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f30:	f280 80cc 	bge.w	80070cc <_strtod_l+0x87c>
 8006f34:	eba3 0308 	sub.w	r3, r3, r8
 8006f38:	2b1f      	cmp	r3, #31
 8006f3a:	eba2 0203 	sub.w	r2, r2, r3
 8006f3e:	f04f 0101 	mov.w	r1, #1
 8006f42:	f300 80b6 	bgt.w	80070b2 <_strtod_l+0x862>
 8006f46:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f50:	eb09 0802 	add.w	r8, r9, r2
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	45c1      	cmp	r9, r8
 8006f58:	4417      	add	r7, r2
 8006f5a:	441f      	add	r7, r3
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	bfa8      	it	ge
 8006f60:	4643      	movge	r3, r8
 8006f62:	42bb      	cmp	r3, r7
 8006f64:	bfa8      	it	ge
 8006f66:	463b      	movge	r3, r7
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bfc2      	ittt	gt
 8006f6c:	eba8 0803 	subgt.w	r8, r8, r3
 8006f70:	1aff      	subgt	r7, r7, r3
 8006f72:	eba9 0903 	subgt.w	r9, r9, r3
 8006f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dd17      	ble.n	8006fac <_strtod_l+0x75c>
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	461a      	mov	r2, r3
 8006f80:	4620      	mov	r0, r4
 8006f82:	f001 ff13 	bl	8008dac <__pow5mult>
 8006f86:	4606      	mov	r6, r0
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	f43f aead 	beq.w	8006ce8 <_strtod_l+0x498>
 8006f8e:	4601      	mov	r1, r0
 8006f90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006f92:	4620      	mov	r0, r4
 8006f94:	f001 fe64 	bl	8008c60 <__multiply>
 8006f98:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	f43f aea4 	beq.w	8006ce8 <_strtod_l+0x498>
 8006fa0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f001 fd40 	bl	8008a28 <_Bfree>
 8006fa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006faa:	931e      	str	r3, [sp, #120]	; 0x78
 8006fac:	f1b8 0f00 	cmp.w	r8, #0
 8006fb0:	f300 8091 	bgt.w	80070d6 <_strtod_l+0x886>
 8006fb4:	9b08      	ldr	r3, [sp, #32]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dd08      	ble.n	8006fcc <_strtod_l+0x77c>
 8006fba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006fbc:	9907      	ldr	r1, [sp, #28]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f001 fef4 	bl	8008dac <__pow5mult>
 8006fc4:	9007      	str	r0, [sp, #28]
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f43f ae8e 	beq.w	8006ce8 <_strtod_l+0x498>
 8006fcc:	2f00      	cmp	r7, #0
 8006fce:	dd08      	ble.n	8006fe2 <_strtod_l+0x792>
 8006fd0:	9907      	ldr	r1, [sp, #28]
 8006fd2:	463a      	mov	r2, r7
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f001 ff43 	bl	8008e60 <__lshift>
 8006fda:	9007      	str	r0, [sp, #28]
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f43f ae83 	beq.w	8006ce8 <_strtod_l+0x498>
 8006fe2:	f1b9 0f00 	cmp.w	r9, #0
 8006fe6:	dd08      	ble.n	8006ffa <_strtod_l+0x7aa>
 8006fe8:	4631      	mov	r1, r6
 8006fea:	464a      	mov	r2, r9
 8006fec:	4620      	mov	r0, r4
 8006fee:	f001 ff37 	bl	8008e60 <__lshift>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	f43f ae77 	beq.w	8006ce8 <_strtod_l+0x498>
 8006ffa:	9a07      	ldr	r2, [sp, #28]
 8006ffc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ffe:	4620      	mov	r0, r4
 8007000:	f001 ffb6 	bl	8008f70 <__mdiff>
 8007004:	4605      	mov	r5, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f ae6e 	beq.w	8006ce8 <_strtod_l+0x498>
 800700c:	68c3      	ldr	r3, [r0, #12]
 800700e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007010:	2300      	movs	r3, #0
 8007012:	60c3      	str	r3, [r0, #12]
 8007014:	4631      	mov	r1, r6
 8007016:	f001 ff8f 	bl	8008f38 <__mcmp>
 800701a:	2800      	cmp	r0, #0
 800701c:	da65      	bge.n	80070ea <_strtod_l+0x89a>
 800701e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007020:	ea53 030a 	orrs.w	r3, r3, sl
 8007024:	f040 8087 	bne.w	8007136 <_strtod_l+0x8e6>
 8007028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 8082 	bne.w	8007136 <_strtod_l+0x8e6>
 8007032:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007036:	0d1b      	lsrs	r3, r3, #20
 8007038:	051b      	lsls	r3, r3, #20
 800703a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800703e:	d97a      	bls.n	8007136 <_strtod_l+0x8e6>
 8007040:	696b      	ldr	r3, [r5, #20]
 8007042:	b913      	cbnz	r3, 800704a <_strtod_l+0x7fa>
 8007044:	692b      	ldr	r3, [r5, #16]
 8007046:	2b01      	cmp	r3, #1
 8007048:	dd75      	ble.n	8007136 <_strtod_l+0x8e6>
 800704a:	4629      	mov	r1, r5
 800704c:	2201      	movs	r2, #1
 800704e:	4620      	mov	r0, r4
 8007050:	f001 ff06 	bl	8008e60 <__lshift>
 8007054:	4631      	mov	r1, r6
 8007056:	4605      	mov	r5, r0
 8007058:	f001 ff6e 	bl	8008f38 <__mcmp>
 800705c:	2800      	cmp	r0, #0
 800705e:	dd6a      	ble.n	8007136 <_strtod_l+0x8e6>
 8007060:	9904      	ldr	r1, [sp, #16]
 8007062:	4a55      	ldr	r2, [pc, #340]	; (80071b8 <_strtod_l+0x968>)
 8007064:	465b      	mov	r3, fp
 8007066:	2900      	cmp	r1, #0
 8007068:	f000 8085 	beq.w	8007176 <_strtod_l+0x926>
 800706c:	ea02 010b 	and.w	r1, r2, fp
 8007070:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007074:	dc7f      	bgt.n	8007176 <_strtod_l+0x926>
 8007076:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800707a:	f77f aeaa 	ble.w	8006dd2 <_strtod_l+0x582>
 800707e:	4a4f      	ldr	r2, [pc, #316]	; (80071bc <_strtod_l+0x96c>)
 8007080:	2300      	movs	r3, #0
 8007082:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007086:	4650      	mov	r0, sl
 8007088:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800708c:	4659      	mov	r1, fp
 800708e:	f7f9 fabb 	bl	8000608 <__aeabi_dmul>
 8007092:	460b      	mov	r3, r1
 8007094:	4303      	orrs	r3, r0
 8007096:	bf08      	it	eq
 8007098:	2322      	moveq	r3, #34	; 0x22
 800709a:	4682      	mov	sl, r0
 800709c:	468b      	mov	fp, r1
 800709e:	bf08      	it	eq
 80070a0:	6023      	streq	r3, [r4, #0]
 80070a2:	e62b      	b.n	8006cfc <_strtod_l+0x4ac>
 80070a4:	f04f 32ff 	mov.w	r2, #4294967295
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	ea03 0a0a 	and.w	sl, r3, sl
 80070b0:	e6de      	b.n	8006e70 <_strtod_l+0x620>
 80070b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80070b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80070ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80070be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80070c2:	fa01 f308 	lsl.w	r3, r1, r8
 80070c6:	930c      	str	r3, [sp, #48]	; 0x30
 80070c8:	9111      	str	r1, [sp, #68]	; 0x44
 80070ca:	e741      	b.n	8006f50 <_strtod_l+0x700>
 80070cc:	2300      	movs	r3, #0
 80070ce:	930c      	str	r3, [sp, #48]	; 0x30
 80070d0:	2301      	movs	r3, #1
 80070d2:	9311      	str	r3, [sp, #68]	; 0x44
 80070d4:	e73c      	b.n	8006f50 <_strtod_l+0x700>
 80070d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80070d8:	4642      	mov	r2, r8
 80070da:	4620      	mov	r0, r4
 80070dc:	f001 fec0 	bl	8008e60 <__lshift>
 80070e0:	901e      	str	r0, [sp, #120]	; 0x78
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f47f af66 	bne.w	8006fb4 <_strtod_l+0x764>
 80070e8:	e5fe      	b.n	8006ce8 <_strtod_l+0x498>
 80070ea:	465f      	mov	r7, fp
 80070ec:	d16e      	bne.n	80071cc <_strtod_l+0x97c>
 80070ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070f4:	b342      	cbz	r2, 8007148 <_strtod_l+0x8f8>
 80070f6:	4a32      	ldr	r2, [pc, #200]	; (80071c0 <_strtod_l+0x970>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d128      	bne.n	800714e <_strtod_l+0x8fe>
 80070fc:	9b04      	ldr	r3, [sp, #16]
 80070fe:	4650      	mov	r0, sl
 8007100:	b1eb      	cbz	r3, 800713e <_strtod_l+0x8ee>
 8007102:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <_strtod_l+0x968>)
 8007104:	403a      	ands	r2, r7
 8007106:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800710a:	f04f 31ff 	mov.w	r1, #4294967295
 800710e:	d819      	bhi.n	8007144 <_strtod_l+0x8f4>
 8007110:	0d12      	lsrs	r2, r2, #20
 8007112:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007116:	fa01 f303 	lsl.w	r3, r1, r3
 800711a:	4298      	cmp	r0, r3
 800711c:	d117      	bne.n	800714e <_strtod_l+0x8fe>
 800711e:	4b29      	ldr	r3, [pc, #164]	; (80071c4 <_strtod_l+0x974>)
 8007120:	429f      	cmp	r7, r3
 8007122:	d102      	bne.n	800712a <_strtod_l+0x8da>
 8007124:	3001      	adds	r0, #1
 8007126:	f43f addf 	beq.w	8006ce8 <_strtod_l+0x498>
 800712a:	4b23      	ldr	r3, [pc, #140]	; (80071b8 <_strtod_l+0x968>)
 800712c:	403b      	ands	r3, r7
 800712e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007132:	f04f 0a00 	mov.w	sl, #0
 8007136:	9b04      	ldr	r3, [sp, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1a0      	bne.n	800707e <_strtod_l+0x82e>
 800713c:	e5de      	b.n	8006cfc <_strtod_l+0x4ac>
 800713e:	f04f 33ff 	mov.w	r3, #4294967295
 8007142:	e7ea      	b.n	800711a <_strtod_l+0x8ca>
 8007144:	460b      	mov	r3, r1
 8007146:	e7e8      	b.n	800711a <_strtod_l+0x8ca>
 8007148:	ea53 030a 	orrs.w	r3, r3, sl
 800714c:	d088      	beq.n	8007060 <_strtod_l+0x810>
 800714e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007150:	b1db      	cbz	r3, 800718a <_strtod_l+0x93a>
 8007152:	423b      	tst	r3, r7
 8007154:	d0ef      	beq.n	8007136 <_strtod_l+0x8e6>
 8007156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007158:	9a04      	ldr	r2, [sp, #16]
 800715a:	4650      	mov	r0, sl
 800715c:	4659      	mov	r1, fp
 800715e:	b1c3      	cbz	r3, 8007192 <_strtod_l+0x942>
 8007160:	f7ff fb58 	bl	8006814 <sulp>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800716c:	f7f9 f896 	bl	800029c <__adddf3>
 8007170:	4682      	mov	sl, r0
 8007172:	468b      	mov	fp, r1
 8007174:	e7df      	b.n	8007136 <_strtod_l+0x8e6>
 8007176:	4013      	ands	r3, r2
 8007178:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800717c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007180:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007184:	f04f 3aff 	mov.w	sl, #4294967295
 8007188:	e7d5      	b.n	8007136 <_strtod_l+0x8e6>
 800718a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800718c:	ea13 0f0a 	tst.w	r3, sl
 8007190:	e7e0      	b.n	8007154 <_strtod_l+0x904>
 8007192:	f7ff fb3f 	bl	8006814 <sulp>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800719e:	f7f9 f87b 	bl	8000298 <__aeabi_dsub>
 80071a2:	2200      	movs	r2, #0
 80071a4:	2300      	movs	r3, #0
 80071a6:	4682      	mov	sl, r0
 80071a8:	468b      	mov	fp, r1
 80071aa:	f7f9 fc95 	bl	8000ad8 <__aeabi_dcmpeq>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d0c1      	beq.n	8007136 <_strtod_l+0x8e6>
 80071b2:	e60e      	b.n	8006dd2 <_strtod_l+0x582>
 80071b4:	fffffc02 	.word	0xfffffc02
 80071b8:	7ff00000 	.word	0x7ff00000
 80071bc:	39500000 	.word	0x39500000
 80071c0:	000fffff 	.word	0x000fffff
 80071c4:	7fefffff 	.word	0x7fefffff
 80071c8:	0800a5c0 	.word	0x0800a5c0
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	f002 f82e 	bl	8009230 <__ratio>
 80071d4:	ec59 8b10 	vmov	r8, r9, d0
 80071d8:	ee10 0a10 	vmov	r0, s0
 80071dc:	2200      	movs	r2, #0
 80071de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f9 fc8c 	bl	8000b00 <__aeabi_dcmple>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d07c      	beq.n	80072e6 <_strtod_l+0xa96>
 80071ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d04c      	beq.n	800728c <_strtod_l+0xa3c>
 80071f2:	4b95      	ldr	r3, [pc, #596]	; (8007448 <_strtod_l+0xbf8>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80071fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007448 <_strtod_l+0xbf8>
 80071fe:	f04f 0800 	mov.w	r8, #0
 8007202:	4b92      	ldr	r3, [pc, #584]	; (800744c <_strtod_l+0xbfc>)
 8007204:	403b      	ands	r3, r7
 8007206:	9311      	str	r3, [sp, #68]	; 0x44
 8007208:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800720a:	4b91      	ldr	r3, [pc, #580]	; (8007450 <_strtod_l+0xc00>)
 800720c:	429a      	cmp	r2, r3
 800720e:	f040 80b2 	bne.w	8007376 <_strtod_l+0xb26>
 8007212:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800721a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800721e:	ec4b ab10 	vmov	d0, sl, fp
 8007222:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007226:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800722a:	f001 ff29 	bl	8009080 <__ulp>
 800722e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007232:	ec53 2b10 	vmov	r2, r3, d0
 8007236:	f7f9 f9e7 	bl	8000608 <__aeabi_dmul>
 800723a:	4652      	mov	r2, sl
 800723c:	465b      	mov	r3, fp
 800723e:	f7f9 f82d 	bl	800029c <__adddf3>
 8007242:	460b      	mov	r3, r1
 8007244:	4981      	ldr	r1, [pc, #516]	; (800744c <_strtod_l+0xbfc>)
 8007246:	4a83      	ldr	r2, [pc, #524]	; (8007454 <_strtod_l+0xc04>)
 8007248:	4019      	ands	r1, r3
 800724a:	4291      	cmp	r1, r2
 800724c:	4682      	mov	sl, r0
 800724e:	d95e      	bls.n	800730e <_strtod_l+0xabe>
 8007250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007252:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007256:	4293      	cmp	r3, r2
 8007258:	d103      	bne.n	8007262 <_strtod_l+0xa12>
 800725a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800725c:	3301      	adds	r3, #1
 800725e:	f43f ad43 	beq.w	8006ce8 <_strtod_l+0x498>
 8007262:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007460 <_strtod_l+0xc10>
 8007266:	f04f 3aff 	mov.w	sl, #4294967295
 800726a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800726c:	4620      	mov	r0, r4
 800726e:	f001 fbdb 	bl	8008a28 <_Bfree>
 8007272:	9907      	ldr	r1, [sp, #28]
 8007274:	4620      	mov	r0, r4
 8007276:	f001 fbd7 	bl	8008a28 <_Bfree>
 800727a:	4631      	mov	r1, r6
 800727c:	4620      	mov	r0, r4
 800727e:	f001 fbd3 	bl	8008a28 <_Bfree>
 8007282:	4629      	mov	r1, r5
 8007284:	4620      	mov	r0, r4
 8007286:	f001 fbcf 	bl	8008a28 <_Bfree>
 800728a:	e613      	b.n	8006eb4 <_strtod_l+0x664>
 800728c:	f1ba 0f00 	cmp.w	sl, #0
 8007290:	d11b      	bne.n	80072ca <_strtod_l+0xa7a>
 8007292:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007296:	b9f3      	cbnz	r3, 80072d6 <_strtod_l+0xa86>
 8007298:	4b6b      	ldr	r3, [pc, #428]	; (8007448 <_strtod_l+0xbf8>)
 800729a:	2200      	movs	r2, #0
 800729c:	4640      	mov	r0, r8
 800729e:	4649      	mov	r1, r9
 80072a0:	f7f9 fc24 	bl	8000aec <__aeabi_dcmplt>
 80072a4:	b9d0      	cbnz	r0, 80072dc <_strtod_l+0xa8c>
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	4b6b      	ldr	r3, [pc, #428]	; (8007458 <_strtod_l+0xc08>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	f7f9 f9ab 	bl	8000608 <__aeabi_dmul>
 80072b2:	4680      	mov	r8, r0
 80072b4:	4689      	mov	r9, r1
 80072b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80072be:	931b      	str	r3, [sp, #108]	; 0x6c
 80072c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80072c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80072c8:	e79b      	b.n	8007202 <_strtod_l+0x9b2>
 80072ca:	f1ba 0f01 	cmp.w	sl, #1
 80072ce:	d102      	bne.n	80072d6 <_strtod_l+0xa86>
 80072d0:	2f00      	cmp	r7, #0
 80072d2:	f43f ad7e 	beq.w	8006dd2 <_strtod_l+0x582>
 80072d6:	4b61      	ldr	r3, [pc, #388]	; (800745c <_strtod_l+0xc0c>)
 80072d8:	2200      	movs	r2, #0
 80072da:	e78c      	b.n	80071f6 <_strtod_l+0x9a6>
 80072dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007458 <_strtod_l+0xc08>
 80072e0:	f04f 0800 	mov.w	r8, #0
 80072e4:	e7e7      	b.n	80072b6 <_strtod_l+0xa66>
 80072e6:	4b5c      	ldr	r3, [pc, #368]	; (8007458 <_strtod_l+0xc08>)
 80072e8:	4640      	mov	r0, r8
 80072ea:	4649      	mov	r1, r9
 80072ec:	2200      	movs	r2, #0
 80072ee:	f7f9 f98b 	bl	8000608 <__aeabi_dmul>
 80072f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072f4:	4680      	mov	r8, r0
 80072f6:	4689      	mov	r9, r1
 80072f8:	b933      	cbnz	r3, 8007308 <_strtod_l+0xab8>
 80072fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072fe:	9012      	str	r0, [sp, #72]	; 0x48
 8007300:	9313      	str	r3, [sp, #76]	; 0x4c
 8007302:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007306:	e7dd      	b.n	80072c4 <_strtod_l+0xa74>
 8007308:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800730c:	e7f9      	b.n	8007302 <_strtod_l+0xab2>
 800730e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007312:	9b04      	ldr	r3, [sp, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1a8      	bne.n	800726a <_strtod_l+0xa1a>
 8007318:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800731c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800731e:	0d1b      	lsrs	r3, r3, #20
 8007320:	051b      	lsls	r3, r3, #20
 8007322:	429a      	cmp	r2, r3
 8007324:	d1a1      	bne.n	800726a <_strtod_l+0xa1a>
 8007326:	4640      	mov	r0, r8
 8007328:	4649      	mov	r1, r9
 800732a:	f7f9 fccd 	bl	8000cc8 <__aeabi_d2lz>
 800732e:	f7f9 f93d 	bl	80005ac <__aeabi_l2d>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4640      	mov	r0, r8
 8007338:	4649      	mov	r1, r9
 800733a:	f7f8 ffad 	bl	8000298 <__aeabi_dsub>
 800733e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007340:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007344:	ea43 030a 	orr.w	r3, r3, sl
 8007348:	4313      	orrs	r3, r2
 800734a:	4680      	mov	r8, r0
 800734c:	4689      	mov	r9, r1
 800734e:	d053      	beq.n	80073f8 <_strtod_l+0xba8>
 8007350:	a335      	add	r3, pc, #212	; (adr r3, 8007428 <_strtod_l+0xbd8>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f9 fbc9 	bl	8000aec <__aeabi_dcmplt>
 800735a:	2800      	cmp	r0, #0
 800735c:	f47f acce 	bne.w	8006cfc <_strtod_l+0x4ac>
 8007360:	a333      	add	r3, pc, #204	; (adr r3, 8007430 <_strtod_l+0xbe0>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	4640      	mov	r0, r8
 8007368:	4649      	mov	r1, r9
 800736a:	f7f9 fbdd 	bl	8000b28 <__aeabi_dcmpgt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f43f af7b 	beq.w	800726a <_strtod_l+0xa1a>
 8007374:	e4c2      	b.n	8006cfc <_strtod_l+0x4ac>
 8007376:	9b04      	ldr	r3, [sp, #16]
 8007378:	b333      	cbz	r3, 80073c8 <_strtod_l+0xb78>
 800737a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800737c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007380:	d822      	bhi.n	80073c8 <_strtod_l+0xb78>
 8007382:	a32d      	add	r3, pc, #180	; (adr r3, 8007438 <_strtod_l+0xbe8>)
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f9 fbb8 	bl	8000b00 <__aeabi_dcmple>
 8007390:	b1a0      	cbz	r0, 80073bc <_strtod_l+0xb6c>
 8007392:	4649      	mov	r1, r9
 8007394:	4640      	mov	r0, r8
 8007396:	f7f9 fc0f 	bl	8000bb8 <__aeabi_d2uiz>
 800739a:	2801      	cmp	r0, #1
 800739c:	bf38      	it	cc
 800739e:	2001      	movcc	r0, #1
 80073a0:	f7f9 f8b8 	bl	8000514 <__aeabi_ui2d>
 80073a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073a6:	4680      	mov	r8, r0
 80073a8:	4689      	mov	r9, r1
 80073aa:	bb13      	cbnz	r3, 80073f2 <_strtod_l+0xba2>
 80073ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073b0:	9014      	str	r0, [sp, #80]	; 0x50
 80073b2:	9315      	str	r3, [sp, #84]	; 0x54
 80073b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80073b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80073bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80073c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	930d      	str	r3, [sp, #52]	; 0x34
 80073c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80073d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073d4:	f001 fe54 	bl	8009080 <__ulp>
 80073d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073dc:	ec53 2b10 	vmov	r2, r3, d0
 80073e0:	f7f9 f912 	bl	8000608 <__aeabi_dmul>
 80073e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073e8:	f7f8 ff58 	bl	800029c <__adddf3>
 80073ec:	4682      	mov	sl, r0
 80073ee:	468b      	mov	fp, r1
 80073f0:	e78f      	b.n	8007312 <_strtod_l+0xac2>
 80073f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80073f6:	e7dd      	b.n	80073b4 <_strtod_l+0xb64>
 80073f8:	a311      	add	r3, pc, #68	; (adr r3, 8007440 <_strtod_l+0xbf0>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f7f9 fb75 	bl	8000aec <__aeabi_dcmplt>
 8007402:	e7b4      	b.n	800736e <_strtod_l+0xb1e>
 8007404:	2300      	movs	r3, #0
 8007406:	930e      	str	r3, [sp, #56]	; 0x38
 8007408:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800740a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	f7ff ba65 	b.w	80068dc <_strtod_l+0x8c>
 8007412:	2b65      	cmp	r3, #101	; 0x65
 8007414:	f43f ab5d 	beq.w	8006ad2 <_strtod_l+0x282>
 8007418:	2b45      	cmp	r3, #69	; 0x45
 800741a:	f43f ab5a 	beq.w	8006ad2 <_strtod_l+0x282>
 800741e:	2201      	movs	r2, #1
 8007420:	f7ff bb92 	b.w	8006b48 <_strtod_l+0x2f8>
 8007424:	f3af 8000 	nop.w
 8007428:	94a03595 	.word	0x94a03595
 800742c:	3fdfffff 	.word	0x3fdfffff
 8007430:	35afe535 	.word	0x35afe535
 8007434:	3fe00000 	.word	0x3fe00000
 8007438:	ffc00000 	.word	0xffc00000
 800743c:	41dfffff 	.word	0x41dfffff
 8007440:	94a03595 	.word	0x94a03595
 8007444:	3fcfffff 	.word	0x3fcfffff
 8007448:	3ff00000 	.word	0x3ff00000
 800744c:	7ff00000 	.word	0x7ff00000
 8007450:	7fe00000 	.word	0x7fe00000
 8007454:	7c9fffff 	.word	0x7c9fffff
 8007458:	3fe00000 	.word	0x3fe00000
 800745c:	bff00000 	.word	0xbff00000
 8007460:	7fefffff 	.word	0x7fefffff

08007464 <_strtod_r>:
 8007464:	4b01      	ldr	r3, [pc, #4]	; (800746c <_strtod_r+0x8>)
 8007466:	f7ff b9f3 	b.w	8006850 <_strtod_l>
 800746a:	bf00      	nop
 800746c:	2000007c 	.word	0x2000007c

08007470 <_strtol_l.isra.0>:
 8007470:	2b01      	cmp	r3, #1
 8007472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007476:	d001      	beq.n	800747c <_strtol_l.isra.0+0xc>
 8007478:	2b24      	cmp	r3, #36	; 0x24
 800747a:	d906      	bls.n	800748a <_strtol_l.isra.0+0x1a>
 800747c:	f7fe faf8 	bl	8005a70 <__errno>
 8007480:	2316      	movs	r3, #22
 8007482:	6003      	str	r3, [r0, #0]
 8007484:	2000      	movs	r0, #0
 8007486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748a:	4f3a      	ldr	r7, [pc, #232]	; (8007574 <_strtol_l.isra.0+0x104>)
 800748c:	468e      	mov	lr, r1
 800748e:	4676      	mov	r6, lr
 8007490:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007494:	5de5      	ldrb	r5, [r4, r7]
 8007496:	f015 0508 	ands.w	r5, r5, #8
 800749a:	d1f8      	bne.n	800748e <_strtol_l.isra.0+0x1e>
 800749c:	2c2d      	cmp	r4, #45	; 0x2d
 800749e:	d134      	bne.n	800750a <_strtol_l.isra.0+0x9a>
 80074a0:	f89e 4000 	ldrb.w	r4, [lr]
 80074a4:	f04f 0801 	mov.w	r8, #1
 80074a8:	f106 0e02 	add.w	lr, r6, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d05c      	beq.n	800756a <_strtol_l.isra.0+0xfa>
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d10c      	bne.n	80074ce <_strtol_l.isra.0+0x5e>
 80074b4:	2c30      	cmp	r4, #48	; 0x30
 80074b6:	d10a      	bne.n	80074ce <_strtol_l.isra.0+0x5e>
 80074b8:	f89e 4000 	ldrb.w	r4, [lr]
 80074bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80074c0:	2c58      	cmp	r4, #88	; 0x58
 80074c2:	d14d      	bne.n	8007560 <_strtol_l.isra.0+0xf0>
 80074c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80074c8:	2310      	movs	r3, #16
 80074ca:	f10e 0e02 	add.w	lr, lr, #2
 80074ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80074d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074d6:	2600      	movs	r6, #0
 80074d8:	fbbc f9f3 	udiv	r9, ip, r3
 80074dc:	4635      	mov	r5, r6
 80074de:	fb03 ca19 	mls	sl, r3, r9, ip
 80074e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80074e6:	2f09      	cmp	r7, #9
 80074e8:	d818      	bhi.n	800751c <_strtol_l.isra.0+0xac>
 80074ea:	463c      	mov	r4, r7
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	dd24      	ble.n	800753a <_strtol_l.isra.0+0xca>
 80074f0:	2e00      	cmp	r6, #0
 80074f2:	db1f      	blt.n	8007534 <_strtol_l.isra.0+0xc4>
 80074f4:	45a9      	cmp	r9, r5
 80074f6:	d31d      	bcc.n	8007534 <_strtol_l.isra.0+0xc4>
 80074f8:	d101      	bne.n	80074fe <_strtol_l.isra.0+0x8e>
 80074fa:	45a2      	cmp	sl, r4
 80074fc:	db1a      	blt.n	8007534 <_strtol_l.isra.0+0xc4>
 80074fe:	fb05 4503 	mla	r5, r5, r3, r4
 8007502:	2601      	movs	r6, #1
 8007504:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007508:	e7eb      	b.n	80074e2 <_strtol_l.isra.0+0x72>
 800750a:	2c2b      	cmp	r4, #43	; 0x2b
 800750c:	bf08      	it	eq
 800750e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007512:	46a8      	mov	r8, r5
 8007514:	bf08      	it	eq
 8007516:	f106 0e02 	addeq.w	lr, r6, #2
 800751a:	e7c7      	b.n	80074ac <_strtol_l.isra.0+0x3c>
 800751c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007520:	2f19      	cmp	r7, #25
 8007522:	d801      	bhi.n	8007528 <_strtol_l.isra.0+0xb8>
 8007524:	3c37      	subs	r4, #55	; 0x37
 8007526:	e7e1      	b.n	80074ec <_strtol_l.isra.0+0x7c>
 8007528:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800752c:	2f19      	cmp	r7, #25
 800752e:	d804      	bhi.n	800753a <_strtol_l.isra.0+0xca>
 8007530:	3c57      	subs	r4, #87	; 0x57
 8007532:	e7db      	b.n	80074ec <_strtol_l.isra.0+0x7c>
 8007534:	f04f 36ff 	mov.w	r6, #4294967295
 8007538:	e7e4      	b.n	8007504 <_strtol_l.isra.0+0x94>
 800753a:	2e00      	cmp	r6, #0
 800753c:	da05      	bge.n	800754a <_strtol_l.isra.0+0xda>
 800753e:	2322      	movs	r3, #34	; 0x22
 8007540:	6003      	str	r3, [r0, #0]
 8007542:	4665      	mov	r5, ip
 8007544:	b942      	cbnz	r2, 8007558 <_strtol_l.isra.0+0xe8>
 8007546:	4628      	mov	r0, r5
 8007548:	e79d      	b.n	8007486 <_strtol_l.isra.0+0x16>
 800754a:	f1b8 0f00 	cmp.w	r8, #0
 800754e:	d000      	beq.n	8007552 <_strtol_l.isra.0+0xe2>
 8007550:	426d      	negs	r5, r5
 8007552:	2a00      	cmp	r2, #0
 8007554:	d0f7      	beq.n	8007546 <_strtol_l.isra.0+0xd6>
 8007556:	b10e      	cbz	r6, 800755c <_strtol_l.isra.0+0xec>
 8007558:	f10e 31ff 	add.w	r1, lr, #4294967295
 800755c:	6011      	str	r1, [r2, #0]
 800755e:	e7f2      	b.n	8007546 <_strtol_l.isra.0+0xd6>
 8007560:	2430      	movs	r4, #48	; 0x30
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1b3      	bne.n	80074ce <_strtol_l.isra.0+0x5e>
 8007566:	2308      	movs	r3, #8
 8007568:	e7b1      	b.n	80074ce <_strtol_l.isra.0+0x5e>
 800756a:	2c30      	cmp	r4, #48	; 0x30
 800756c:	d0a4      	beq.n	80074b8 <_strtol_l.isra.0+0x48>
 800756e:	230a      	movs	r3, #10
 8007570:	e7ad      	b.n	80074ce <_strtol_l.isra.0+0x5e>
 8007572:	bf00      	nop
 8007574:	0800a5e9 	.word	0x0800a5e9

08007578 <_strtol_r>:
 8007578:	f7ff bf7a 	b.w	8007470 <_strtol_l.isra.0>

0800757c <quorem>:
 800757c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	6903      	ldr	r3, [r0, #16]
 8007582:	690c      	ldr	r4, [r1, #16]
 8007584:	42a3      	cmp	r3, r4
 8007586:	4607      	mov	r7, r0
 8007588:	f2c0 8081 	blt.w	800768e <quorem+0x112>
 800758c:	3c01      	subs	r4, #1
 800758e:	f101 0814 	add.w	r8, r1, #20
 8007592:	f100 0514 	add.w	r5, r0, #20
 8007596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075a4:	3301      	adds	r3, #1
 80075a6:	429a      	cmp	r2, r3
 80075a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80075b4:	d331      	bcc.n	800761a <quorem+0x9e>
 80075b6:	f04f 0e00 	mov.w	lr, #0
 80075ba:	4640      	mov	r0, r8
 80075bc:	46ac      	mov	ip, r5
 80075be:	46f2      	mov	sl, lr
 80075c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80075c4:	b293      	uxth	r3, r2
 80075c6:	fb06 e303 	mla	r3, r6, r3, lr
 80075ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ebaa 0303 	sub.w	r3, sl, r3
 80075d4:	0c12      	lsrs	r2, r2, #16
 80075d6:	f8dc a000 	ldr.w	sl, [ip]
 80075da:	fb06 e202 	mla	r2, r6, r2, lr
 80075de:	fa13 f38a 	uxtah	r3, r3, sl
 80075e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075e6:	fa1f fa82 	uxth.w	sl, r2
 80075ea:	f8dc 2000 	ldr.w	r2, [ip]
 80075ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80075f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075fc:	4581      	cmp	r9, r0
 80075fe:	f84c 3b04 	str.w	r3, [ip], #4
 8007602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007606:	d2db      	bcs.n	80075c0 <quorem+0x44>
 8007608:	f855 300b 	ldr.w	r3, [r5, fp]
 800760c:	b92b      	cbnz	r3, 800761a <quorem+0x9e>
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	3b04      	subs	r3, #4
 8007612:	429d      	cmp	r5, r3
 8007614:	461a      	mov	r2, r3
 8007616:	d32e      	bcc.n	8007676 <quorem+0xfa>
 8007618:	613c      	str	r4, [r7, #16]
 800761a:	4638      	mov	r0, r7
 800761c:	f001 fc8c 	bl	8008f38 <__mcmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	db24      	blt.n	800766e <quorem+0xf2>
 8007624:	3601      	adds	r6, #1
 8007626:	4628      	mov	r0, r5
 8007628:	f04f 0c00 	mov.w	ip, #0
 800762c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007630:	f8d0 e000 	ldr.w	lr, [r0]
 8007634:	b293      	uxth	r3, r2
 8007636:	ebac 0303 	sub.w	r3, ip, r3
 800763a:	0c12      	lsrs	r2, r2, #16
 800763c:	fa13 f38e 	uxtah	r3, r3, lr
 8007640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007648:	b29b      	uxth	r3, r3
 800764a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800764e:	45c1      	cmp	r9, r8
 8007650:	f840 3b04 	str.w	r3, [r0], #4
 8007654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007658:	d2e8      	bcs.n	800762c <quorem+0xb0>
 800765a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800765e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007662:	b922      	cbnz	r2, 800766e <quorem+0xf2>
 8007664:	3b04      	subs	r3, #4
 8007666:	429d      	cmp	r5, r3
 8007668:	461a      	mov	r2, r3
 800766a:	d30a      	bcc.n	8007682 <quorem+0x106>
 800766c:	613c      	str	r4, [r7, #16]
 800766e:	4630      	mov	r0, r6
 8007670:	b003      	add	sp, #12
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	3b04      	subs	r3, #4
 800767a:	2a00      	cmp	r2, #0
 800767c:	d1cc      	bne.n	8007618 <quorem+0x9c>
 800767e:	3c01      	subs	r4, #1
 8007680:	e7c7      	b.n	8007612 <quorem+0x96>
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	3b04      	subs	r3, #4
 8007686:	2a00      	cmp	r2, #0
 8007688:	d1f0      	bne.n	800766c <quorem+0xf0>
 800768a:	3c01      	subs	r4, #1
 800768c:	e7eb      	b.n	8007666 <quorem+0xea>
 800768e:	2000      	movs	r0, #0
 8007690:	e7ee      	b.n	8007670 <quorem+0xf4>
 8007692:	0000      	movs	r0, r0
 8007694:	0000      	movs	r0, r0
	...

08007698 <_dtoa_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	ed2d 8b02 	vpush	{d8}
 80076a0:	ec57 6b10 	vmov	r6, r7, d0
 80076a4:	b095      	sub	sp, #84	; 0x54
 80076a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076ac:	9105      	str	r1, [sp, #20]
 80076ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80076b2:	4604      	mov	r4, r0
 80076b4:	9209      	str	r2, [sp, #36]	; 0x24
 80076b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076b8:	b975      	cbnz	r5, 80076d8 <_dtoa_r+0x40>
 80076ba:	2010      	movs	r0, #16
 80076bc:	f001 f94c 	bl	8008958 <malloc>
 80076c0:	4602      	mov	r2, r0
 80076c2:	6260      	str	r0, [r4, #36]	; 0x24
 80076c4:	b920      	cbnz	r0, 80076d0 <_dtoa_r+0x38>
 80076c6:	4bb2      	ldr	r3, [pc, #712]	; (8007990 <_dtoa_r+0x2f8>)
 80076c8:	21ea      	movs	r1, #234	; 0xea
 80076ca:	48b2      	ldr	r0, [pc, #712]	; (8007994 <_dtoa_r+0x2fc>)
 80076cc:	f002 f874 	bl	80097b8 <__assert_func>
 80076d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076d4:	6005      	str	r5, [r0, #0]
 80076d6:	60c5      	str	r5, [r0, #12]
 80076d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076da:	6819      	ldr	r1, [r3, #0]
 80076dc:	b151      	cbz	r1, 80076f4 <_dtoa_r+0x5c>
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	604a      	str	r2, [r1, #4]
 80076e2:	2301      	movs	r3, #1
 80076e4:	4093      	lsls	r3, r2
 80076e6:	608b      	str	r3, [r1, #8]
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 f99d 	bl	8008a28 <_Bfree>
 80076ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	1e3b      	subs	r3, r7, #0
 80076f6:	bfb9      	ittee	lt
 80076f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076fc:	9303      	strlt	r3, [sp, #12]
 80076fe:	2300      	movge	r3, #0
 8007700:	f8c8 3000 	strge.w	r3, [r8]
 8007704:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007708:	4ba3      	ldr	r3, [pc, #652]	; (8007998 <_dtoa_r+0x300>)
 800770a:	bfbc      	itt	lt
 800770c:	2201      	movlt	r2, #1
 800770e:	f8c8 2000 	strlt.w	r2, [r8]
 8007712:	ea33 0309 	bics.w	r3, r3, r9
 8007716:	d11b      	bne.n	8007750 <_dtoa_r+0xb8>
 8007718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800771a:	f242 730f 	movw	r3, #9999	; 0x270f
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007724:	4333      	orrs	r3, r6
 8007726:	f000 857a 	beq.w	800821e <_dtoa_r+0xb86>
 800772a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800772c:	b963      	cbnz	r3, 8007748 <_dtoa_r+0xb0>
 800772e:	4b9b      	ldr	r3, [pc, #620]	; (800799c <_dtoa_r+0x304>)
 8007730:	e024      	b.n	800777c <_dtoa_r+0xe4>
 8007732:	4b9b      	ldr	r3, [pc, #620]	; (80079a0 <_dtoa_r+0x308>)
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	3308      	adds	r3, #8
 8007738:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	9800      	ldr	r0, [sp, #0]
 800773e:	b015      	add	sp, #84	; 0x54
 8007740:	ecbd 8b02 	vpop	{d8}
 8007744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007748:	4b94      	ldr	r3, [pc, #592]	; (800799c <_dtoa_r+0x304>)
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	3303      	adds	r3, #3
 800774e:	e7f3      	b.n	8007738 <_dtoa_r+0xa0>
 8007750:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	ec51 0b17 	vmov	r0, r1, d7
 800775a:	2300      	movs	r3, #0
 800775c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007760:	f7f9 f9ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8007764:	4680      	mov	r8, r0
 8007766:	b158      	cbz	r0, 8007780 <_dtoa_r+0xe8>
 8007768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800776a:	2301      	movs	r3, #1
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8551 	beq.w	8008218 <_dtoa_r+0xb80>
 8007776:	488b      	ldr	r0, [pc, #556]	; (80079a4 <_dtoa_r+0x30c>)
 8007778:	6018      	str	r0, [r3, #0]
 800777a:	1e43      	subs	r3, r0, #1
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	e7dd      	b.n	800773c <_dtoa_r+0xa4>
 8007780:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007784:	aa12      	add	r2, sp, #72	; 0x48
 8007786:	a913      	add	r1, sp, #76	; 0x4c
 8007788:	4620      	mov	r0, r4
 800778a:	f001 fcf5 	bl	8009178 <__d2b>
 800778e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007792:	4683      	mov	fp, r0
 8007794:	2d00      	cmp	r5, #0
 8007796:	d07c      	beq.n	8007892 <_dtoa_r+0x1fa>
 8007798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800779a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800779e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80077a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077b2:	4b7d      	ldr	r3, [pc, #500]	; (80079a8 <_dtoa_r+0x310>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	4630      	mov	r0, r6
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f8 fd6d 	bl	8000298 <__aeabi_dsub>
 80077be:	a36e      	add	r3, pc, #440	; (adr r3, 8007978 <_dtoa_r+0x2e0>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	f7f8 ff20 	bl	8000608 <__aeabi_dmul>
 80077c8:	a36d      	add	r3, pc, #436	; (adr r3, 8007980 <_dtoa_r+0x2e8>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f7f8 fd65 	bl	800029c <__adddf3>
 80077d2:	4606      	mov	r6, r0
 80077d4:	4628      	mov	r0, r5
 80077d6:	460f      	mov	r7, r1
 80077d8:	f7f8 feac 	bl	8000534 <__aeabi_i2d>
 80077dc:	a36a      	add	r3, pc, #424	; (adr r3, 8007988 <_dtoa_r+0x2f0>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 ff11 	bl	8000608 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4630      	mov	r0, r6
 80077ec:	4639      	mov	r1, r7
 80077ee:	f7f8 fd55 	bl	800029c <__adddf3>
 80077f2:	4606      	mov	r6, r0
 80077f4:	460f      	mov	r7, r1
 80077f6:	f7f9 f9b7 	bl	8000b68 <__aeabi_d2iz>
 80077fa:	2200      	movs	r2, #0
 80077fc:	4682      	mov	sl, r0
 80077fe:	2300      	movs	r3, #0
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f9 f972 	bl	8000aec <__aeabi_dcmplt>
 8007808:	b148      	cbz	r0, 800781e <_dtoa_r+0x186>
 800780a:	4650      	mov	r0, sl
 800780c:	f7f8 fe92 	bl	8000534 <__aeabi_i2d>
 8007810:	4632      	mov	r2, r6
 8007812:	463b      	mov	r3, r7
 8007814:	f7f9 f960 	bl	8000ad8 <__aeabi_dcmpeq>
 8007818:	b908      	cbnz	r0, 800781e <_dtoa_r+0x186>
 800781a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800781e:	f1ba 0f16 	cmp.w	sl, #22
 8007822:	d854      	bhi.n	80078ce <_dtoa_r+0x236>
 8007824:	4b61      	ldr	r3, [pc, #388]	; (80079ac <_dtoa_r+0x314>)
 8007826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007832:	f7f9 f95b 	bl	8000aec <__aeabi_dcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d04b      	beq.n	80078d2 <_dtoa_r+0x23a>
 800783a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800783e:	2300      	movs	r3, #0
 8007840:	930e      	str	r3, [sp, #56]	; 0x38
 8007842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007844:	1b5d      	subs	r5, r3, r5
 8007846:	1e6b      	subs	r3, r5, #1
 8007848:	9304      	str	r3, [sp, #16]
 800784a:	bf43      	ittte	mi
 800784c:	2300      	movmi	r3, #0
 800784e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007852:	9304      	strmi	r3, [sp, #16]
 8007854:	f04f 0800 	movpl.w	r8, #0
 8007858:	f1ba 0f00 	cmp.w	sl, #0
 800785c:	db3b      	blt.n	80078d6 <_dtoa_r+0x23e>
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007864:	4453      	add	r3, sl
 8007866:	9304      	str	r3, [sp, #16]
 8007868:	2300      	movs	r3, #0
 800786a:	9306      	str	r3, [sp, #24]
 800786c:	9b05      	ldr	r3, [sp, #20]
 800786e:	2b09      	cmp	r3, #9
 8007870:	d869      	bhi.n	8007946 <_dtoa_r+0x2ae>
 8007872:	2b05      	cmp	r3, #5
 8007874:	bfc4      	itt	gt
 8007876:	3b04      	subgt	r3, #4
 8007878:	9305      	strgt	r3, [sp, #20]
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	f1a3 0302 	sub.w	r3, r3, #2
 8007880:	bfcc      	ite	gt
 8007882:	2500      	movgt	r5, #0
 8007884:	2501      	movle	r5, #1
 8007886:	2b03      	cmp	r3, #3
 8007888:	d869      	bhi.n	800795e <_dtoa_r+0x2c6>
 800788a:	e8df f003 	tbb	[pc, r3]
 800788e:	4e2c      	.short	0x4e2c
 8007890:	5a4c      	.short	0x5a4c
 8007892:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007896:	441d      	add	r5, r3
 8007898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800789c:	2b20      	cmp	r3, #32
 800789e:	bfc1      	itttt	gt
 80078a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80078ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078b0:	bfda      	itte	le
 80078b2:	f1c3 0320 	rsble	r3, r3, #32
 80078b6:	fa06 f003 	lslle.w	r0, r6, r3
 80078ba:	4318      	orrgt	r0, r3
 80078bc:	f7f8 fe2a 	bl	8000514 <__aeabi_ui2d>
 80078c0:	2301      	movs	r3, #1
 80078c2:	4606      	mov	r6, r0
 80078c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078c8:	3d01      	subs	r5, #1
 80078ca:	9310      	str	r3, [sp, #64]	; 0x40
 80078cc:	e771      	b.n	80077b2 <_dtoa_r+0x11a>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e7b6      	b.n	8007840 <_dtoa_r+0x1a8>
 80078d2:	900e      	str	r0, [sp, #56]	; 0x38
 80078d4:	e7b5      	b.n	8007842 <_dtoa_r+0x1aa>
 80078d6:	f1ca 0300 	rsb	r3, sl, #0
 80078da:	9306      	str	r3, [sp, #24]
 80078dc:	2300      	movs	r3, #0
 80078de:	eba8 080a 	sub.w	r8, r8, sl
 80078e2:	930d      	str	r3, [sp, #52]	; 0x34
 80078e4:	e7c2      	b.n	800786c <_dtoa_r+0x1d4>
 80078e6:	2300      	movs	r3, #0
 80078e8:	9308      	str	r3, [sp, #32]
 80078ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dc39      	bgt.n	8007964 <_dtoa_r+0x2cc>
 80078f0:	f04f 0901 	mov.w	r9, #1
 80078f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80078f8:	464b      	mov	r3, r9
 80078fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80078fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007900:	2200      	movs	r2, #0
 8007902:	6042      	str	r2, [r0, #4]
 8007904:	2204      	movs	r2, #4
 8007906:	f102 0614 	add.w	r6, r2, #20
 800790a:	429e      	cmp	r6, r3
 800790c:	6841      	ldr	r1, [r0, #4]
 800790e:	d92f      	bls.n	8007970 <_dtoa_r+0x2d8>
 8007910:	4620      	mov	r0, r4
 8007912:	f001 f849 	bl	80089a8 <_Balloc>
 8007916:	9000      	str	r0, [sp, #0]
 8007918:	2800      	cmp	r0, #0
 800791a:	d14b      	bne.n	80079b4 <_dtoa_r+0x31c>
 800791c:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <_dtoa_r+0x318>)
 800791e:	4602      	mov	r2, r0
 8007920:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007924:	e6d1      	b.n	80076ca <_dtoa_r+0x32>
 8007926:	2301      	movs	r3, #1
 8007928:	e7de      	b.n	80078e8 <_dtoa_r+0x250>
 800792a:	2300      	movs	r3, #0
 800792c:	9308      	str	r3, [sp, #32]
 800792e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007930:	eb0a 0903 	add.w	r9, sl, r3
 8007934:	f109 0301 	add.w	r3, r9, #1
 8007938:	2b01      	cmp	r3, #1
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	bfb8      	it	lt
 800793e:	2301      	movlt	r3, #1
 8007940:	e7dd      	b.n	80078fe <_dtoa_r+0x266>
 8007942:	2301      	movs	r3, #1
 8007944:	e7f2      	b.n	800792c <_dtoa_r+0x294>
 8007946:	2501      	movs	r5, #1
 8007948:	2300      	movs	r3, #0
 800794a:	9305      	str	r3, [sp, #20]
 800794c:	9508      	str	r5, [sp, #32]
 800794e:	f04f 39ff 	mov.w	r9, #4294967295
 8007952:	2200      	movs	r2, #0
 8007954:	f8cd 9004 	str.w	r9, [sp, #4]
 8007958:	2312      	movs	r3, #18
 800795a:	9209      	str	r2, [sp, #36]	; 0x24
 800795c:	e7cf      	b.n	80078fe <_dtoa_r+0x266>
 800795e:	2301      	movs	r3, #1
 8007960:	9308      	str	r3, [sp, #32]
 8007962:	e7f4      	b.n	800794e <_dtoa_r+0x2b6>
 8007964:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007968:	f8cd 9004 	str.w	r9, [sp, #4]
 800796c:	464b      	mov	r3, r9
 800796e:	e7c6      	b.n	80078fe <_dtoa_r+0x266>
 8007970:	3101      	adds	r1, #1
 8007972:	6041      	str	r1, [r0, #4]
 8007974:	0052      	lsls	r2, r2, #1
 8007976:	e7c6      	b.n	8007906 <_dtoa_r+0x26e>
 8007978:	636f4361 	.word	0x636f4361
 800797c:	3fd287a7 	.word	0x3fd287a7
 8007980:	8b60c8b3 	.word	0x8b60c8b3
 8007984:	3fc68a28 	.word	0x3fc68a28
 8007988:	509f79fb 	.word	0x509f79fb
 800798c:	3fd34413 	.word	0x3fd34413
 8007990:	0800a6f6 	.word	0x0800a6f6
 8007994:	0800a70d 	.word	0x0800a70d
 8007998:	7ff00000 	.word	0x7ff00000
 800799c:	0800a6f2 	.word	0x0800a6f2
 80079a0:	0800a6e9 	.word	0x0800a6e9
 80079a4:	0800a56d 	.word	0x0800a56d
 80079a8:	3ff80000 	.word	0x3ff80000
 80079ac:	0800a888 	.word	0x0800a888
 80079b0:	0800a76c 	.word	0x0800a76c
 80079b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079b6:	9a00      	ldr	r2, [sp, #0]
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	9b01      	ldr	r3, [sp, #4]
 80079bc:	2b0e      	cmp	r3, #14
 80079be:	f200 80ad 	bhi.w	8007b1c <_dtoa_r+0x484>
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	f000 80aa 	beq.w	8007b1c <_dtoa_r+0x484>
 80079c8:	f1ba 0f00 	cmp.w	sl, #0
 80079cc:	dd36      	ble.n	8007a3c <_dtoa_r+0x3a4>
 80079ce:	4ac3      	ldr	r2, [pc, #780]	; (8007cdc <_dtoa_r+0x644>)
 80079d0:	f00a 030f 	and.w	r3, sl, #15
 80079d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079d8:	ed93 7b00 	vldr	d7, [r3]
 80079dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80079e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80079e4:	eeb0 8a47 	vmov.f32	s16, s14
 80079e8:	eef0 8a67 	vmov.f32	s17, s15
 80079ec:	d016      	beq.n	8007a1c <_dtoa_r+0x384>
 80079ee:	4bbc      	ldr	r3, [pc, #752]	; (8007ce0 <_dtoa_r+0x648>)
 80079f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079f8:	f7f8 ff30 	bl	800085c <__aeabi_ddiv>
 80079fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a00:	f007 070f 	and.w	r7, r7, #15
 8007a04:	2503      	movs	r5, #3
 8007a06:	4eb6      	ldr	r6, [pc, #728]	; (8007ce0 <_dtoa_r+0x648>)
 8007a08:	b957      	cbnz	r7, 8007a20 <_dtoa_r+0x388>
 8007a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0e:	ec53 2b18 	vmov	r2, r3, d8
 8007a12:	f7f8 ff23 	bl	800085c <__aeabi_ddiv>
 8007a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a1a:	e029      	b.n	8007a70 <_dtoa_r+0x3d8>
 8007a1c:	2502      	movs	r5, #2
 8007a1e:	e7f2      	b.n	8007a06 <_dtoa_r+0x36e>
 8007a20:	07f9      	lsls	r1, r7, #31
 8007a22:	d508      	bpl.n	8007a36 <_dtoa_r+0x39e>
 8007a24:	ec51 0b18 	vmov	r0, r1, d8
 8007a28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a2c:	f7f8 fdec 	bl	8000608 <__aeabi_dmul>
 8007a30:	ec41 0b18 	vmov	d8, r0, r1
 8007a34:	3501      	adds	r5, #1
 8007a36:	107f      	asrs	r7, r7, #1
 8007a38:	3608      	adds	r6, #8
 8007a3a:	e7e5      	b.n	8007a08 <_dtoa_r+0x370>
 8007a3c:	f000 80a6 	beq.w	8007b8c <_dtoa_r+0x4f4>
 8007a40:	f1ca 0600 	rsb	r6, sl, #0
 8007a44:	4ba5      	ldr	r3, [pc, #660]	; (8007cdc <_dtoa_r+0x644>)
 8007a46:	4fa6      	ldr	r7, [pc, #664]	; (8007ce0 <_dtoa_r+0x648>)
 8007a48:	f006 020f 	and.w	r2, r6, #15
 8007a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a58:	f7f8 fdd6 	bl	8000608 <__aeabi_dmul>
 8007a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a60:	1136      	asrs	r6, r6, #4
 8007a62:	2300      	movs	r3, #0
 8007a64:	2502      	movs	r5, #2
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	f040 8085 	bne.w	8007b76 <_dtoa_r+0x4de>
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1d2      	bne.n	8007a16 <_dtoa_r+0x37e>
 8007a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 808c 	beq.w	8007b90 <_dtoa_r+0x4f8>
 8007a78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007a7c:	4b99      	ldr	r3, [pc, #612]	; (8007ce4 <_dtoa_r+0x64c>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	4630      	mov	r0, r6
 8007a82:	4639      	mov	r1, r7
 8007a84:	f7f9 f832 	bl	8000aec <__aeabi_dcmplt>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	f000 8081 	beq.w	8007b90 <_dtoa_r+0x4f8>
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d07d      	beq.n	8007b90 <_dtoa_r+0x4f8>
 8007a94:	f1b9 0f00 	cmp.w	r9, #0
 8007a98:	dd3c      	ble.n	8007b14 <_dtoa_r+0x47c>
 8007a9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a9e:	9307      	str	r3, [sp, #28]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4b91      	ldr	r3, [pc, #580]	; (8007ce8 <_dtoa_r+0x650>)
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	f7f8 fdae 	bl	8000608 <__aeabi_dmul>
 8007aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab0:	3501      	adds	r5, #1
 8007ab2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007ab6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007aba:	4628      	mov	r0, r5
 8007abc:	f7f8 fd3a 	bl	8000534 <__aeabi_i2d>
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	463b      	mov	r3, r7
 8007ac4:	f7f8 fda0 	bl	8000608 <__aeabi_dmul>
 8007ac8:	4b88      	ldr	r3, [pc, #544]	; (8007cec <_dtoa_r+0x654>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	f7f8 fbe6 	bl	800029c <__adddf3>
 8007ad0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad8:	9303      	str	r3, [sp, #12]
 8007ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d15c      	bne.n	8007b9a <_dtoa_r+0x502>
 8007ae0:	4b83      	ldr	r3, [pc, #524]	; (8007cf0 <_dtoa_r+0x658>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	4639      	mov	r1, r7
 8007ae8:	f7f8 fbd6 	bl	8000298 <__aeabi_dsub>
 8007aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007af0:	4606      	mov	r6, r0
 8007af2:	460f      	mov	r7, r1
 8007af4:	f7f9 f818 	bl	8000b28 <__aeabi_dcmpgt>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	f040 8296 	bne.w	800802a <_dtoa_r+0x992>
 8007afe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b02:	4630      	mov	r0, r6
 8007b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b08:	4639      	mov	r1, r7
 8007b0a:	f7f8 ffef 	bl	8000aec <__aeabi_dcmplt>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f040 8288 	bne.w	8008024 <_dtoa_r+0x98c>
 8007b14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f2c0 8158 	blt.w	8007dd4 <_dtoa_r+0x73c>
 8007b24:	f1ba 0f0e 	cmp.w	sl, #14
 8007b28:	f300 8154 	bgt.w	8007dd4 <_dtoa_r+0x73c>
 8007b2c:	4b6b      	ldr	r3, [pc, #428]	; (8007cdc <_dtoa_r+0x644>)
 8007b2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f280 80e3 	bge.w	8007d04 <_dtoa_r+0x66c>
 8007b3e:	9b01      	ldr	r3, [sp, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f300 80df 	bgt.w	8007d04 <_dtoa_r+0x66c>
 8007b46:	f040 826d 	bne.w	8008024 <_dtoa_r+0x98c>
 8007b4a:	4b69      	ldr	r3, [pc, #420]	; (8007cf0 <_dtoa_r+0x658>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4640      	mov	r0, r8
 8007b50:	4649      	mov	r1, r9
 8007b52:	f7f8 fd59 	bl	8000608 <__aeabi_dmul>
 8007b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b5a:	f7f8 ffdb 	bl	8000b14 <__aeabi_dcmpge>
 8007b5e:	9e01      	ldr	r6, [sp, #4]
 8007b60:	4637      	mov	r7, r6
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f040 8243 	bne.w	8007fee <_dtoa_r+0x956>
 8007b68:	9d00      	ldr	r5, [sp, #0]
 8007b6a:	2331      	movs	r3, #49	; 0x31
 8007b6c:	f805 3b01 	strb.w	r3, [r5], #1
 8007b70:	f10a 0a01 	add.w	sl, sl, #1
 8007b74:	e23f      	b.n	8007ff6 <_dtoa_r+0x95e>
 8007b76:	07f2      	lsls	r2, r6, #31
 8007b78:	d505      	bpl.n	8007b86 <_dtoa_r+0x4ee>
 8007b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b7e:	f7f8 fd43 	bl	8000608 <__aeabi_dmul>
 8007b82:	3501      	adds	r5, #1
 8007b84:	2301      	movs	r3, #1
 8007b86:	1076      	asrs	r6, r6, #1
 8007b88:	3708      	adds	r7, #8
 8007b8a:	e76c      	b.n	8007a66 <_dtoa_r+0x3ce>
 8007b8c:	2502      	movs	r5, #2
 8007b8e:	e76f      	b.n	8007a70 <_dtoa_r+0x3d8>
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	f8cd a01c 	str.w	sl, [sp, #28]
 8007b96:	930c      	str	r3, [sp, #48]	; 0x30
 8007b98:	e78d      	b.n	8007ab6 <_dtoa_r+0x41e>
 8007b9a:	9900      	ldr	r1, [sp, #0]
 8007b9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba0:	4b4e      	ldr	r3, [pc, #312]	; (8007cdc <_dtoa_r+0x644>)
 8007ba2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ba6:	4401      	add	r1, r0
 8007ba8:	9102      	str	r1, [sp, #8]
 8007baa:	9908      	ldr	r1, [sp, #32]
 8007bac:	eeb0 8a47 	vmov.f32	s16, s14
 8007bb0:	eef0 8a67 	vmov.f32	s17, s15
 8007bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d045      	beq.n	8007c4c <_dtoa_r+0x5b4>
 8007bc0:	494c      	ldr	r1, [pc, #304]	; (8007cf4 <_dtoa_r+0x65c>)
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	f7f8 fe4a 	bl	800085c <__aeabi_ddiv>
 8007bc8:	ec53 2b18 	vmov	r2, r3, d8
 8007bcc:	f7f8 fb64 	bl	8000298 <__aeabi_dsub>
 8007bd0:	9d00      	ldr	r5, [sp, #0]
 8007bd2:	ec41 0b18 	vmov	d8, r0, r1
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7f8 ffc5 	bl	8000b68 <__aeabi_d2iz>
 8007bde:	900c      	str	r0, [sp, #48]	; 0x30
 8007be0:	f7f8 fca8 	bl	8000534 <__aeabi_i2d>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 fb54 	bl	8000298 <__aeabi_dsub>
 8007bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bf2:	3330      	adds	r3, #48	; 0x30
 8007bf4:	f805 3b01 	strb.w	r3, [r5], #1
 8007bf8:	ec53 2b18 	vmov	r2, r3, d8
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	460f      	mov	r7, r1
 8007c00:	f7f8 ff74 	bl	8000aec <__aeabi_dcmplt>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d165      	bne.n	8007cd4 <_dtoa_r+0x63c>
 8007c08:	4632      	mov	r2, r6
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	4935      	ldr	r1, [pc, #212]	; (8007ce4 <_dtoa_r+0x64c>)
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f7f8 fb42 	bl	8000298 <__aeabi_dsub>
 8007c14:	ec53 2b18 	vmov	r2, r3, d8
 8007c18:	f7f8 ff68 	bl	8000aec <__aeabi_dcmplt>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 80b9 	bne.w	8007d94 <_dtoa_r+0x6fc>
 8007c22:	9b02      	ldr	r3, [sp, #8]
 8007c24:	429d      	cmp	r5, r3
 8007c26:	f43f af75 	beq.w	8007b14 <_dtoa_r+0x47c>
 8007c2a:	4b2f      	ldr	r3, [pc, #188]	; (8007ce8 <_dtoa_r+0x650>)
 8007c2c:	ec51 0b18 	vmov	r0, r1, d8
 8007c30:	2200      	movs	r2, #0
 8007c32:	f7f8 fce9 	bl	8000608 <__aeabi_dmul>
 8007c36:	4b2c      	ldr	r3, [pc, #176]	; (8007ce8 <_dtoa_r+0x650>)
 8007c38:	ec41 0b18 	vmov	d8, r0, r1
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4630      	mov	r0, r6
 8007c40:	4639      	mov	r1, r7
 8007c42:	f7f8 fce1 	bl	8000608 <__aeabi_dmul>
 8007c46:	4606      	mov	r6, r0
 8007c48:	460f      	mov	r7, r1
 8007c4a:	e7c4      	b.n	8007bd6 <_dtoa_r+0x53e>
 8007c4c:	ec51 0b17 	vmov	r0, r1, d7
 8007c50:	f7f8 fcda 	bl	8000608 <__aeabi_dmul>
 8007c54:	9b02      	ldr	r3, [sp, #8]
 8007c56:	9d00      	ldr	r5, [sp, #0]
 8007c58:	930c      	str	r3, [sp, #48]	; 0x30
 8007c5a:	ec41 0b18 	vmov	d8, r0, r1
 8007c5e:	4639      	mov	r1, r7
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7f8 ff81 	bl	8000b68 <__aeabi_d2iz>
 8007c66:	9011      	str	r0, [sp, #68]	; 0x44
 8007c68:	f7f8 fc64 	bl	8000534 <__aeabi_i2d>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 fb10 	bl	8000298 <__aeabi_dsub>
 8007c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c7a:	3330      	adds	r3, #48	; 0x30
 8007c7c:	f805 3b01 	strb.w	r3, [r5], #1
 8007c80:	9b02      	ldr	r3, [sp, #8]
 8007c82:	429d      	cmp	r5, r3
 8007c84:	4606      	mov	r6, r0
 8007c86:	460f      	mov	r7, r1
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	d134      	bne.n	8007cf8 <_dtoa_r+0x660>
 8007c8e:	4b19      	ldr	r3, [pc, #100]	; (8007cf4 <_dtoa_r+0x65c>)
 8007c90:	ec51 0b18 	vmov	r0, r1, d8
 8007c94:	f7f8 fb02 	bl	800029c <__adddf3>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 ff42 	bl	8000b28 <__aeabi_dcmpgt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d175      	bne.n	8007d94 <_dtoa_r+0x6fc>
 8007ca8:	ec53 2b18 	vmov	r2, r3, d8
 8007cac:	4911      	ldr	r1, [pc, #68]	; (8007cf4 <_dtoa_r+0x65c>)
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f7f8 faf2 	bl	8000298 <__aeabi_dsub>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 ff16 	bl	8000aec <__aeabi_dcmplt>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	f43f af27 	beq.w	8007b14 <_dtoa_r+0x47c>
 8007cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cc8:	1e6b      	subs	r3, r5, #1
 8007cca:	930c      	str	r3, [sp, #48]	; 0x30
 8007ccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cd0:	2b30      	cmp	r3, #48	; 0x30
 8007cd2:	d0f8      	beq.n	8007cc6 <_dtoa_r+0x62e>
 8007cd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007cd8:	e04a      	b.n	8007d70 <_dtoa_r+0x6d8>
 8007cda:	bf00      	nop
 8007cdc:	0800a888 	.word	0x0800a888
 8007ce0:	0800a860 	.word	0x0800a860
 8007ce4:	3ff00000 	.word	0x3ff00000
 8007ce8:	40240000 	.word	0x40240000
 8007cec:	401c0000 	.word	0x401c0000
 8007cf0:	40140000 	.word	0x40140000
 8007cf4:	3fe00000 	.word	0x3fe00000
 8007cf8:	4baf      	ldr	r3, [pc, #700]	; (8007fb8 <_dtoa_r+0x920>)
 8007cfa:	f7f8 fc85 	bl	8000608 <__aeabi_dmul>
 8007cfe:	4606      	mov	r6, r0
 8007d00:	460f      	mov	r7, r1
 8007d02:	e7ac      	b.n	8007c5e <_dtoa_r+0x5c6>
 8007d04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d08:	9d00      	ldr	r5, [sp, #0]
 8007d0a:	4642      	mov	r2, r8
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	4630      	mov	r0, r6
 8007d10:	4639      	mov	r1, r7
 8007d12:	f7f8 fda3 	bl	800085c <__aeabi_ddiv>
 8007d16:	f7f8 ff27 	bl	8000b68 <__aeabi_d2iz>
 8007d1a:	9002      	str	r0, [sp, #8]
 8007d1c:	f7f8 fc0a 	bl	8000534 <__aeabi_i2d>
 8007d20:	4642      	mov	r2, r8
 8007d22:	464b      	mov	r3, r9
 8007d24:	f7f8 fc70 	bl	8000608 <__aeabi_dmul>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f7f8 fab2 	bl	8000298 <__aeabi_dsub>
 8007d34:	9e02      	ldr	r6, [sp, #8]
 8007d36:	9f01      	ldr	r7, [sp, #4]
 8007d38:	3630      	adds	r6, #48	; 0x30
 8007d3a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d3e:	9e00      	ldr	r6, [sp, #0]
 8007d40:	1bae      	subs	r6, r5, r6
 8007d42:	42b7      	cmp	r7, r6
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	d137      	bne.n	8007dba <_dtoa_r+0x722>
 8007d4a:	f7f8 faa7 	bl	800029c <__adddf3>
 8007d4e:	4642      	mov	r2, r8
 8007d50:	464b      	mov	r3, r9
 8007d52:	4606      	mov	r6, r0
 8007d54:	460f      	mov	r7, r1
 8007d56:	f7f8 fee7 	bl	8000b28 <__aeabi_dcmpgt>
 8007d5a:	b9c8      	cbnz	r0, 8007d90 <_dtoa_r+0x6f8>
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d68:	b110      	cbz	r0, 8007d70 <_dtoa_r+0x6d8>
 8007d6a:	9b02      	ldr	r3, [sp, #8]
 8007d6c:	07d9      	lsls	r1, r3, #31
 8007d6e:	d40f      	bmi.n	8007d90 <_dtoa_r+0x6f8>
 8007d70:	4620      	mov	r0, r4
 8007d72:	4659      	mov	r1, fp
 8007d74:	f000 fe58 	bl	8008a28 <_Bfree>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	702b      	strb	r3, [r5, #0]
 8007d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d7e:	f10a 0001 	add.w	r0, sl, #1
 8007d82:	6018      	str	r0, [r3, #0]
 8007d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f43f acd8 	beq.w	800773c <_dtoa_r+0xa4>
 8007d8c:	601d      	str	r5, [r3, #0]
 8007d8e:	e4d5      	b.n	800773c <_dtoa_r+0xa4>
 8007d90:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d94:	462b      	mov	r3, r5
 8007d96:	461d      	mov	r5, r3
 8007d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d9c:	2a39      	cmp	r2, #57	; 0x39
 8007d9e:	d108      	bne.n	8007db2 <_dtoa_r+0x71a>
 8007da0:	9a00      	ldr	r2, [sp, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d1f7      	bne.n	8007d96 <_dtoa_r+0x6fe>
 8007da6:	9a07      	ldr	r2, [sp, #28]
 8007da8:	9900      	ldr	r1, [sp, #0]
 8007daa:	3201      	adds	r2, #1
 8007dac:	9207      	str	r2, [sp, #28]
 8007dae:	2230      	movs	r2, #48	; 0x30
 8007db0:	700a      	strb	r2, [r1, #0]
 8007db2:	781a      	ldrb	r2, [r3, #0]
 8007db4:	3201      	adds	r2, #1
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e78c      	b.n	8007cd4 <_dtoa_r+0x63c>
 8007dba:	4b7f      	ldr	r3, [pc, #508]	; (8007fb8 <_dtoa_r+0x920>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f7f8 fc23 	bl	8000608 <__aeabi_dmul>
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	460f      	mov	r7, r1
 8007dca:	f7f8 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d09b      	beq.n	8007d0a <_dtoa_r+0x672>
 8007dd2:	e7cd      	b.n	8007d70 <_dtoa_r+0x6d8>
 8007dd4:	9a08      	ldr	r2, [sp, #32]
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	f000 80c4 	beq.w	8007f64 <_dtoa_r+0x8cc>
 8007ddc:	9a05      	ldr	r2, [sp, #20]
 8007dde:	2a01      	cmp	r2, #1
 8007de0:	f300 80a8 	bgt.w	8007f34 <_dtoa_r+0x89c>
 8007de4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	f000 80a0 	beq.w	8007f2c <_dtoa_r+0x894>
 8007dec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007df0:	9e06      	ldr	r6, [sp, #24]
 8007df2:	4645      	mov	r5, r8
 8007df4:	9a04      	ldr	r2, [sp, #16]
 8007df6:	2101      	movs	r1, #1
 8007df8:	441a      	add	r2, r3
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4498      	add	r8, r3
 8007dfe:	9204      	str	r2, [sp, #16]
 8007e00:	f000 ff18 	bl	8008c34 <__i2b>
 8007e04:	4607      	mov	r7, r0
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	dd0b      	ble.n	8007e22 <_dtoa_r+0x78a>
 8007e0a:	9b04      	ldr	r3, [sp, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	dd08      	ble.n	8007e22 <_dtoa_r+0x78a>
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	9a04      	ldr	r2, [sp, #16]
 8007e14:	bfa8      	it	ge
 8007e16:	462b      	movge	r3, r5
 8007e18:	eba8 0803 	sub.w	r8, r8, r3
 8007e1c:	1aed      	subs	r5, r5, r3
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	9304      	str	r3, [sp, #16]
 8007e22:	9b06      	ldr	r3, [sp, #24]
 8007e24:	b1fb      	cbz	r3, 8007e66 <_dtoa_r+0x7ce>
 8007e26:	9b08      	ldr	r3, [sp, #32]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 809f 	beq.w	8007f6c <_dtoa_r+0x8d4>
 8007e2e:	2e00      	cmp	r6, #0
 8007e30:	dd11      	ble.n	8007e56 <_dtoa_r+0x7be>
 8007e32:	4639      	mov	r1, r7
 8007e34:	4632      	mov	r2, r6
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 ffb8 	bl	8008dac <__pow5mult>
 8007e3c:	465a      	mov	r2, fp
 8007e3e:	4601      	mov	r1, r0
 8007e40:	4607      	mov	r7, r0
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 ff0c 	bl	8008c60 <__multiply>
 8007e48:	4659      	mov	r1, fp
 8007e4a:	9007      	str	r0, [sp, #28]
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fdeb 	bl	8008a28 <_Bfree>
 8007e52:	9b07      	ldr	r3, [sp, #28]
 8007e54:	469b      	mov	fp, r3
 8007e56:	9b06      	ldr	r3, [sp, #24]
 8007e58:	1b9a      	subs	r2, r3, r6
 8007e5a:	d004      	beq.n	8007e66 <_dtoa_r+0x7ce>
 8007e5c:	4659      	mov	r1, fp
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 ffa4 	bl	8008dac <__pow5mult>
 8007e64:	4683      	mov	fp, r0
 8007e66:	2101      	movs	r1, #1
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fee3 	bl	8008c34 <__i2b>
 8007e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	4606      	mov	r6, r0
 8007e74:	dd7c      	ble.n	8007f70 <_dtoa_r+0x8d8>
 8007e76:	461a      	mov	r2, r3
 8007e78:	4601      	mov	r1, r0
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 ff96 	bl	8008dac <__pow5mult>
 8007e80:	9b05      	ldr	r3, [sp, #20]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	4606      	mov	r6, r0
 8007e86:	dd76      	ble.n	8007f76 <_dtoa_r+0x8de>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9306      	str	r3, [sp, #24]
 8007e8c:	6933      	ldr	r3, [r6, #16]
 8007e8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e92:	6918      	ldr	r0, [r3, #16]
 8007e94:	f000 fe7e 	bl	8008b94 <__hi0bits>
 8007e98:	f1c0 0020 	rsb	r0, r0, #32
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	4418      	add	r0, r3
 8007ea0:	f010 001f 	ands.w	r0, r0, #31
 8007ea4:	f000 8086 	beq.w	8007fb4 <_dtoa_r+0x91c>
 8007ea8:	f1c0 0320 	rsb	r3, r0, #32
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	dd7f      	ble.n	8007fb0 <_dtoa_r+0x918>
 8007eb0:	f1c0 001c 	rsb	r0, r0, #28
 8007eb4:	9b04      	ldr	r3, [sp, #16]
 8007eb6:	4403      	add	r3, r0
 8007eb8:	4480      	add	r8, r0
 8007eba:	4405      	add	r5, r0
 8007ebc:	9304      	str	r3, [sp, #16]
 8007ebe:	f1b8 0f00 	cmp.w	r8, #0
 8007ec2:	dd05      	ble.n	8007ed0 <_dtoa_r+0x838>
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	4642      	mov	r2, r8
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 ffc9 	bl	8008e60 <__lshift>
 8007ece:	4683      	mov	fp, r0
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd05      	ble.n	8007ee2 <_dtoa_r+0x84a>
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 ffc0 	bl	8008e60 <__lshift>
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d069      	beq.n	8007fbc <_dtoa_r+0x924>
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4658      	mov	r0, fp
 8007eec:	f001 f824 	bl	8008f38 <__mcmp>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	da63      	bge.n	8007fbc <_dtoa_r+0x924>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4659      	mov	r1, fp
 8007ef8:	220a      	movs	r2, #10
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 fdb6 	bl	8008a6c <__multadd>
 8007f00:	9b08      	ldr	r3, [sp, #32]
 8007f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f06:	4683      	mov	fp, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 818f 	beq.w	800822c <_dtoa_r+0xb94>
 8007f0e:	4639      	mov	r1, r7
 8007f10:	2300      	movs	r3, #0
 8007f12:	220a      	movs	r2, #10
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fda9 	bl	8008a6c <__multadd>
 8007f1a:	f1b9 0f00 	cmp.w	r9, #0
 8007f1e:	4607      	mov	r7, r0
 8007f20:	f300 808e 	bgt.w	8008040 <_dtoa_r+0x9a8>
 8007f24:	9b05      	ldr	r3, [sp, #20]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	dc50      	bgt.n	8007fcc <_dtoa_r+0x934>
 8007f2a:	e089      	b.n	8008040 <_dtoa_r+0x9a8>
 8007f2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f32:	e75d      	b.n	8007df0 <_dtoa_r+0x758>
 8007f34:	9b01      	ldr	r3, [sp, #4]
 8007f36:	1e5e      	subs	r6, r3, #1
 8007f38:	9b06      	ldr	r3, [sp, #24]
 8007f3a:	42b3      	cmp	r3, r6
 8007f3c:	bfbf      	itttt	lt
 8007f3e:	9b06      	ldrlt	r3, [sp, #24]
 8007f40:	9606      	strlt	r6, [sp, #24]
 8007f42:	1af2      	sublt	r2, r6, r3
 8007f44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007f46:	bfb6      	itet	lt
 8007f48:	189b      	addlt	r3, r3, r2
 8007f4a:	1b9e      	subge	r6, r3, r6
 8007f4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	bfb8      	it	lt
 8007f52:	2600      	movlt	r6, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bfb5      	itete	lt
 8007f58:	eba8 0503 	sublt.w	r5, r8, r3
 8007f5c:	9b01      	ldrge	r3, [sp, #4]
 8007f5e:	2300      	movlt	r3, #0
 8007f60:	4645      	movge	r5, r8
 8007f62:	e747      	b.n	8007df4 <_dtoa_r+0x75c>
 8007f64:	9e06      	ldr	r6, [sp, #24]
 8007f66:	9f08      	ldr	r7, [sp, #32]
 8007f68:	4645      	mov	r5, r8
 8007f6a:	e74c      	b.n	8007e06 <_dtoa_r+0x76e>
 8007f6c:	9a06      	ldr	r2, [sp, #24]
 8007f6e:	e775      	b.n	8007e5c <_dtoa_r+0x7c4>
 8007f70:	9b05      	ldr	r3, [sp, #20]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	dc18      	bgt.n	8007fa8 <_dtoa_r+0x910>
 8007f76:	9b02      	ldr	r3, [sp, #8]
 8007f78:	b9b3      	cbnz	r3, 8007fa8 <_dtoa_r+0x910>
 8007f7a:	9b03      	ldr	r3, [sp, #12]
 8007f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f80:	b9a3      	cbnz	r3, 8007fac <_dtoa_r+0x914>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f88:	0d1b      	lsrs	r3, r3, #20
 8007f8a:	051b      	lsls	r3, r3, #20
 8007f8c:	b12b      	cbz	r3, 8007f9a <_dtoa_r+0x902>
 8007f8e:	9b04      	ldr	r3, [sp, #16]
 8007f90:	3301      	adds	r3, #1
 8007f92:	9304      	str	r3, [sp, #16]
 8007f94:	f108 0801 	add.w	r8, r8, #1
 8007f98:	2301      	movs	r3, #1
 8007f9a:	9306      	str	r3, [sp, #24]
 8007f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f47f af74 	bne.w	8007e8c <_dtoa_r+0x7f4>
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	e779      	b.n	8007e9c <_dtoa_r+0x804>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e7f6      	b.n	8007f9a <_dtoa_r+0x902>
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	e7f4      	b.n	8007f9a <_dtoa_r+0x902>
 8007fb0:	d085      	beq.n	8007ebe <_dtoa_r+0x826>
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	301c      	adds	r0, #28
 8007fb6:	e77d      	b.n	8007eb4 <_dtoa_r+0x81c>
 8007fb8:	40240000 	.word	0x40240000
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dc38      	bgt.n	8008034 <_dtoa_r+0x99c>
 8007fc2:	9b05      	ldr	r3, [sp, #20]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	dd35      	ble.n	8008034 <_dtoa_r+0x99c>
 8007fc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007fcc:	f1b9 0f00 	cmp.w	r9, #0
 8007fd0:	d10d      	bne.n	8007fee <_dtoa_r+0x956>
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	464b      	mov	r3, r9
 8007fd6:	2205      	movs	r2, #5
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 fd47 	bl	8008a6c <__multadd>
 8007fde:	4601      	mov	r1, r0
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	4658      	mov	r0, fp
 8007fe4:	f000 ffa8 	bl	8008f38 <__mcmp>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	f73f adbd 	bgt.w	8007b68 <_dtoa_r+0x4d0>
 8007fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff0:	9d00      	ldr	r5, [sp, #0]
 8007ff2:	ea6f 0a03 	mvn.w	sl, r3
 8007ff6:	f04f 0800 	mov.w	r8, #0
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 fd13 	bl	8008a28 <_Bfree>
 8008002:	2f00      	cmp	r7, #0
 8008004:	f43f aeb4 	beq.w	8007d70 <_dtoa_r+0x6d8>
 8008008:	f1b8 0f00 	cmp.w	r8, #0
 800800c:	d005      	beq.n	800801a <_dtoa_r+0x982>
 800800e:	45b8      	cmp	r8, r7
 8008010:	d003      	beq.n	800801a <_dtoa_r+0x982>
 8008012:	4641      	mov	r1, r8
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fd07 	bl	8008a28 <_Bfree>
 800801a:	4639      	mov	r1, r7
 800801c:	4620      	mov	r0, r4
 800801e:	f000 fd03 	bl	8008a28 <_Bfree>
 8008022:	e6a5      	b.n	8007d70 <_dtoa_r+0x6d8>
 8008024:	2600      	movs	r6, #0
 8008026:	4637      	mov	r7, r6
 8008028:	e7e1      	b.n	8007fee <_dtoa_r+0x956>
 800802a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800802c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008030:	4637      	mov	r7, r6
 8008032:	e599      	b.n	8007b68 <_dtoa_r+0x4d0>
 8008034:	9b08      	ldr	r3, [sp, #32]
 8008036:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 80fd 	beq.w	800823a <_dtoa_r+0xba2>
 8008040:	2d00      	cmp	r5, #0
 8008042:	dd05      	ble.n	8008050 <_dtoa_r+0x9b8>
 8008044:	4639      	mov	r1, r7
 8008046:	462a      	mov	r2, r5
 8008048:	4620      	mov	r0, r4
 800804a:	f000 ff09 	bl	8008e60 <__lshift>
 800804e:	4607      	mov	r7, r0
 8008050:	9b06      	ldr	r3, [sp, #24]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d05c      	beq.n	8008110 <_dtoa_r+0xa78>
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fca5 	bl	80089a8 <_Balloc>
 800805e:	4605      	mov	r5, r0
 8008060:	b928      	cbnz	r0, 800806e <_dtoa_r+0x9d6>
 8008062:	4b80      	ldr	r3, [pc, #512]	; (8008264 <_dtoa_r+0xbcc>)
 8008064:	4602      	mov	r2, r0
 8008066:	f240 21ea 	movw	r1, #746	; 0x2ea
 800806a:	f7ff bb2e 	b.w	80076ca <_dtoa_r+0x32>
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	3202      	adds	r2, #2
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	f107 010c 	add.w	r1, r7, #12
 8008078:	300c      	adds	r0, #12
 800807a:	f000 fc87 	bl	800898c <memcpy>
 800807e:	2201      	movs	r2, #1
 8008080:	4629      	mov	r1, r5
 8008082:	4620      	mov	r0, r4
 8008084:	f000 feec 	bl	8008e60 <__lshift>
 8008088:	9b00      	ldr	r3, [sp, #0]
 800808a:	3301      	adds	r3, #1
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	9b00      	ldr	r3, [sp, #0]
 8008090:	444b      	add	r3, r9
 8008092:	9307      	str	r3, [sp, #28]
 8008094:	9b02      	ldr	r3, [sp, #8]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	46b8      	mov	r8, r7
 800809c:	9306      	str	r3, [sp, #24]
 800809e:	4607      	mov	r7, r0
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	4631      	mov	r1, r6
 80080a4:	3b01      	subs	r3, #1
 80080a6:	4658      	mov	r0, fp
 80080a8:	9302      	str	r3, [sp, #8]
 80080aa:	f7ff fa67 	bl	800757c <quorem>
 80080ae:	4603      	mov	r3, r0
 80080b0:	3330      	adds	r3, #48	; 0x30
 80080b2:	9004      	str	r0, [sp, #16]
 80080b4:	4641      	mov	r1, r8
 80080b6:	4658      	mov	r0, fp
 80080b8:	9308      	str	r3, [sp, #32]
 80080ba:	f000 ff3d 	bl	8008f38 <__mcmp>
 80080be:	463a      	mov	r2, r7
 80080c0:	4681      	mov	r9, r0
 80080c2:	4631      	mov	r1, r6
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 ff53 	bl	8008f70 <__mdiff>
 80080ca:	68c2      	ldr	r2, [r0, #12]
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	4605      	mov	r5, r0
 80080d0:	bb02      	cbnz	r2, 8008114 <_dtoa_r+0xa7c>
 80080d2:	4601      	mov	r1, r0
 80080d4:	4658      	mov	r0, fp
 80080d6:	f000 ff2f 	bl	8008f38 <__mcmp>
 80080da:	9b08      	ldr	r3, [sp, #32]
 80080dc:	4602      	mov	r2, r0
 80080de:	4629      	mov	r1, r5
 80080e0:	4620      	mov	r0, r4
 80080e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80080e6:	f000 fc9f 	bl	8008a28 <_Bfree>
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ee:	9d01      	ldr	r5, [sp, #4]
 80080f0:	ea43 0102 	orr.w	r1, r3, r2
 80080f4:	9b06      	ldr	r3, [sp, #24]
 80080f6:	430b      	orrs	r3, r1
 80080f8:	9b08      	ldr	r3, [sp, #32]
 80080fa:	d10d      	bne.n	8008118 <_dtoa_r+0xa80>
 80080fc:	2b39      	cmp	r3, #57	; 0x39
 80080fe:	d029      	beq.n	8008154 <_dtoa_r+0xabc>
 8008100:	f1b9 0f00 	cmp.w	r9, #0
 8008104:	dd01      	ble.n	800810a <_dtoa_r+0xa72>
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	3331      	adds	r3, #49	; 0x31
 800810a:	9a02      	ldr	r2, [sp, #8]
 800810c:	7013      	strb	r3, [r2, #0]
 800810e:	e774      	b.n	8007ffa <_dtoa_r+0x962>
 8008110:	4638      	mov	r0, r7
 8008112:	e7b9      	b.n	8008088 <_dtoa_r+0x9f0>
 8008114:	2201      	movs	r2, #1
 8008116:	e7e2      	b.n	80080de <_dtoa_r+0xa46>
 8008118:	f1b9 0f00 	cmp.w	r9, #0
 800811c:	db06      	blt.n	800812c <_dtoa_r+0xa94>
 800811e:	9905      	ldr	r1, [sp, #20]
 8008120:	ea41 0909 	orr.w	r9, r1, r9
 8008124:	9906      	ldr	r1, [sp, #24]
 8008126:	ea59 0101 	orrs.w	r1, r9, r1
 800812a:	d120      	bne.n	800816e <_dtoa_r+0xad6>
 800812c:	2a00      	cmp	r2, #0
 800812e:	ddec      	ble.n	800810a <_dtoa_r+0xa72>
 8008130:	4659      	mov	r1, fp
 8008132:	2201      	movs	r2, #1
 8008134:	4620      	mov	r0, r4
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	f000 fe92 	bl	8008e60 <__lshift>
 800813c:	4631      	mov	r1, r6
 800813e:	4683      	mov	fp, r0
 8008140:	f000 fefa 	bl	8008f38 <__mcmp>
 8008144:	2800      	cmp	r0, #0
 8008146:	9b01      	ldr	r3, [sp, #4]
 8008148:	dc02      	bgt.n	8008150 <_dtoa_r+0xab8>
 800814a:	d1de      	bne.n	800810a <_dtoa_r+0xa72>
 800814c:	07da      	lsls	r2, r3, #31
 800814e:	d5dc      	bpl.n	800810a <_dtoa_r+0xa72>
 8008150:	2b39      	cmp	r3, #57	; 0x39
 8008152:	d1d8      	bne.n	8008106 <_dtoa_r+0xa6e>
 8008154:	9a02      	ldr	r2, [sp, #8]
 8008156:	2339      	movs	r3, #57	; 0x39
 8008158:	7013      	strb	r3, [r2, #0]
 800815a:	462b      	mov	r3, r5
 800815c:	461d      	mov	r5, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008164:	2a39      	cmp	r2, #57	; 0x39
 8008166:	d050      	beq.n	800820a <_dtoa_r+0xb72>
 8008168:	3201      	adds	r2, #1
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	e745      	b.n	8007ffa <_dtoa_r+0x962>
 800816e:	2a00      	cmp	r2, #0
 8008170:	dd03      	ble.n	800817a <_dtoa_r+0xae2>
 8008172:	2b39      	cmp	r3, #57	; 0x39
 8008174:	d0ee      	beq.n	8008154 <_dtoa_r+0xabc>
 8008176:	3301      	adds	r3, #1
 8008178:	e7c7      	b.n	800810a <_dtoa_r+0xa72>
 800817a:	9a01      	ldr	r2, [sp, #4]
 800817c:	9907      	ldr	r1, [sp, #28]
 800817e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008182:	428a      	cmp	r2, r1
 8008184:	d02a      	beq.n	80081dc <_dtoa_r+0xb44>
 8008186:	4659      	mov	r1, fp
 8008188:	2300      	movs	r3, #0
 800818a:	220a      	movs	r2, #10
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fc6d 	bl	8008a6c <__multadd>
 8008192:	45b8      	cmp	r8, r7
 8008194:	4683      	mov	fp, r0
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	f04f 020a 	mov.w	r2, #10
 800819e:	4641      	mov	r1, r8
 80081a0:	4620      	mov	r0, r4
 80081a2:	d107      	bne.n	80081b4 <_dtoa_r+0xb1c>
 80081a4:	f000 fc62 	bl	8008a6c <__multadd>
 80081a8:	4680      	mov	r8, r0
 80081aa:	4607      	mov	r7, r0
 80081ac:	9b01      	ldr	r3, [sp, #4]
 80081ae:	3301      	adds	r3, #1
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	e775      	b.n	80080a0 <_dtoa_r+0xa08>
 80081b4:	f000 fc5a 	bl	8008a6c <__multadd>
 80081b8:	4639      	mov	r1, r7
 80081ba:	4680      	mov	r8, r0
 80081bc:	2300      	movs	r3, #0
 80081be:	220a      	movs	r2, #10
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fc53 	bl	8008a6c <__multadd>
 80081c6:	4607      	mov	r7, r0
 80081c8:	e7f0      	b.n	80081ac <_dtoa_r+0xb14>
 80081ca:	f1b9 0f00 	cmp.w	r9, #0
 80081ce:	9a00      	ldr	r2, [sp, #0]
 80081d0:	bfcc      	ite	gt
 80081d2:	464d      	movgt	r5, r9
 80081d4:	2501      	movle	r5, #1
 80081d6:	4415      	add	r5, r2
 80081d8:	f04f 0800 	mov.w	r8, #0
 80081dc:	4659      	mov	r1, fp
 80081de:	2201      	movs	r2, #1
 80081e0:	4620      	mov	r0, r4
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	f000 fe3c 	bl	8008e60 <__lshift>
 80081e8:	4631      	mov	r1, r6
 80081ea:	4683      	mov	fp, r0
 80081ec:	f000 fea4 	bl	8008f38 <__mcmp>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	dcb2      	bgt.n	800815a <_dtoa_r+0xac2>
 80081f4:	d102      	bne.n	80081fc <_dtoa_r+0xb64>
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	07db      	lsls	r3, r3, #31
 80081fa:	d4ae      	bmi.n	800815a <_dtoa_r+0xac2>
 80081fc:	462b      	mov	r3, r5
 80081fe:	461d      	mov	r5, r3
 8008200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008204:	2a30      	cmp	r2, #48	; 0x30
 8008206:	d0fa      	beq.n	80081fe <_dtoa_r+0xb66>
 8008208:	e6f7      	b.n	8007ffa <_dtoa_r+0x962>
 800820a:	9a00      	ldr	r2, [sp, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d1a5      	bne.n	800815c <_dtoa_r+0xac4>
 8008210:	f10a 0a01 	add.w	sl, sl, #1
 8008214:	2331      	movs	r3, #49	; 0x31
 8008216:	e779      	b.n	800810c <_dtoa_r+0xa74>
 8008218:	4b13      	ldr	r3, [pc, #76]	; (8008268 <_dtoa_r+0xbd0>)
 800821a:	f7ff baaf 	b.w	800777c <_dtoa_r+0xe4>
 800821e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008220:	2b00      	cmp	r3, #0
 8008222:	f47f aa86 	bne.w	8007732 <_dtoa_r+0x9a>
 8008226:	4b11      	ldr	r3, [pc, #68]	; (800826c <_dtoa_r+0xbd4>)
 8008228:	f7ff baa8 	b.w	800777c <_dtoa_r+0xe4>
 800822c:	f1b9 0f00 	cmp.w	r9, #0
 8008230:	dc03      	bgt.n	800823a <_dtoa_r+0xba2>
 8008232:	9b05      	ldr	r3, [sp, #20]
 8008234:	2b02      	cmp	r3, #2
 8008236:	f73f aec9 	bgt.w	8007fcc <_dtoa_r+0x934>
 800823a:	9d00      	ldr	r5, [sp, #0]
 800823c:	4631      	mov	r1, r6
 800823e:	4658      	mov	r0, fp
 8008240:	f7ff f99c 	bl	800757c <quorem>
 8008244:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008248:	f805 3b01 	strb.w	r3, [r5], #1
 800824c:	9a00      	ldr	r2, [sp, #0]
 800824e:	1aaa      	subs	r2, r5, r2
 8008250:	4591      	cmp	r9, r2
 8008252:	ddba      	ble.n	80081ca <_dtoa_r+0xb32>
 8008254:	4659      	mov	r1, fp
 8008256:	2300      	movs	r3, #0
 8008258:	220a      	movs	r2, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fc06 	bl	8008a6c <__multadd>
 8008260:	4683      	mov	fp, r0
 8008262:	e7eb      	b.n	800823c <_dtoa_r+0xba4>
 8008264:	0800a76c 	.word	0x0800a76c
 8008268:	0800a56c 	.word	0x0800a56c
 800826c:	0800a6e9 	.word	0x0800a6e9

08008270 <rshift>:
 8008270:	6903      	ldr	r3, [r0, #16]
 8008272:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008276:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800827a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800827e:	f100 0414 	add.w	r4, r0, #20
 8008282:	dd45      	ble.n	8008310 <rshift+0xa0>
 8008284:	f011 011f 	ands.w	r1, r1, #31
 8008288:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800828c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008290:	d10c      	bne.n	80082ac <rshift+0x3c>
 8008292:	f100 0710 	add.w	r7, r0, #16
 8008296:	4629      	mov	r1, r5
 8008298:	42b1      	cmp	r1, r6
 800829a:	d334      	bcc.n	8008306 <rshift+0x96>
 800829c:	1a9b      	subs	r3, r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	1eea      	subs	r2, r5, #3
 80082a2:	4296      	cmp	r6, r2
 80082a4:	bf38      	it	cc
 80082a6:	2300      	movcc	r3, #0
 80082a8:	4423      	add	r3, r4
 80082aa:	e015      	b.n	80082d8 <rshift+0x68>
 80082ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082b0:	f1c1 0820 	rsb	r8, r1, #32
 80082b4:	40cf      	lsrs	r7, r1
 80082b6:	f105 0e04 	add.w	lr, r5, #4
 80082ba:	46a1      	mov	r9, r4
 80082bc:	4576      	cmp	r6, lr
 80082be:	46f4      	mov	ip, lr
 80082c0:	d815      	bhi.n	80082ee <rshift+0x7e>
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	009a      	lsls	r2, r3, #2
 80082c6:	3a04      	subs	r2, #4
 80082c8:	3501      	adds	r5, #1
 80082ca:	42ae      	cmp	r6, r5
 80082cc:	bf38      	it	cc
 80082ce:	2200      	movcc	r2, #0
 80082d0:	18a3      	adds	r3, r4, r2
 80082d2:	50a7      	str	r7, [r4, r2]
 80082d4:	b107      	cbz	r7, 80082d8 <rshift+0x68>
 80082d6:	3304      	adds	r3, #4
 80082d8:	1b1a      	subs	r2, r3, r4
 80082da:	42a3      	cmp	r3, r4
 80082dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082e0:	bf08      	it	eq
 80082e2:	2300      	moveq	r3, #0
 80082e4:	6102      	str	r2, [r0, #16]
 80082e6:	bf08      	it	eq
 80082e8:	6143      	streq	r3, [r0, #20]
 80082ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ee:	f8dc c000 	ldr.w	ip, [ip]
 80082f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80082f6:	ea4c 0707 	orr.w	r7, ip, r7
 80082fa:	f849 7b04 	str.w	r7, [r9], #4
 80082fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008302:	40cf      	lsrs	r7, r1
 8008304:	e7da      	b.n	80082bc <rshift+0x4c>
 8008306:	f851 cb04 	ldr.w	ip, [r1], #4
 800830a:	f847 cf04 	str.w	ip, [r7, #4]!
 800830e:	e7c3      	b.n	8008298 <rshift+0x28>
 8008310:	4623      	mov	r3, r4
 8008312:	e7e1      	b.n	80082d8 <rshift+0x68>

08008314 <__hexdig_fun>:
 8008314:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008318:	2b09      	cmp	r3, #9
 800831a:	d802      	bhi.n	8008322 <__hexdig_fun+0xe>
 800831c:	3820      	subs	r0, #32
 800831e:	b2c0      	uxtb	r0, r0
 8008320:	4770      	bx	lr
 8008322:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008326:	2b05      	cmp	r3, #5
 8008328:	d801      	bhi.n	800832e <__hexdig_fun+0x1a>
 800832a:	3847      	subs	r0, #71	; 0x47
 800832c:	e7f7      	b.n	800831e <__hexdig_fun+0xa>
 800832e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008332:	2b05      	cmp	r3, #5
 8008334:	d801      	bhi.n	800833a <__hexdig_fun+0x26>
 8008336:	3827      	subs	r0, #39	; 0x27
 8008338:	e7f1      	b.n	800831e <__hexdig_fun+0xa>
 800833a:	2000      	movs	r0, #0
 800833c:	4770      	bx	lr
	...

08008340 <__gethex>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	ed2d 8b02 	vpush	{d8}
 8008348:	b089      	sub	sp, #36	; 0x24
 800834a:	ee08 0a10 	vmov	s16, r0
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	4bbc      	ldr	r3, [pc, #752]	; (8008644 <__gethex+0x304>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	4618      	mov	r0, r3
 8008358:	468b      	mov	fp, r1
 800835a:	4690      	mov	r8, r2
 800835c:	f7f7 ff40 	bl	80001e0 <strlen>
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	f8db 2000 	ldr.w	r2, [fp]
 8008366:	4403      	add	r3, r0
 8008368:	4682      	mov	sl, r0
 800836a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	1c93      	adds	r3, r2, #2
 8008372:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008376:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800837a:	32fe      	adds	r2, #254	; 0xfe
 800837c:	18d1      	adds	r1, r2, r3
 800837e:	461f      	mov	r7, r3
 8008380:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008384:	9100      	str	r1, [sp, #0]
 8008386:	2830      	cmp	r0, #48	; 0x30
 8008388:	d0f8      	beq.n	800837c <__gethex+0x3c>
 800838a:	f7ff ffc3 	bl	8008314 <__hexdig_fun>
 800838e:	4604      	mov	r4, r0
 8008390:	2800      	cmp	r0, #0
 8008392:	d13a      	bne.n	800840a <__gethex+0xca>
 8008394:	9901      	ldr	r1, [sp, #4]
 8008396:	4652      	mov	r2, sl
 8008398:	4638      	mov	r0, r7
 800839a:	f001 f9ed 	bl	8009778 <strncmp>
 800839e:	4605      	mov	r5, r0
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d168      	bne.n	8008476 <__gethex+0x136>
 80083a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80083a8:	eb07 060a 	add.w	r6, r7, sl
 80083ac:	f7ff ffb2 	bl	8008314 <__hexdig_fun>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d062      	beq.n	800847a <__gethex+0x13a>
 80083b4:	4633      	mov	r3, r6
 80083b6:	7818      	ldrb	r0, [r3, #0]
 80083b8:	2830      	cmp	r0, #48	; 0x30
 80083ba:	461f      	mov	r7, r3
 80083bc:	f103 0301 	add.w	r3, r3, #1
 80083c0:	d0f9      	beq.n	80083b6 <__gethex+0x76>
 80083c2:	f7ff ffa7 	bl	8008314 <__hexdig_fun>
 80083c6:	2301      	movs	r3, #1
 80083c8:	fab0 f480 	clz	r4, r0
 80083cc:	0964      	lsrs	r4, r4, #5
 80083ce:	4635      	mov	r5, r6
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	463a      	mov	r2, r7
 80083d4:	4616      	mov	r6, r2
 80083d6:	3201      	adds	r2, #1
 80083d8:	7830      	ldrb	r0, [r6, #0]
 80083da:	f7ff ff9b 	bl	8008314 <__hexdig_fun>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d1f8      	bne.n	80083d4 <__gethex+0x94>
 80083e2:	9901      	ldr	r1, [sp, #4]
 80083e4:	4652      	mov	r2, sl
 80083e6:	4630      	mov	r0, r6
 80083e8:	f001 f9c6 	bl	8009778 <strncmp>
 80083ec:	b980      	cbnz	r0, 8008410 <__gethex+0xd0>
 80083ee:	b94d      	cbnz	r5, 8008404 <__gethex+0xc4>
 80083f0:	eb06 050a 	add.w	r5, r6, sl
 80083f4:	462a      	mov	r2, r5
 80083f6:	4616      	mov	r6, r2
 80083f8:	3201      	adds	r2, #1
 80083fa:	7830      	ldrb	r0, [r6, #0]
 80083fc:	f7ff ff8a 	bl	8008314 <__hexdig_fun>
 8008400:	2800      	cmp	r0, #0
 8008402:	d1f8      	bne.n	80083f6 <__gethex+0xb6>
 8008404:	1bad      	subs	r5, r5, r6
 8008406:	00ad      	lsls	r5, r5, #2
 8008408:	e004      	b.n	8008414 <__gethex+0xd4>
 800840a:	2400      	movs	r4, #0
 800840c:	4625      	mov	r5, r4
 800840e:	e7e0      	b.n	80083d2 <__gethex+0x92>
 8008410:	2d00      	cmp	r5, #0
 8008412:	d1f7      	bne.n	8008404 <__gethex+0xc4>
 8008414:	7833      	ldrb	r3, [r6, #0]
 8008416:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800841a:	2b50      	cmp	r3, #80	; 0x50
 800841c:	d13b      	bne.n	8008496 <__gethex+0x156>
 800841e:	7873      	ldrb	r3, [r6, #1]
 8008420:	2b2b      	cmp	r3, #43	; 0x2b
 8008422:	d02c      	beq.n	800847e <__gethex+0x13e>
 8008424:	2b2d      	cmp	r3, #45	; 0x2d
 8008426:	d02e      	beq.n	8008486 <__gethex+0x146>
 8008428:	1c71      	adds	r1, r6, #1
 800842a:	f04f 0900 	mov.w	r9, #0
 800842e:	7808      	ldrb	r0, [r1, #0]
 8008430:	f7ff ff70 	bl	8008314 <__hexdig_fun>
 8008434:	1e43      	subs	r3, r0, #1
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b18      	cmp	r3, #24
 800843a:	d82c      	bhi.n	8008496 <__gethex+0x156>
 800843c:	f1a0 0210 	sub.w	r2, r0, #16
 8008440:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008444:	f7ff ff66 	bl	8008314 <__hexdig_fun>
 8008448:	1e43      	subs	r3, r0, #1
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b18      	cmp	r3, #24
 800844e:	d91d      	bls.n	800848c <__gethex+0x14c>
 8008450:	f1b9 0f00 	cmp.w	r9, #0
 8008454:	d000      	beq.n	8008458 <__gethex+0x118>
 8008456:	4252      	negs	r2, r2
 8008458:	4415      	add	r5, r2
 800845a:	f8cb 1000 	str.w	r1, [fp]
 800845e:	b1e4      	cbz	r4, 800849a <__gethex+0x15a>
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	bf14      	ite	ne
 8008466:	2700      	movne	r7, #0
 8008468:	2706      	moveq	r7, #6
 800846a:	4638      	mov	r0, r7
 800846c:	b009      	add	sp, #36	; 0x24
 800846e:	ecbd 8b02 	vpop	{d8}
 8008472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008476:	463e      	mov	r6, r7
 8008478:	4625      	mov	r5, r4
 800847a:	2401      	movs	r4, #1
 800847c:	e7ca      	b.n	8008414 <__gethex+0xd4>
 800847e:	f04f 0900 	mov.w	r9, #0
 8008482:	1cb1      	adds	r1, r6, #2
 8008484:	e7d3      	b.n	800842e <__gethex+0xee>
 8008486:	f04f 0901 	mov.w	r9, #1
 800848a:	e7fa      	b.n	8008482 <__gethex+0x142>
 800848c:	230a      	movs	r3, #10
 800848e:	fb03 0202 	mla	r2, r3, r2, r0
 8008492:	3a10      	subs	r2, #16
 8008494:	e7d4      	b.n	8008440 <__gethex+0x100>
 8008496:	4631      	mov	r1, r6
 8008498:	e7df      	b.n	800845a <__gethex+0x11a>
 800849a:	1bf3      	subs	r3, r6, r7
 800849c:	3b01      	subs	r3, #1
 800849e:	4621      	mov	r1, r4
 80084a0:	2b07      	cmp	r3, #7
 80084a2:	dc0b      	bgt.n	80084bc <__gethex+0x17c>
 80084a4:	ee18 0a10 	vmov	r0, s16
 80084a8:	f000 fa7e 	bl	80089a8 <_Balloc>
 80084ac:	4604      	mov	r4, r0
 80084ae:	b940      	cbnz	r0, 80084c2 <__gethex+0x182>
 80084b0:	4b65      	ldr	r3, [pc, #404]	; (8008648 <__gethex+0x308>)
 80084b2:	4602      	mov	r2, r0
 80084b4:	21de      	movs	r1, #222	; 0xde
 80084b6:	4865      	ldr	r0, [pc, #404]	; (800864c <__gethex+0x30c>)
 80084b8:	f001 f97e 	bl	80097b8 <__assert_func>
 80084bc:	3101      	adds	r1, #1
 80084be:	105b      	asrs	r3, r3, #1
 80084c0:	e7ee      	b.n	80084a0 <__gethex+0x160>
 80084c2:	f100 0914 	add.w	r9, r0, #20
 80084c6:	f04f 0b00 	mov.w	fp, #0
 80084ca:	f1ca 0301 	rsb	r3, sl, #1
 80084ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80084d2:	f8cd b000 	str.w	fp, [sp]
 80084d6:	9306      	str	r3, [sp, #24]
 80084d8:	42b7      	cmp	r7, r6
 80084da:	d340      	bcc.n	800855e <__gethex+0x21e>
 80084dc:	9802      	ldr	r0, [sp, #8]
 80084de:	9b00      	ldr	r3, [sp, #0]
 80084e0:	f840 3b04 	str.w	r3, [r0], #4
 80084e4:	eba0 0009 	sub.w	r0, r0, r9
 80084e8:	1080      	asrs	r0, r0, #2
 80084ea:	0146      	lsls	r6, r0, #5
 80084ec:	6120      	str	r0, [r4, #16]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb50 	bl	8008b94 <__hi0bits>
 80084f4:	1a30      	subs	r0, r6, r0
 80084f6:	f8d8 6000 	ldr.w	r6, [r8]
 80084fa:	42b0      	cmp	r0, r6
 80084fc:	dd63      	ble.n	80085c6 <__gethex+0x286>
 80084fe:	1b87      	subs	r7, r0, r6
 8008500:	4639      	mov	r1, r7
 8008502:	4620      	mov	r0, r4
 8008504:	f000 feea 	bl	80092dc <__any_on>
 8008508:	4682      	mov	sl, r0
 800850a:	b1a8      	cbz	r0, 8008538 <__gethex+0x1f8>
 800850c:	1e7b      	subs	r3, r7, #1
 800850e:	1159      	asrs	r1, r3, #5
 8008510:	f003 021f 	and.w	r2, r3, #31
 8008514:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008518:	f04f 0a01 	mov.w	sl, #1
 800851c:	fa0a f202 	lsl.w	r2, sl, r2
 8008520:	420a      	tst	r2, r1
 8008522:	d009      	beq.n	8008538 <__gethex+0x1f8>
 8008524:	4553      	cmp	r3, sl
 8008526:	dd05      	ble.n	8008534 <__gethex+0x1f4>
 8008528:	1eb9      	subs	r1, r7, #2
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fed6 	bl	80092dc <__any_on>
 8008530:	2800      	cmp	r0, #0
 8008532:	d145      	bne.n	80085c0 <__gethex+0x280>
 8008534:	f04f 0a02 	mov.w	sl, #2
 8008538:	4639      	mov	r1, r7
 800853a:	4620      	mov	r0, r4
 800853c:	f7ff fe98 	bl	8008270 <rshift>
 8008540:	443d      	add	r5, r7
 8008542:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008546:	42ab      	cmp	r3, r5
 8008548:	da4c      	bge.n	80085e4 <__gethex+0x2a4>
 800854a:	ee18 0a10 	vmov	r0, s16
 800854e:	4621      	mov	r1, r4
 8008550:	f000 fa6a 	bl	8008a28 <_Bfree>
 8008554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008556:	2300      	movs	r3, #0
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	27a3      	movs	r7, #163	; 0xa3
 800855c:	e785      	b.n	800846a <__gethex+0x12a>
 800855e:	1e73      	subs	r3, r6, #1
 8008560:	9a05      	ldr	r2, [sp, #20]
 8008562:	9303      	str	r3, [sp, #12]
 8008564:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008568:	4293      	cmp	r3, r2
 800856a:	d019      	beq.n	80085a0 <__gethex+0x260>
 800856c:	f1bb 0f20 	cmp.w	fp, #32
 8008570:	d107      	bne.n	8008582 <__gethex+0x242>
 8008572:	9b02      	ldr	r3, [sp, #8]
 8008574:	9a00      	ldr	r2, [sp, #0]
 8008576:	f843 2b04 	str.w	r2, [r3], #4
 800857a:	9302      	str	r3, [sp, #8]
 800857c:	2300      	movs	r3, #0
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	469b      	mov	fp, r3
 8008582:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008586:	f7ff fec5 	bl	8008314 <__hexdig_fun>
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	f000 000f 	and.w	r0, r0, #15
 8008590:	fa00 f00b 	lsl.w	r0, r0, fp
 8008594:	4303      	orrs	r3, r0
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	f10b 0b04 	add.w	fp, fp, #4
 800859c:	9b03      	ldr	r3, [sp, #12]
 800859e:	e00d      	b.n	80085bc <__gethex+0x27c>
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	9a06      	ldr	r2, [sp, #24]
 80085a4:	4413      	add	r3, r2
 80085a6:	42bb      	cmp	r3, r7
 80085a8:	d3e0      	bcc.n	800856c <__gethex+0x22c>
 80085aa:	4618      	mov	r0, r3
 80085ac:	9901      	ldr	r1, [sp, #4]
 80085ae:	9307      	str	r3, [sp, #28]
 80085b0:	4652      	mov	r2, sl
 80085b2:	f001 f8e1 	bl	8009778 <strncmp>
 80085b6:	9b07      	ldr	r3, [sp, #28]
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d1d7      	bne.n	800856c <__gethex+0x22c>
 80085bc:	461e      	mov	r6, r3
 80085be:	e78b      	b.n	80084d8 <__gethex+0x198>
 80085c0:	f04f 0a03 	mov.w	sl, #3
 80085c4:	e7b8      	b.n	8008538 <__gethex+0x1f8>
 80085c6:	da0a      	bge.n	80085de <__gethex+0x29e>
 80085c8:	1a37      	subs	r7, r6, r0
 80085ca:	4621      	mov	r1, r4
 80085cc:	ee18 0a10 	vmov	r0, s16
 80085d0:	463a      	mov	r2, r7
 80085d2:	f000 fc45 	bl	8008e60 <__lshift>
 80085d6:	1bed      	subs	r5, r5, r7
 80085d8:	4604      	mov	r4, r0
 80085da:	f100 0914 	add.w	r9, r0, #20
 80085de:	f04f 0a00 	mov.w	sl, #0
 80085e2:	e7ae      	b.n	8008542 <__gethex+0x202>
 80085e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085e8:	42a8      	cmp	r0, r5
 80085ea:	dd72      	ble.n	80086d2 <__gethex+0x392>
 80085ec:	1b45      	subs	r5, r0, r5
 80085ee:	42ae      	cmp	r6, r5
 80085f0:	dc36      	bgt.n	8008660 <__gethex+0x320>
 80085f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d02a      	beq.n	8008650 <__gethex+0x310>
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d02c      	beq.n	8008658 <__gethex+0x318>
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d115      	bne.n	800862e <__gethex+0x2ee>
 8008602:	42ae      	cmp	r6, r5
 8008604:	d113      	bne.n	800862e <__gethex+0x2ee>
 8008606:	2e01      	cmp	r6, #1
 8008608:	d10b      	bne.n	8008622 <__gethex+0x2e2>
 800860a:	9a04      	ldr	r2, [sp, #16]
 800860c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	2301      	movs	r3, #1
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	f8c9 3000 	str.w	r3, [r9]
 800861a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800861c:	2762      	movs	r7, #98	; 0x62
 800861e:	601c      	str	r4, [r3, #0]
 8008620:	e723      	b.n	800846a <__gethex+0x12a>
 8008622:	1e71      	subs	r1, r6, #1
 8008624:	4620      	mov	r0, r4
 8008626:	f000 fe59 	bl	80092dc <__any_on>
 800862a:	2800      	cmp	r0, #0
 800862c:	d1ed      	bne.n	800860a <__gethex+0x2ca>
 800862e:	ee18 0a10 	vmov	r0, s16
 8008632:	4621      	mov	r1, r4
 8008634:	f000 f9f8 	bl	8008a28 <_Bfree>
 8008638:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800863a:	2300      	movs	r3, #0
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	2750      	movs	r7, #80	; 0x50
 8008640:	e713      	b.n	800846a <__gethex+0x12a>
 8008642:	bf00      	nop
 8008644:	0800a7e8 	.word	0x0800a7e8
 8008648:	0800a76c 	.word	0x0800a76c
 800864c:	0800a77d 	.word	0x0800a77d
 8008650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1eb      	bne.n	800862e <__gethex+0x2ee>
 8008656:	e7d8      	b.n	800860a <__gethex+0x2ca>
 8008658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1d5      	bne.n	800860a <__gethex+0x2ca>
 800865e:	e7e6      	b.n	800862e <__gethex+0x2ee>
 8008660:	1e6f      	subs	r7, r5, #1
 8008662:	f1ba 0f00 	cmp.w	sl, #0
 8008666:	d131      	bne.n	80086cc <__gethex+0x38c>
 8008668:	b127      	cbz	r7, 8008674 <__gethex+0x334>
 800866a:	4639      	mov	r1, r7
 800866c:	4620      	mov	r0, r4
 800866e:	f000 fe35 	bl	80092dc <__any_on>
 8008672:	4682      	mov	sl, r0
 8008674:	117b      	asrs	r3, r7, #5
 8008676:	2101      	movs	r1, #1
 8008678:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800867c:	f007 071f 	and.w	r7, r7, #31
 8008680:	fa01 f707 	lsl.w	r7, r1, r7
 8008684:	421f      	tst	r7, r3
 8008686:	4629      	mov	r1, r5
 8008688:	4620      	mov	r0, r4
 800868a:	bf18      	it	ne
 800868c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008690:	1b76      	subs	r6, r6, r5
 8008692:	f7ff fded 	bl	8008270 <rshift>
 8008696:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800869a:	2702      	movs	r7, #2
 800869c:	f1ba 0f00 	cmp.w	sl, #0
 80086a0:	d048      	beq.n	8008734 <__gethex+0x3f4>
 80086a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d015      	beq.n	80086d6 <__gethex+0x396>
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d017      	beq.n	80086de <__gethex+0x39e>
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d109      	bne.n	80086c6 <__gethex+0x386>
 80086b2:	f01a 0f02 	tst.w	sl, #2
 80086b6:	d006      	beq.n	80086c6 <__gethex+0x386>
 80086b8:	f8d9 0000 	ldr.w	r0, [r9]
 80086bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80086c0:	f01a 0f01 	tst.w	sl, #1
 80086c4:	d10e      	bne.n	80086e4 <__gethex+0x3a4>
 80086c6:	f047 0710 	orr.w	r7, r7, #16
 80086ca:	e033      	b.n	8008734 <__gethex+0x3f4>
 80086cc:	f04f 0a01 	mov.w	sl, #1
 80086d0:	e7d0      	b.n	8008674 <__gethex+0x334>
 80086d2:	2701      	movs	r7, #1
 80086d4:	e7e2      	b.n	800869c <__gethex+0x35c>
 80086d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086d8:	f1c3 0301 	rsb	r3, r3, #1
 80086dc:	9315      	str	r3, [sp, #84]	; 0x54
 80086de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0f0      	beq.n	80086c6 <__gethex+0x386>
 80086e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086e8:	f104 0314 	add.w	r3, r4, #20
 80086ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80086f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80086f4:	f04f 0c00 	mov.w	ip, #0
 80086f8:	4618      	mov	r0, r3
 80086fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008702:	d01c      	beq.n	800873e <__gethex+0x3fe>
 8008704:	3201      	adds	r2, #1
 8008706:	6002      	str	r2, [r0, #0]
 8008708:	2f02      	cmp	r7, #2
 800870a:	f104 0314 	add.w	r3, r4, #20
 800870e:	d13f      	bne.n	8008790 <__gethex+0x450>
 8008710:	f8d8 2000 	ldr.w	r2, [r8]
 8008714:	3a01      	subs	r2, #1
 8008716:	42b2      	cmp	r2, r6
 8008718:	d10a      	bne.n	8008730 <__gethex+0x3f0>
 800871a:	1171      	asrs	r1, r6, #5
 800871c:	2201      	movs	r2, #1
 800871e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008722:	f006 061f 	and.w	r6, r6, #31
 8008726:	fa02 f606 	lsl.w	r6, r2, r6
 800872a:	421e      	tst	r6, r3
 800872c:	bf18      	it	ne
 800872e:	4617      	movne	r7, r2
 8008730:	f047 0720 	orr.w	r7, r7, #32
 8008734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008736:	601c      	str	r4, [r3, #0]
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	601d      	str	r5, [r3, #0]
 800873c:	e695      	b.n	800846a <__gethex+0x12a>
 800873e:	4299      	cmp	r1, r3
 8008740:	f843 cc04 	str.w	ip, [r3, #-4]
 8008744:	d8d8      	bhi.n	80086f8 <__gethex+0x3b8>
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	459b      	cmp	fp, r3
 800874a:	db19      	blt.n	8008780 <__gethex+0x440>
 800874c:	6861      	ldr	r1, [r4, #4]
 800874e:	ee18 0a10 	vmov	r0, s16
 8008752:	3101      	adds	r1, #1
 8008754:	f000 f928 	bl	80089a8 <_Balloc>
 8008758:	4681      	mov	r9, r0
 800875a:	b918      	cbnz	r0, 8008764 <__gethex+0x424>
 800875c:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <__gethex+0x488>)
 800875e:	4602      	mov	r2, r0
 8008760:	2184      	movs	r1, #132	; 0x84
 8008762:	e6a8      	b.n	80084b6 <__gethex+0x176>
 8008764:	6922      	ldr	r2, [r4, #16]
 8008766:	3202      	adds	r2, #2
 8008768:	f104 010c 	add.w	r1, r4, #12
 800876c:	0092      	lsls	r2, r2, #2
 800876e:	300c      	adds	r0, #12
 8008770:	f000 f90c 	bl	800898c <memcpy>
 8008774:	4621      	mov	r1, r4
 8008776:	ee18 0a10 	vmov	r0, s16
 800877a:	f000 f955 	bl	8008a28 <_Bfree>
 800877e:	464c      	mov	r4, r9
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008788:	6122      	str	r2, [r4, #16]
 800878a:	2201      	movs	r2, #1
 800878c:	615a      	str	r2, [r3, #20]
 800878e:	e7bb      	b.n	8008708 <__gethex+0x3c8>
 8008790:	6922      	ldr	r2, [r4, #16]
 8008792:	455a      	cmp	r2, fp
 8008794:	dd0b      	ble.n	80087ae <__gethex+0x46e>
 8008796:	2101      	movs	r1, #1
 8008798:	4620      	mov	r0, r4
 800879a:	f7ff fd69 	bl	8008270 <rshift>
 800879e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087a2:	3501      	adds	r5, #1
 80087a4:	42ab      	cmp	r3, r5
 80087a6:	f6ff aed0 	blt.w	800854a <__gethex+0x20a>
 80087aa:	2701      	movs	r7, #1
 80087ac:	e7c0      	b.n	8008730 <__gethex+0x3f0>
 80087ae:	f016 061f 	ands.w	r6, r6, #31
 80087b2:	d0fa      	beq.n	80087aa <__gethex+0x46a>
 80087b4:	449a      	add	sl, r3
 80087b6:	f1c6 0620 	rsb	r6, r6, #32
 80087ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80087be:	f000 f9e9 	bl	8008b94 <__hi0bits>
 80087c2:	42b0      	cmp	r0, r6
 80087c4:	dbe7      	blt.n	8008796 <__gethex+0x456>
 80087c6:	e7f0      	b.n	80087aa <__gethex+0x46a>
 80087c8:	0800a76c 	.word	0x0800a76c

080087cc <L_shift>:
 80087cc:	f1c2 0208 	rsb	r2, r2, #8
 80087d0:	0092      	lsls	r2, r2, #2
 80087d2:	b570      	push	{r4, r5, r6, lr}
 80087d4:	f1c2 0620 	rsb	r6, r2, #32
 80087d8:	6843      	ldr	r3, [r0, #4]
 80087da:	6804      	ldr	r4, [r0, #0]
 80087dc:	fa03 f506 	lsl.w	r5, r3, r6
 80087e0:	432c      	orrs	r4, r5
 80087e2:	40d3      	lsrs	r3, r2
 80087e4:	6004      	str	r4, [r0, #0]
 80087e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80087ea:	4288      	cmp	r0, r1
 80087ec:	d3f4      	bcc.n	80087d8 <L_shift+0xc>
 80087ee:	bd70      	pop	{r4, r5, r6, pc}

080087f0 <__match>:
 80087f0:	b530      	push	{r4, r5, lr}
 80087f2:	6803      	ldr	r3, [r0, #0]
 80087f4:	3301      	adds	r3, #1
 80087f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087fa:	b914      	cbnz	r4, 8008802 <__match+0x12>
 80087fc:	6003      	str	r3, [r0, #0]
 80087fe:	2001      	movs	r0, #1
 8008800:	bd30      	pop	{r4, r5, pc}
 8008802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008806:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800880a:	2d19      	cmp	r5, #25
 800880c:	bf98      	it	ls
 800880e:	3220      	addls	r2, #32
 8008810:	42a2      	cmp	r2, r4
 8008812:	d0f0      	beq.n	80087f6 <__match+0x6>
 8008814:	2000      	movs	r0, #0
 8008816:	e7f3      	b.n	8008800 <__match+0x10>

08008818 <__hexnan>:
 8008818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	680b      	ldr	r3, [r1, #0]
 800881e:	6801      	ldr	r1, [r0, #0]
 8008820:	115e      	asrs	r6, r3, #5
 8008822:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008826:	f013 031f 	ands.w	r3, r3, #31
 800882a:	b087      	sub	sp, #28
 800882c:	bf18      	it	ne
 800882e:	3604      	addne	r6, #4
 8008830:	2500      	movs	r5, #0
 8008832:	1f37      	subs	r7, r6, #4
 8008834:	4682      	mov	sl, r0
 8008836:	4690      	mov	r8, r2
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	f846 5c04 	str.w	r5, [r6, #-4]
 800883e:	46b9      	mov	r9, r7
 8008840:	463c      	mov	r4, r7
 8008842:	9502      	str	r5, [sp, #8]
 8008844:	46ab      	mov	fp, r5
 8008846:	784a      	ldrb	r2, [r1, #1]
 8008848:	1c4b      	adds	r3, r1, #1
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	b342      	cbz	r2, 80088a0 <__hexnan+0x88>
 800884e:	4610      	mov	r0, r2
 8008850:	9105      	str	r1, [sp, #20]
 8008852:	9204      	str	r2, [sp, #16]
 8008854:	f7ff fd5e 	bl	8008314 <__hexdig_fun>
 8008858:	2800      	cmp	r0, #0
 800885a:	d14f      	bne.n	80088fc <__hexnan+0xe4>
 800885c:	9a04      	ldr	r2, [sp, #16]
 800885e:	9905      	ldr	r1, [sp, #20]
 8008860:	2a20      	cmp	r2, #32
 8008862:	d818      	bhi.n	8008896 <__hexnan+0x7e>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	459b      	cmp	fp, r3
 8008868:	dd13      	ble.n	8008892 <__hexnan+0x7a>
 800886a:	454c      	cmp	r4, r9
 800886c:	d206      	bcs.n	800887c <__hexnan+0x64>
 800886e:	2d07      	cmp	r5, #7
 8008870:	dc04      	bgt.n	800887c <__hexnan+0x64>
 8008872:	462a      	mov	r2, r5
 8008874:	4649      	mov	r1, r9
 8008876:	4620      	mov	r0, r4
 8008878:	f7ff ffa8 	bl	80087cc <L_shift>
 800887c:	4544      	cmp	r4, r8
 800887e:	d950      	bls.n	8008922 <__hexnan+0x10a>
 8008880:	2300      	movs	r3, #0
 8008882:	f1a4 0904 	sub.w	r9, r4, #4
 8008886:	f844 3c04 	str.w	r3, [r4, #-4]
 800888a:	f8cd b008 	str.w	fp, [sp, #8]
 800888e:	464c      	mov	r4, r9
 8008890:	461d      	mov	r5, r3
 8008892:	9903      	ldr	r1, [sp, #12]
 8008894:	e7d7      	b.n	8008846 <__hexnan+0x2e>
 8008896:	2a29      	cmp	r2, #41	; 0x29
 8008898:	d156      	bne.n	8008948 <__hexnan+0x130>
 800889a:	3102      	adds	r1, #2
 800889c:	f8ca 1000 	str.w	r1, [sl]
 80088a0:	f1bb 0f00 	cmp.w	fp, #0
 80088a4:	d050      	beq.n	8008948 <__hexnan+0x130>
 80088a6:	454c      	cmp	r4, r9
 80088a8:	d206      	bcs.n	80088b8 <__hexnan+0xa0>
 80088aa:	2d07      	cmp	r5, #7
 80088ac:	dc04      	bgt.n	80088b8 <__hexnan+0xa0>
 80088ae:	462a      	mov	r2, r5
 80088b0:	4649      	mov	r1, r9
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff ff8a 	bl	80087cc <L_shift>
 80088b8:	4544      	cmp	r4, r8
 80088ba:	d934      	bls.n	8008926 <__hexnan+0x10e>
 80088bc:	f1a8 0204 	sub.w	r2, r8, #4
 80088c0:	4623      	mov	r3, r4
 80088c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80088c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80088ca:	429f      	cmp	r7, r3
 80088cc:	d2f9      	bcs.n	80088c2 <__hexnan+0xaa>
 80088ce:	1b3b      	subs	r3, r7, r4
 80088d0:	f023 0303 	bic.w	r3, r3, #3
 80088d4:	3304      	adds	r3, #4
 80088d6:	3401      	adds	r4, #1
 80088d8:	3e03      	subs	r6, #3
 80088da:	42b4      	cmp	r4, r6
 80088dc:	bf88      	it	hi
 80088de:	2304      	movhi	r3, #4
 80088e0:	4443      	add	r3, r8
 80088e2:	2200      	movs	r2, #0
 80088e4:	f843 2b04 	str.w	r2, [r3], #4
 80088e8:	429f      	cmp	r7, r3
 80088ea:	d2fb      	bcs.n	80088e4 <__hexnan+0xcc>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	b91b      	cbnz	r3, 80088f8 <__hexnan+0xe0>
 80088f0:	4547      	cmp	r7, r8
 80088f2:	d127      	bne.n	8008944 <__hexnan+0x12c>
 80088f4:	2301      	movs	r3, #1
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	2005      	movs	r0, #5
 80088fa:	e026      	b.n	800894a <__hexnan+0x132>
 80088fc:	3501      	adds	r5, #1
 80088fe:	2d08      	cmp	r5, #8
 8008900:	f10b 0b01 	add.w	fp, fp, #1
 8008904:	dd06      	ble.n	8008914 <__hexnan+0xfc>
 8008906:	4544      	cmp	r4, r8
 8008908:	d9c3      	bls.n	8008892 <__hexnan+0x7a>
 800890a:	2300      	movs	r3, #0
 800890c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008910:	2501      	movs	r5, #1
 8008912:	3c04      	subs	r4, #4
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	f000 000f 	and.w	r0, r0, #15
 800891a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	e7b7      	b.n	8008892 <__hexnan+0x7a>
 8008922:	2508      	movs	r5, #8
 8008924:	e7b5      	b.n	8008892 <__hexnan+0x7a>
 8008926:	9b01      	ldr	r3, [sp, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0df      	beq.n	80088ec <__hexnan+0xd4>
 800892c:	f04f 32ff 	mov.w	r2, #4294967295
 8008930:	f1c3 0320 	rsb	r3, r3, #32
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
 8008938:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800893c:	401a      	ands	r2, r3
 800893e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008942:	e7d3      	b.n	80088ec <__hexnan+0xd4>
 8008944:	3f04      	subs	r7, #4
 8008946:	e7d1      	b.n	80088ec <__hexnan+0xd4>
 8008948:	2004      	movs	r0, #4
 800894a:	b007      	add	sp, #28
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008950 <_localeconv_r>:
 8008950:	4800      	ldr	r0, [pc, #0]	; (8008954 <_localeconv_r+0x4>)
 8008952:	4770      	bx	lr
 8008954:	2000016c 	.word	0x2000016c

08008958 <malloc>:
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <malloc+0xc>)
 800895a:	4601      	mov	r1, r0
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f000 bd3d 	b.w	80093dc <_malloc_r>
 8008962:	bf00      	nop
 8008964:	20000014 	.word	0x20000014

08008968 <__ascii_mbtowc>:
 8008968:	b082      	sub	sp, #8
 800896a:	b901      	cbnz	r1, 800896e <__ascii_mbtowc+0x6>
 800896c:	a901      	add	r1, sp, #4
 800896e:	b142      	cbz	r2, 8008982 <__ascii_mbtowc+0x1a>
 8008970:	b14b      	cbz	r3, 8008986 <__ascii_mbtowc+0x1e>
 8008972:	7813      	ldrb	r3, [r2, #0]
 8008974:	600b      	str	r3, [r1, #0]
 8008976:	7812      	ldrb	r2, [r2, #0]
 8008978:	1e10      	subs	r0, r2, #0
 800897a:	bf18      	it	ne
 800897c:	2001      	movne	r0, #1
 800897e:	b002      	add	sp, #8
 8008980:	4770      	bx	lr
 8008982:	4610      	mov	r0, r2
 8008984:	e7fb      	b.n	800897e <__ascii_mbtowc+0x16>
 8008986:	f06f 0001 	mvn.w	r0, #1
 800898a:	e7f8      	b.n	800897e <__ascii_mbtowc+0x16>

0800898c <memcpy>:
 800898c:	440a      	add	r2, r1
 800898e:	4291      	cmp	r1, r2
 8008990:	f100 33ff 	add.w	r3, r0, #4294967295
 8008994:	d100      	bne.n	8008998 <memcpy+0xc>
 8008996:	4770      	bx	lr
 8008998:	b510      	push	{r4, lr}
 800899a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a2:	4291      	cmp	r1, r2
 80089a4:	d1f9      	bne.n	800899a <memcpy+0xe>
 80089a6:	bd10      	pop	{r4, pc}

080089a8 <_Balloc>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089ac:	4604      	mov	r4, r0
 80089ae:	460d      	mov	r5, r1
 80089b0:	b976      	cbnz	r6, 80089d0 <_Balloc+0x28>
 80089b2:	2010      	movs	r0, #16
 80089b4:	f7ff ffd0 	bl	8008958 <malloc>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6260      	str	r0, [r4, #36]	; 0x24
 80089bc:	b920      	cbnz	r0, 80089c8 <_Balloc+0x20>
 80089be:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <_Balloc+0x78>)
 80089c0:	4818      	ldr	r0, [pc, #96]	; (8008a24 <_Balloc+0x7c>)
 80089c2:	2166      	movs	r1, #102	; 0x66
 80089c4:	f000 fef8 	bl	80097b8 <__assert_func>
 80089c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089cc:	6006      	str	r6, [r0, #0]
 80089ce:	60c6      	str	r6, [r0, #12]
 80089d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089d2:	68f3      	ldr	r3, [r6, #12]
 80089d4:	b183      	cbz	r3, 80089f8 <_Balloc+0x50>
 80089d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089de:	b9b8      	cbnz	r0, 8008a10 <_Balloc+0x68>
 80089e0:	2101      	movs	r1, #1
 80089e2:	fa01 f605 	lsl.w	r6, r1, r5
 80089e6:	1d72      	adds	r2, r6, #5
 80089e8:	0092      	lsls	r2, r2, #2
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 fc97 	bl	800931e <_calloc_r>
 80089f0:	b160      	cbz	r0, 8008a0c <_Balloc+0x64>
 80089f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089f6:	e00e      	b.n	8008a16 <_Balloc+0x6e>
 80089f8:	2221      	movs	r2, #33	; 0x21
 80089fa:	2104      	movs	r1, #4
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fc8e 	bl	800931e <_calloc_r>
 8008a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a04:	60f0      	str	r0, [r6, #12]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e4      	bne.n	80089d6 <_Balloc+0x2e>
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	6802      	ldr	r2, [r0, #0]
 8008a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a16:	2300      	movs	r3, #0
 8008a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a1c:	e7f7      	b.n	8008a0e <_Balloc+0x66>
 8008a1e:	bf00      	nop
 8008a20:	0800a6f6 	.word	0x0800a6f6
 8008a24:	0800a7fc 	.word	0x0800a7fc

08008a28 <_Bfree>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	b976      	cbnz	r6, 8008a50 <_Bfree+0x28>
 8008a32:	2010      	movs	r0, #16
 8008a34:	f7ff ff90 	bl	8008958 <malloc>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6268      	str	r0, [r5, #36]	; 0x24
 8008a3c:	b920      	cbnz	r0, 8008a48 <_Bfree+0x20>
 8008a3e:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <_Bfree+0x3c>)
 8008a40:	4809      	ldr	r0, [pc, #36]	; (8008a68 <_Bfree+0x40>)
 8008a42:	218a      	movs	r1, #138	; 0x8a
 8008a44:	f000 feb8 	bl	80097b8 <__assert_func>
 8008a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a4c:	6006      	str	r6, [r0, #0]
 8008a4e:	60c6      	str	r6, [r0, #12]
 8008a50:	b13c      	cbz	r4, 8008a62 <_Bfree+0x3a>
 8008a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a54:	6862      	ldr	r2, [r4, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a5c:	6021      	str	r1, [r4, #0]
 8008a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	0800a6f6 	.word	0x0800a6f6
 8008a68:	0800a7fc 	.word	0x0800a7fc

08008a6c <__multadd>:
 8008a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	690e      	ldr	r6, [r1, #16]
 8008a72:	4607      	mov	r7, r0
 8008a74:	4698      	mov	r8, r3
 8008a76:	460c      	mov	r4, r1
 8008a78:	f101 0014 	add.w	r0, r1, #20
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6805      	ldr	r5, [r0, #0]
 8008a80:	b2a9      	uxth	r1, r5
 8008a82:	fb02 8101 	mla	r1, r2, r1, r8
 8008a86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a8a:	0c2d      	lsrs	r5, r5, #16
 8008a8c:	fb02 c505 	mla	r5, r2, r5, ip
 8008a90:	b289      	uxth	r1, r1
 8008a92:	3301      	adds	r3, #1
 8008a94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a98:	429e      	cmp	r6, r3
 8008a9a:	f840 1b04 	str.w	r1, [r0], #4
 8008a9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008aa2:	dcec      	bgt.n	8008a7e <__multadd+0x12>
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	d022      	beq.n	8008af0 <__multadd+0x84>
 8008aaa:	68a3      	ldr	r3, [r4, #8]
 8008aac:	42b3      	cmp	r3, r6
 8008aae:	dc19      	bgt.n	8008ae4 <__multadd+0x78>
 8008ab0:	6861      	ldr	r1, [r4, #4]
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	3101      	adds	r1, #1
 8008ab6:	f7ff ff77 	bl	80089a8 <_Balloc>
 8008aba:	4605      	mov	r5, r0
 8008abc:	b928      	cbnz	r0, 8008aca <__multadd+0x5e>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <__multadd+0x8c>)
 8008ac2:	480e      	ldr	r0, [pc, #56]	; (8008afc <__multadd+0x90>)
 8008ac4:	21b5      	movs	r1, #181	; 0xb5
 8008ac6:	f000 fe77 	bl	80097b8 <__assert_func>
 8008aca:	6922      	ldr	r2, [r4, #16]
 8008acc:	3202      	adds	r2, #2
 8008ace:	f104 010c 	add.w	r1, r4, #12
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	300c      	adds	r0, #12
 8008ad6:	f7ff ff59 	bl	800898c <memcpy>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4638      	mov	r0, r7
 8008ade:	f7ff ffa3 	bl	8008a28 <_Bfree>
 8008ae2:	462c      	mov	r4, r5
 8008ae4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008ae8:	3601      	adds	r6, #1
 8008aea:	f8c3 8014 	str.w	r8, [r3, #20]
 8008aee:	6126      	str	r6, [r4, #16]
 8008af0:	4620      	mov	r0, r4
 8008af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af6:	bf00      	nop
 8008af8:	0800a76c 	.word	0x0800a76c
 8008afc:	0800a7fc 	.word	0x0800a7fc

08008b00 <__s2b>:
 8008b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b04:	460c      	mov	r4, r1
 8008b06:	4615      	mov	r5, r2
 8008b08:	461f      	mov	r7, r3
 8008b0a:	2209      	movs	r2, #9
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	4606      	mov	r6, r0
 8008b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b14:	2100      	movs	r1, #0
 8008b16:	2201      	movs	r2, #1
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	db09      	blt.n	8008b30 <__s2b+0x30>
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff ff43 	bl	80089a8 <_Balloc>
 8008b22:	b940      	cbnz	r0, 8008b36 <__s2b+0x36>
 8008b24:	4602      	mov	r2, r0
 8008b26:	4b19      	ldr	r3, [pc, #100]	; (8008b8c <__s2b+0x8c>)
 8008b28:	4819      	ldr	r0, [pc, #100]	; (8008b90 <__s2b+0x90>)
 8008b2a:	21ce      	movs	r1, #206	; 0xce
 8008b2c:	f000 fe44 	bl	80097b8 <__assert_func>
 8008b30:	0052      	lsls	r2, r2, #1
 8008b32:	3101      	adds	r1, #1
 8008b34:	e7f0      	b.n	8008b18 <__s2b+0x18>
 8008b36:	9b08      	ldr	r3, [sp, #32]
 8008b38:	6143      	str	r3, [r0, #20]
 8008b3a:	2d09      	cmp	r5, #9
 8008b3c:	f04f 0301 	mov.w	r3, #1
 8008b40:	6103      	str	r3, [r0, #16]
 8008b42:	dd16      	ble.n	8008b72 <__s2b+0x72>
 8008b44:	f104 0909 	add.w	r9, r4, #9
 8008b48:	46c8      	mov	r8, r9
 8008b4a:	442c      	add	r4, r5
 8008b4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b50:	4601      	mov	r1, r0
 8008b52:	3b30      	subs	r3, #48	; 0x30
 8008b54:	220a      	movs	r2, #10
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ff88 	bl	8008a6c <__multadd>
 8008b5c:	45a0      	cmp	r8, r4
 8008b5e:	d1f5      	bne.n	8008b4c <__s2b+0x4c>
 8008b60:	f1a5 0408 	sub.w	r4, r5, #8
 8008b64:	444c      	add	r4, r9
 8008b66:	1b2d      	subs	r5, r5, r4
 8008b68:	1963      	adds	r3, r4, r5
 8008b6a:	42bb      	cmp	r3, r7
 8008b6c:	db04      	blt.n	8008b78 <__s2b+0x78>
 8008b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b72:	340a      	adds	r4, #10
 8008b74:	2509      	movs	r5, #9
 8008b76:	e7f6      	b.n	8008b66 <__s2b+0x66>
 8008b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	3b30      	subs	r3, #48	; 0x30
 8008b80:	220a      	movs	r2, #10
 8008b82:	4630      	mov	r0, r6
 8008b84:	f7ff ff72 	bl	8008a6c <__multadd>
 8008b88:	e7ee      	b.n	8008b68 <__s2b+0x68>
 8008b8a:	bf00      	nop
 8008b8c:	0800a76c 	.word	0x0800a76c
 8008b90:	0800a7fc 	.word	0x0800a7fc

08008b94 <__hi0bits>:
 8008b94:	0c03      	lsrs	r3, r0, #16
 8008b96:	041b      	lsls	r3, r3, #16
 8008b98:	b9d3      	cbnz	r3, 8008bd0 <__hi0bits+0x3c>
 8008b9a:	0400      	lsls	r0, r0, #16
 8008b9c:	2310      	movs	r3, #16
 8008b9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ba2:	bf04      	itt	eq
 8008ba4:	0200      	lsleq	r0, r0, #8
 8008ba6:	3308      	addeq	r3, #8
 8008ba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bac:	bf04      	itt	eq
 8008bae:	0100      	lsleq	r0, r0, #4
 8008bb0:	3304      	addeq	r3, #4
 8008bb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bb6:	bf04      	itt	eq
 8008bb8:	0080      	lsleq	r0, r0, #2
 8008bba:	3302      	addeq	r3, #2
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	db05      	blt.n	8008bcc <__hi0bits+0x38>
 8008bc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bc4:	f103 0301 	add.w	r3, r3, #1
 8008bc8:	bf08      	it	eq
 8008bca:	2320      	moveq	r3, #32
 8008bcc:	4618      	mov	r0, r3
 8008bce:	4770      	bx	lr
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e7e4      	b.n	8008b9e <__hi0bits+0xa>

08008bd4 <__lo0bits>:
 8008bd4:	6803      	ldr	r3, [r0, #0]
 8008bd6:	f013 0207 	ands.w	r2, r3, #7
 8008bda:	4601      	mov	r1, r0
 8008bdc:	d00b      	beq.n	8008bf6 <__lo0bits+0x22>
 8008bde:	07da      	lsls	r2, r3, #31
 8008be0:	d424      	bmi.n	8008c2c <__lo0bits+0x58>
 8008be2:	0798      	lsls	r0, r3, #30
 8008be4:	bf49      	itett	mi
 8008be6:	085b      	lsrmi	r3, r3, #1
 8008be8:	089b      	lsrpl	r3, r3, #2
 8008bea:	2001      	movmi	r0, #1
 8008bec:	600b      	strmi	r3, [r1, #0]
 8008bee:	bf5c      	itt	pl
 8008bf0:	600b      	strpl	r3, [r1, #0]
 8008bf2:	2002      	movpl	r0, #2
 8008bf4:	4770      	bx	lr
 8008bf6:	b298      	uxth	r0, r3
 8008bf8:	b9b0      	cbnz	r0, 8008c28 <__lo0bits+0x54>
 8008bfa:	0c1b      	lsrs	r3, r3, #16
 8008bfc:	2010      	movs	r0, #16
 8008bfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c02:	bf04      	itt	eq
 8008c04:	0a1b      	lsreq	r3, r3, #8
 8008c06:	3008      	addeq	r0, #8
 8008c08:	071a      	lsls	r2, r3, #28
 8008c0a:	bf04      	itt	eq
 8008c0c:	091b      	lsreq	r3, r3, #4
 8008c0e:	3004      	addeq	r0, #4
 8008c10:	079a      	lsls	r2, r3, #30
 8008c12:	bf04      	itt	eq
 8008c14:	089b      	lsreq	r3, r3, #2
 8008c16:	3002      	addeq	r0, #2
 8008c18:	07da      	lsls	r2, r3, #31
 8008c1a:	d403      	bmi.n	8008c24 <__lo0bits+0x50>
 8008c1c:	085b      	lsrs	r3, r3, #1
 8008c1e:	f100 0001 	add.w	r0, r0, #1
 8008c22:	d005      	beq.n	8008c30 <__lo0bits+0x5c>
 8008c24:	600b      	str	r3, [r1, #0]
 8008c26:	4770      	bx	lr
 8008c28:	4610      	mov	r0, r2
 8008c2a:	e7e8      	b.n	8008bfe <__lo0bits+0x2a>
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	4770      	bx	lr
 8008c30:	2020      	movs	r0, #32
 8008c32:	4770      	bx	lr

08008c34 <__i2b>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	460c      	mov	r4, r1
 8008c38:	2101      	movs	r1, #1
 8008c3a:	f7ff feb5 	bl	80089a8 <_Balloc>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	b928      	cbnz	r0, 8008c4e <__i2b+0x1a>
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <__i2b+0x24>)
 8008c44:	4805      	ldr	r0, [pc, #20]	; (8008c5c <__i2b+0x28>)
 8008c46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c4a:	f000 fdb5 	bl	80097b8 <__assert_func>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	6144      	str	r4, [r0, #20]
 8008c52:	6103      	str	r3, [r0, #16]
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	bf00      	nop
 8008c58:	0800a76c 	.word	0x0800a76c
 8008c5c:	0800a7fc 	.word	0x0800a7fc

08008c60 <__multiply>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4614      	mov	r4, r2
 8008c66:	690a      	ldr	r2, [r1, #16]
 8008c68:	6923      	ldr	r3, [r4, #16]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	bfb8      	it	lt
 8008c6e:	460b      	movlt	r3, r1
 8008c70:	460d      	mov	r5, r1
 8008c72:	bfbc      	itt	lt
 8008c74:	4625      	movlt	r5, r4
 8008c76:	461c      	movlt	r4, r3
 8008c78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008c7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008c80:	68ab      	ldr	r3, [r5, #8]
 8008c82:	6869      	ldr	r1, [r5, #4]
 8008c84:	eb0a 0709 	add.w	r7, sl, r9
 8008c88:	42bb      	cmp	r3, r7
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	bfb8      	it	lt
 8008c8e:	3101      	addlt	r1, #1
 8008c90:	f7ff fe8a 	bl	80089a8 <_Balloc>
 8008c94:	b930      	cbnz	r0, 8008ca4 <__multiply+0x44>
 8008c96:	4602      	mov	r2, r0
 8008c98:	4b42      	ldr	r3, [pc, #264]	; (8008da4 <__multiply+0x144>)
 8008c9a:	4843      	ldr	r0, [pc, #268]	; (8008da8 <__multiply+0x148>)
 8008c9c:	f240 115d 	movw	r1, #349	; 0x15d
 8008ca0:	f000 fd8a 	bl	80097b8 <__assert_func>
 8008ca4:	f100 0614 	add.w	r6, r0, #20
 8008ca8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008cac:	4633      	mov	r3, r6
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4543      	cmp	r3, r8
 8008cb2:	d31e      	bcc.n	8008cf2 <__multiply+0x92>
 8008cb4:	f105 0c14 	add.w	ip, r5, #20
 8008cb8:	f104 0314 	add.w	r3, r4, #20
 8008cbc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008cc0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008cc4:	9202      	str	r2, [sp, #8]
 8008cc6:	ebac 0205 	sub.w	r2, ip, r5
 8008cca:	3a15      	subs	r2, #21
 8008ccc:	f022 0203 	bic.w	r2, r2, #3
 8008cd0:	3204      	adds	r2, #4
 8008cd2:	f105 0115 	add.w	r1, r5, #21
 8008cd6:	458c      	cmp	ip, r1
 8008cd8:	bf38      	it	cc
 8008cda:	2204      	movcc	r2, #4
 8008cdc:	9201      	str	r2, [sp, #4]
 8008cde:	9a02      	ldr	r2, [sp, #8]
 8008ce0:	9303      	str	r3, [sp, #12]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d808      	bhi.n	8008cf8 <__multiply+0x98>
 8008ce6:	2f00      	cmp	r7, #0
 8008ce8:	dc55      	bgt.n	8008d96 <__multiply+0x136>
 8008cea:	6107      	str	r7, [r0, #16]
 8008cec:	b005      	add	sp, #20
 8008cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf2:	f843 2b04 	str.w	r2, [r3], #4
 8008cf6:	e7db      	b.n	8008cb0 <__multiply+0x50>
 8008cf8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cfc:	f1ba 0f00 	cmp.w	sl, #0
 8008d00:	d020      	beq.n	8008d44 <__multiply+0xe4>
 8008d02:	f105 0e14 	add.w	lr, r5, #20
 8008d06:	46b1      	mov	r9, r6
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008d0e:	f8d9 b000 	ldr.w	fp, [r9]
 8008d12:	b2a1      	uxth	r1, r4
 8008d14:	fa1f fb8b 	uxth.w	fp, fp
 8008d18:	fb0a b101 	mla	r1, sl, r1, fp
 8008d1c:	4411      	add	r1, r2
 8008d1e:	f8d9 2000 	ldr.w	r2, [r9]
 8008d22:	0c24      	lsrs	r4, r4, #16
 8008d24:	0c12      	lsrs	r2, r2, #16
 8008d26:	fb0a 2404 	mla	r4, sl, r4, r2
 8008d2a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008d2e:	b289      	uxth	r1, r1
 8008d30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d34:	45f4      	cmp	ip, lr
 8008d36:	f849 1b04 	str.w	r1, [r9], #4
 8008d3a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008d3e:	d8e4      	bhi.n	8008d0a <__multiply+0xaa>
 8008d40:	9901      	ldr	r1, [sp, #4]
 8008d42:	5072      	str	r2, [r6, r1]
 8008d44:	9a03      	ldr	r2, [sp, #12]
 8008d46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	f1b9 0f00 	cmp.w	r9, #0
 8008d50:	d01f      	beq.n	8008d92 <__multiply+0x132>
 8008d52:	6834      	ldr	r4, [r6, #0]
 8008d54:	f105 0114 	add.w	r1, r5, #20
 8008d58:	46b6      	mov	lr, r6
 8008d5a:	f04f 0a00 	mov.w	sl, #0
 8008d5e:	880a      	ldrh	r2, [r1, #0]
 8008d60:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008d64:	fb09 b202 	mla	r2, r9, r2, fp
 8008d68:	4492      	add	sl, r2
 8008d6a:	b2a4      	uxth	r4, r4
 8008d6c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008d70:	f84e 4b04 	str.w	r4, [lr], #4
 8008d74:	f851 4b04 	ldr.w	r4, [r1], #4
 8008d78:	f8be 2000 	ldrh.w	r2, [lr]
 8008d7c:	0c24      	lsrs	r4, r4, #16
 8008d7e:	fb09 2404 	mla	r4, r9, r4, r2
 8008d82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008d86:	458c      	cmp	ip, r1
 8008d88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d8c:	d8e7      	bhi.n	8008d5e <__multiply+0xfe>
 8008d8e:	9a01      	ldr	r2, [sp, #4]
 8008d90:	50b4      	str	r4, [r6, r2]
 8008d92:	3604      	adds	r6, #4
 8008d94:	e7a3      	b.n	8008cde <__multiply+0x7e>
 8008d96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1a5      	bne.n	8008cea <__multiply+0x8a>
 8008d9e:	3f01      	subs	r7, #1
 8008da0:	e7a1      	b.n	8008ce6 <__multiply+0x86>
 8008da2:	bf00      	nop
 8008da4:	0800a76c 	.word	0x0800a76c
 8008da8:	0800a7fc 	.word	0x0800a7fc

08008dac <__pow5mult>:
 8008dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db0:	4615      	mov	r5, r2
 8008db2:	f012 0203 	ands.w	r2, r2, #3
 8008db6:	4606      	mov	r6, r0
 8008db8:	460f      	mov	r7, r1
 8008dba:	d007      	beq.n	8008dcc <__pow5mult+0x20>
 8008dbc:	4c25      	ldr	r4, [pc, #148]	; (8008e54 <__pow5mult+0xa8>)
 8008dbe:	3a01      	subs	r2, #1
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dc6:	f7ff fe51 	bl	8008a6c <__multadd>
 8008dca:	4607      	mov	r7, r0
 8008dcc:	10ad      	asrs	r5, r5, #2
 8008dce:	d03d      	beq.n	8008e4c <__pow5mult+0xa0>
 8008dd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008dd2:	b97c      	cbnz	r4, 8008df4 <__pow5mult+0x48>
 8008dd4:	2010      	movs	r0, #16
 8008dd6:	f7ff fdbf 	bl	8008958 <malloc>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	6270      	str	r0, [r6, #36]	; 0x24
 8008dde:	b928      	cbnz	r0, 8008dec <__pow5mult+0x40>
 8008de0:	4b1d      	ldr	r3, [pc, #116]	; (8008e58 <__pow5mult+0xac>)
 8008de2:	481e      	ldr	r0, [pc, #120]	; (8008e5c <__pow5mult+0xb0>)
 8008de4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008de8:	f000 fce6 	bl	80097b8 <__assert_func>
 8008dec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008df0:	6004      	str	r4, [r0, #0]
 8008df2:	60c4      	str	r4, [r0, #12]
 8008df4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008df8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008dfc:	b94c      	cbnz	r4, 8008e12 <__pow5mult+0x66>
 8008dfe:	f240 2171 	movw	r1, #625	; 0x271
 8008e02:	4630      	mov	r0, r6
 8008e04:	f7ff ff16 	bl	8008c34 <__i2b>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e0e:	4604      	mov	r4, r0
 8008e10:	6003      	str	r3, [r0, #0]
 8008e12:	f04f 0900 	mov.w	r9, #0
 8008e16:	07eb      	lsls	r3, r5, #31
 8008e18:	d50a      	bpl.n	8008e30 <__pow5mult+0x84>
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f7ff ff1e 	bl	8008c60 <__multiply>
 8008e24:	4639      	mov	r1, r7
 8008e26:	4680      	mov	r8, r0
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7ff fdfd 	bl	8008a28 <_Bfree>
 8008e2e:	4647      	mov	r7, r8
 8008e30:	106d      	asrs	r5, r5, #1
 8008e32:	d00b      	beq.n	8008e4c <__pow5mult+0xa0>
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	b938      	cbnz	r0, 8008e48 <__pow5mult+0x9c>
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7ff ff0f 	bl	8008c60 <__multiply>
 8008e42:	6020      	str	r0, [r4, #0]
 8008e44:	f8c0 9000 	str.w	r9, [r0]
 8008e48:	4604      	mov	r4, r0
 8008e4a:	e7e4      	b.n	8008e16 <__pow5mult+0x6a>
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e52:	bf00      	nop
 8008e54:	0800a950 	.word	0x0800a950
 8008e58:	0800a6f6 	.word	0x0800a6f6
 8008e5c:	0800a7fc 	.word	0x0800a7fc

08008e60 <__lshift>:
 8008e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e64:	460c      	mov	r4, r1
 8008e66:	6849      	ldr	r1, [r1, #4]
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e6e:	68a3      	ldr	r3, [r4, #8]
 8008e70:	4607      	mov	r7, r0
 8008e72:	4691      	mov	r9, r2
 8008e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e78:	f108 0601 	add.w	r6, r8, #1
 8008e7c:	42b3      	cmp	r3, r6
 8008e7e:	db0b      	blt.n	8008e98 <__lshift+0x38>
 8008e80:	4638      	mov	r0, r7
 8008e82:	f7ff fd91 	bl	80089a8 <_Balloc>
 8008e86:	4605      	mov	r5, r0
 8008e88:	b948      	cbnz	r0, 8008e9e <__lshift+0x3e>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4b28      	ldr	r3, [pc, #160]	; (8008f30 <__lshift+0xd0>)
 8008e8e:	4829      	ldr	r0, [pc, #164]	; (8008f34 <__lshift+0xd4>)
 8008e90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e94:	f000 fc90 	bl	80097b8 <__assert_func>
 8008e98:	3101      	adds	r1, #1
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	e7ee      	b.n	8008e7c <__lshift+0x1c>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f100 0114 	add.w	r1, r0, #20
 8008ea4:	f100 0210 	add.w	r2, r0, #16
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	4553      	cmp	r3, sl
 8008eac:	db33      	blt.n	8008f16 <__lshift+0xb6>
 8008eae:	6920      	ldr	r0, [r4, #16]
 8008eb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008eb4:	f104 0314 	add.w	r3, r4, #20
 8008eb8:	f019 091f 	ands.w	r9, r9, #31
 8008ebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ec4:	d02b      	beq.n	8008f1e <__lshift+0xbe>
 8008ec6:	f1c9 0e20 	rsb	lr, r9, #32
 8008eca:	468a      	mov	sl, r1
 8008ecc:	2200      	movs	r2, #0
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ed4:	4302      	orrs	r2, r0
 8008ed6:	f84a 2b04 	str.w	r2, [sl], #4
 8008eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ede:	459c      	cmp	ip, r3
 8008ee0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ee4:	d8f3      	bhi.n	8008ece <__lshift+0x6e>
 8008ee6:	ebac 0304 	sub.w	r3, ip, r4
 8008eea:	3b15      	subs	r3, #21
 8008eec:	f023 0303 	bic.w	r3, r3, #3
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	f104 0015 	add.w	r0, r4, #21
 8008ef6:	4584      	cmp	ip, r0
 8008ef8:	bf38      	it	cc
 8008efa:	2304      	movcc	r3, #4
 8008efc:	50ca      	str	r2, [r1, r3]
 8008efe:	b10a      	cbz	r2, 8008f04 <__lshift+0xa4>
 8008f00:	f108 0602 	add.w	r6, r8, #2
 8008f04:	3e01      	subs	r6, #1
 8008f06:	4638      	mov	r0, r7
 8008f08:	612e      	str	r6, [r5, #16]
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	f7ff fd8c 	bl	8008a28 <_Bfree>
 8008f10:	4628      	mov	r0, r5
 8008f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f16:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	e7c5      	b.n	8008eaa <__lshift+0x4a>
 8008f1e:	3904      	subs	r1, #4
 8008f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f24:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f28:	459c      	cmp	ip, r3
 8008f2a:	d8f9      	bhi.n	8008f20 <__lshift+0xc0>
 8008f2c:	e7ea      	b.n	8008f04 <__lshift+0xa4>
 8008f2e:	bf00      	nop
 8008f30:	0800a76c 	.word	0x0800a76c
 8008f34:	0800a7fc 	.word	0x0800a7fc

08008f38 <__mcmp>:
 8008f38:	b530      	push	{r4, r5, lr}
 8008f3a:	6902      	ldr	r2, [r0, #16]
 8008f3c:	690c      	ldr	r4, [r1, #16]
 8008f3e:	1b12      	subs	r2, r2, r4
 8008f40:	d10e      	bne.n	8008f60 <__mcmp+0x28>
 8008f42:	f100 0314 	add.w	r3, r0, #20
 8008f46:	3114      	adds	r1, #20
 8008f48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f58:	42a5      	cmp	r5, r4
 8008f5a:	d003      	beq.n	8008f64 <__mcmp+0x2c>
 8008f5c:	d305      	bcc.n	8008f6a <__mcmp+0x32>
 8008f5e:	2201      	movs	r2, #1
 8008f60:	4610      	mov	r0, r2
 8008f62:	bd30      	pop	{r4, r5, pc}
 8008f64:	4283      	cmp	r3, r0
 8008f66:	d3f3      	bcc.n	8008f50 <__mcmp+0x18>
 8008f68:	e7fa      	b.n	8008f60 <__mcmp+0x28>
 8008f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6e:	e7f7      	b.n	8008f60 <__mcmp+0x28>

08008f70 <__mdiff>:
 8008f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	460c      	mov	r4, r1
 8008f76:	4606      	mov	r6, r0
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	4617      	mov	r7, r2
 8008f7e:	f7ff ffdb 	bl	8008f38 <__mcmp>
 8008f82:	1e05      	subs	r5, r0, #0
 8008f84:	d110      	bne.n	8008fa8 <__mdiff+0x38>
 8008f86:	4629      	mov	r1, r5
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7ff fd0d 	bl	80089a8 <_Balloc>
 8008f8e:	b930      	cbnz	r0, 8008f9e <__mdiff+0x2e>
 8008f90:	4b39      	ldr	r3, [pc, #228]	; (8009078 <__mdiff+0x108>)
 8008f92:	4602      	mov	r2, r0
 8008f94:	f240 2132 	movw	r1, #562	; 0x232
 8008f98:	4838      	ldr	r0, [pc, #224]	; (800907c <__mdiff+0x10c>)
 8008f9a:	f000 fc0d 	bl	80097b8 <__assert_func>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa8:	bfa4      	itt	ge
 8008faa:	463b      	movge	r3, r7
 8008fac:	4627      	movge	r7, r4
 8008fae:	4630      	mov	r0, r6
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	bfa6      	itte	ge
 8008fb4:	461c      	movge	r4, r3
 8008fb6:	2500      	movge	r5, #0
 8008fb8:	2501      	movlt	r5, #1
 8008fba:	f7ff fcf5 	bl	80089a8 <_Balloc>
 8008fbe:	b920      	cbnz	r0, 8008fca <__mdiff+0x5a>
 8008fc0:	4b2d      	ldr	r3, [pc, #180]	; (8009078 <__mdiff+0x108>)
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008fc8:	e7e6      	b.n	8008f98 <__mdiff+0x28>
 8008fca:	693e      	ldr	r6, [r7, #16]
 8008fcc:	60c5      	str	r5, [r0, #12]
 8008fce:	6925      	ldr	r5, [r4, #16]
 8008fd0:	f107 0114 	add.w	r1, r7, #20
 8008fd4:	f104 0914 	add.w	r9, r4, #20
 8008fd8:	f100 0e14 	add.w	lr, r0, #20
 8008fdc:	f107 0210 	add.w	r2, r7, #16
 8008fe0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008fe4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008fe8:	46f2      	mov	sl, lr
 8008fea:	2700      	movs	r7, #0
 8008fec:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ff4:	fa1f f883 	uxth.w	r8, r3
 8008ff8:	fa17 f78b 	uxtah	r7, r7, fp
 8008ffc:	0c1b      	lsrs	r3, r3, #16
 8008ffe:	eba7 0808 	sub.w	r8, r7, r8
 8009002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009006:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800900a:	fa1f f888 	uxth.w	r8, r8
 800900e:	141f      	asrs	r7, r3, #16
 8009010:	454d      	cmp	r5, r9
 8009012:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009016:	f84a 3b04 	str.w	r3, [sl], #4
 800901a:	d8e7      	bhi.n	8008fec <__mdiff+0x7c>
 800901c:	1b2b      	subs	r3, r5, r4
 800901e:	3b15      	subs	r3, #21
 8009020:	f023 0303 	bic.w	r3, r3, #3
 8009024:	3304      	adds	r3, #4
 8009026:	3415      	adds	r4, #21
 8009028:	42a5      	cmp	r5, r4
 800902a:	bf38      	it	cc
 800902c:	2304      	movcc	r3, #4
 800902e:	4419      	add	r1, r3
 8009030:	4473      	add	r3, lr
 8009032:	469e      	mov	lr, r3
 8009034:	460d      	mov	r5, r1
 8009036:	4565      	cmp	r5, ip
 8009038:	d30e      	bcc.n	8009058 <__mdiff+0xe8>
 800903a:	f10c 0203 	add.w	r2, ip, #3
 800903e:	1a52      	subs	r2, r2, r1
 8009040:	f022 0203 	bic.w	r2, r2, #3
 8009044:	3903      	subs	r1, #3
 8009046:	458c      	cmp	ip, r1
 8009048:	bf38      	it	cc
 800904a:	2200      	movcc	r2, #0
 800904c:	441a      	add	r2, r3
 800904e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009052:	b17b      	cbz	r3, 8009074 <__mdiff+0x104>
 8009054:	6106      	str	r6, [r0, #16]
 8009056:	e7a5      	b.n	8008fa4 <__mdiff+0x34>
 8009058:	f855 8b04 	ldr.w	r8, [r5], #4
 800905c:	fa17 f488 	uxtah	r4, r7, r8
 8009060:	1422      	asrs	r2, r4, #16
 8009062:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009066:	b2a4      	uxth	r4, r4
 8009068:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800906c:	f84e 4b04 	str.w	r4, [lr], #4
 8009070:	1417      	asrs	r7, r2, #16
 8009072:	e7e0      	b.n	8009036 <__mdiff+0xc6>
 8009074:	3e01      	subs	r6, #1
 8009076:	e7ea      	b.n	800904e <__mdiff+0xde>
 8009078:	0800a76c 	.word	0x0800a76c
 800907c:	0800a7fc 	.word	0x0800a7fc

08009080 <__ulp>:
 8009080:	b082      	sub	sp, #8
 8009082:	ed8d 0b00 	vstr	d0, [sp]
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	4912      	ldr	r1, [pc, #72]	; (80090d4 <__ulp+0x54>)
 800908a:	4019      	ands	r1, r3
 800908c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009090:	2900      	cmp	r1, #0
 8009092:	dd05      	ble.n	80090a0 <__ulp+0x20>
 8009094:	2200      	movs	r2, #0
 8009096:	460b      	mov	r3, r1
 8009098:	ec43 2b10 	vmov	d0, r2, r3
 800909c:	b002      	add	sp, #8
 800909e:	4770      	bx	lr
 80090a0:	4249      	negs	r1, r1
 80090a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80090a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80090aa:	f04f 0200 	mov.w	r2, #0
 80090ae:	f04f 0300 	mov.w	r3, #0
 80090b2:	da04      	bge.n	80090be <__ulp+0x3e>
 80090b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80090b8:	fa41 f300 	asr.w	r3, r1, r0
 80090bc:	e7ec      	b.n	8009098 <__ulp+0x18>
 80090be:	f1a0 0114 	sub.w	r1, r0, #20
 80090c2:	291e      	cmp	r1, #30
 80090c4:	bfda      	itte	le
 80090c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80090ca:	fa20 f101 	lsrle.w	r1, r0, r1
 80090ce:	2101      	movgt	r1, #1
 80090d0:	460a      	mov	r2, r1
 80090d2:	e7e1      	b.n	8009098 <__ulp+0x18>
 80090d4:	7ff00000 	.word	0x7ff00000

080090d8 <__b2d>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	6905      	ldr	r5, [r0, #16]
 80090dc:	f100 0714 	add.w	r7, r0, #20
 80090e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80090e4:	1f2e      	subs	r6, r5, #4
 80090e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80090ea:	4620      	mov	r0, r4
 80090ec:	f7ff fd52 	bl	8008b94 <__hi0bits>
 80090f0:	f1c0 0320 	rsb	r3, r0, #32
 80090f4:	280a      	cmp	r0, #10
 80090f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009174 <__b2d+0x9c>
 80090fa:	600b      	str	r3, [r1, #0]
 80090fc:	dc14      	bgt.n	8009128 <__b2d+0x50>
 80090fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009102:	fa24 f10e 	lsr.w	r1, r4, lr
 8009106:	42b7      	cmp	r7, r6
 8009108:	ea41 030c 	orr.w	r3, r1, ip
 800910c:	bf34      	ite	cc
 800910e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009112:	2100      	movcs	r1, #0
 8009114:	3015      	adds	r0, #21
 8009116:	fa04 f000 	lsl.w	r0, r4, r0
 800911a:	fa21 f10e 	lsr.w	r1, r1, lr
 800911e:	ea40 0201 	orr.w	r2, r0, r1
 8009122:	ec43 2b10 	vmov	d0, r2, r3
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009128:	42b7      	cmp	r7, r6
 800912a:	bf3a      	itte	cc
 800912c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009130:	f1a5 0608 	subcc.w	r6, r5, #8
 8009134:	2100      	movcs	r1, #0
 8009136:	380b      	subs	r0, #11
 8009138:	d017      	beq.n	800916a <__b2d+0x92>
 800913a:	f1c0 0c20 	rsb	ip, r0, #32
 800913e:	fa04 f500 	lsl.w	r5, r4, r0
 8009142:	42be      	cmp	r6, r7
 8009144:	fa21 f40c 	lsr.w	r4, r1, ip
 8009148:	ea45 0504 	orr.w	r5, r5, r4
 800914c:	bf8c      	ite	hi
 800914e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009152:	2400      	movls	r4, #0
 8009154:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009158:	fa01 f000 	lsl.w	r0, r1, r0
 800915c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009160:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009164:	ea40 0204 	orr.w	r2, r0, r4
 8009168:	e7db      	b.n	8009122 <__b2d+0x4a>
 800916a:	ea44 030c 	orr.w	r3, r4, ip
 800916e:	460a      	mov	r2, r1
 8009170:	e7d7      	b.n	8009122 <__b2d+0x4a>
 8009172:	bf00      	nop
 8009174:	3ff00000 	.word	0x3ff00000

08009178 <__d2b>:
 8009178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800917c:	4689      	mov	r9, r1
 800917e:	2101      	movs	r1, #1
 8009180:	ec57 6b10 	vmov	r6, r7, d0
 8009184:	4690      	mov	r8, r2
 8009186:	f7ff fc0f 	bl	80089a8 <_Balloc>
 800918a:	4604      	mov	r4, r0
 800918c:	b930      	cbnz	r0, 800919c <__d2b+0x24>
 800918e:	4602      	mov	r2, r0
 8009190:	4b25      	ldr	r3, [pc, #148]	; (8009228 <__d2b+0xb0>)
 8009192:	4826      	ldr	r0, [pc, #152]	; (800922c <__d2b+0xb4>)
 8009194:	f240 310a 	movw	r1, #778	; 0x30a
 8009198:	f000 fb0e 	bl	80097b8 <__assert_func>
 800919c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091a4:	bb35      	cbnz	r5, 80091f4 <__d2b+0x7c>
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	d028      	beq.n	80091fe <__d2b+0x86>
 80091ac:	4668      	mov	r0, sp
 80091ae:	9600      	str	r6, [sp, #0]
 80091b0:	f7ff fd10 	bl	8008bd4 <__lo0bits>
 80091b4:	9900      	ldr	r1, [sp, #0]
 80091b6:	b300      	cbz	r0, 80091fa <__d2b+0x82>
 80091b8:	9a01      	ldr	r2, [sp, #4]
 80091ba:	f1c0 0320 	rsb	r3, r0, #32
 80091be:	fa02 f303 	lsl.w	r3, r2, r3
 80091c2:	430b      	orrs	r3, r1
 80091c4:	40c2      	lsrs	r2, r0
 80091c6:	6163      	str	r3, [r4, #20]
 80091c8:	9201      	str	r2, [sp, #4]
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	61a3      	str	r3, [r4, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bf14      	ite	ne
 80091d2:	2202      	movne	r2, #2
 80091d4:	2201      	moveq	r2, #1
 80091d6:	6122      	str	r2, [r4, #16]
 80091d8:	b1d5      	cbz	r5, 8009210 <__d2b+0x98>
 80091da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091de:	4405      	add	r5, r0
 80091e0:	f8c9 5000 	str.w	r5, [r9]
 80091e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091e8:	f8c8 0000 	str.w	r0, [r8]
 80091ec:	4620      	mov	r0, r4
 80091ee:	b003      	add	sp, #12
 80091f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091f8:	e7d5      	b.n	80091a6 <__d2b+0x2e>
 80091fa:	6161      	str	r1, [r4, #20]
 80091fc:	e7e5      	b.n	80091ca <__d2b+0x52>
 80091fe:	a801      	add	r0, sp, #4
 8009200:	f7ff fce8 	bl	8008bd4 <__lo0bits>
 8009204:	9b01      	ldr	r3, [sp, #4]
 8009206:	6163      	str	r3, [r4, #20]
 8009208:	2201      	movs	r2, #1
 800920a:	6122      	str	r2, [r4, #16]
 800920c:	3020      	adds	r0, #32
 800920e:	e7e3      	b.n	80091d8 <__d2b+0x60>
 8009210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009218:	f8c9 0000 	str.w	r0, [r9]
 800921c:	6918      	ldr	r0, [r3, #16]
 800921e:	f7ff fcb9 	bl	8008b94 <__hi0bits>
 8009222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009226:	e7df      	b.n	80091e8 <__d2b+0x70>
 8009228:	0800a76c 	.word	0x0800a76c
 800922c:	0800a7fc 	.word	0x0800a7fc

08009230 <__ratio>:
 8009230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	4688      	mov	r8, r1
 8009236:	4669      	mov	r1, sp
 8009238:	4681      	mov	r9, r0
 800923a:	f7ff ff4d 	bl	80090d8 <__b2d>
 800923e:	a901      	add	r1, sp, #4
 8009240:	4640      	mov	r0, r8
 8009242:	ec55 4b10 	vmov	r4, r5, d0
 8009246:	f7ff ff47 	bl	80090d8 <__b2d>
 800924a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800924e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009252:	eba3 0c02 	sub.w	ip, r3, r2
 8009256:	e9dd 3200 	ldrd	r3, r2, [sp]
 800925a:	1a9b      	subs	r3, r3, r2
 800925c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009260:	ec51 0b10 	vmov	r0, r1, d0
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfd6      	itet	le
 8009268:	460a      	movle	r2, r1
 800926a:	462a      	movgt	r2, r5
 800926c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009270:	468b      	mov	fp, r1
 8009272:	462f      	mov	r7, r5
 8009274:	bfd4      	ite	le
 8009276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800927a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800927e:	4620      	mov	r0, r4
 8009280:	ee10 2a10 	vmov	r2, s0
 8009284:	465b      	mov	r3, fp
 8009286:	4639      	mov	r1, r7
 8009288:	f7f7 fae8 	bl	800085c <__aeabi_ddiv>
 800928c:	ec41 0b10 	vmov	d0, r0, r1
 8009290:	b003      	add	sp, #12
 8009292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009296 <__copybits>:
 8009296:	3901      	subs	r1, #1
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	1149      	asrs	r1, r1, #5
 800929c:	6914      	ldr	r4, [r2, #16]
 800929e:	3101      	adds	r1, #1
 80092a0:	f102 0314 	add.w	r3, r2, #20
 80092a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092ac:	1f05      	subs	r5, r0, #4
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	d30c      	bcc.n	80092cc <__copybits+0x36>
 80092b2:	1aa3      	subs	r3, r4, r2
 80092b4:	3b11      	subs	r3, #17
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	3211      	adds	r2, #17
 80092bc:	42a2      	cmp	r2, r4
 80092be:	bf88      	it	hi
 80092c0:	2300      	movhi	r3, #0
 80092c2:	4418      	add	r0, r3
 80092c4:	2300      	movs	r3, #0
 80092c6:	4288      	cmp	r0, r1
 80092c8:	d305      	bcc.n	80092d6 <__copybits+0x40>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80092d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80092d4:	e7eb      	b.n	80092ae <__copybits+0x18>
 80092d6:	f840 3b04 	str.w	r3, [r0], #4
 80092da:	e7f4      	b.n	80092c6 <__copybits+0x30>

080092dc <__any_on>:
 80092dc:	f100 0214 	add.w	r2, r0, #20
 80092e0:	6900      	ldr	r0, [r0, #16]
 80092e2:	114b      	asrs	r3, r1, #5
 80092e4:	4298      	cmp	r0, r3
 80092e6:	b510      	push	{r4, lr}
 80092e8:	db11      	blt.n	800930e <__any_on+0x32>
 80092ea:	dd0a      	ble.n	8009302 <__any_on+0x26>
 80092ec:	f011 011f 	ands.w	r1, r1, #31
 80092f0:	d007      	beq.n	8009302 <__any_on+0x26>
 80092f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092f6:	fa24 f001 	lsr.w	r0, r4, r1
 80092fa:	fa00 f101 	lsl.w	r1, r0, r1
 80092fe:	428c      	cmp	r4, r1
 8009300:	d10b      	bne.n	800931a <__any_on+0x3e>
 8009302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009306:	4293      	cmp	r3, r2
 8009308:	d803      	bhi.n	8009312 <__any_on+0x36>
 800930a:	2000      	movs	r0, #0
 800930c:	bd10      	pop	{r4, pc}
 800930e:	4603      	mov	r3, r0
 8009310:	e7f7      	b.n	8009302 <__any_on+0x26>
 8009312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009316:	2900      	cmp	r1, #0
 8009318:	d0f5      	beq.n	8009306 <__any_on+0x2a>
 800931a:	2001      	movs	r0, #1
 800931c:	e7f6      	b.n	800930c <__any_on+0x30>

0800931e <_calloc_r>:
 800931e:	b513      	push	{r0, r1, r4, lr}
 8009320:	434a      	muls	r2, r1
 8009322:	4611      	mov	r1, r2
 8009324:	9201      	str	r2, [sp, #4]
 8009326:	f000 f859 	bl	80093dc <_malloc_r>
 800932a:	4604      	mov	r4, r0
 800932c:	b118      	cbz	r0, 8009336 <_calloc_r+0x18>
 800932e:	9a01      	ldr	r2, [sp, #4]
 8009330:	2100      	movs	r1, #0
 8009332:	f7fc fbc7 	bl	8005ac4 <memset>
 8009336:	4620      	mov	r0, r4
 8009338:	b002      	add	sp, #8
 800933a:	bd10      	pop	{r4, pc}

0800933c <_free_r>:
 800933c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800933e:	2900      	cmp	r1, #0
 8009340:	d048      	beq.n	80093d4 <_free_r+0x98>
 8009342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009346:	9001      	str	r0, [sp, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f1a1 0404 	sub.w	r4, r1, #4
 800934e:	bfb8      	it	lt
 8009350:	18e4      	addlt	r4, r4, r3
 8009352:	f000 fa7b 	bl	800984c <__malloc_lock>
 8009356:	4a20      	ldr	r2, [pc, #128]	; (80093d8 <_free_r+0x9c>)
 8009358:	9801      	ldr	r0, [sp, #4]
 800935a:	6813      	ldr	r3, [r2, #0]
 800935c:	4615      	mov	r5, r2
 800935e:	b933      	cbnz	r3, 800936e <_free_r+0x32>
 8009360:	6063      	str	r3, [r4, #4]
 8009362:	6014      	str	r4, [r2, #0]
 8009364:	b003      	add	sp, #12
 8009366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800936a:	f000 ba75 	b.w	8009858 <__malloc_unlock>
 800936e:	42a3      	cmp	r3, r4
 8009370:	d90b      	bls.n	800938a <_free_r+0x4e>
 8009372:	6821      	ldr	r1, [r4, #0]
 8009374:	1862      	adds	r2, r4, r1
 8009376:	4293      	cmp	r3, r2
 8009378:	bf04      	itt	eq
 800937a:	681a      	ldreq	r2, [r3, #0]
 800937c:	685b      	ldreq	r3, [r3, #4]
 800937e:	6063      	str	r3, [r4, #4]
 8009380:	bf04      	itt	eq
 8009382:	1852      	addeq	r2, r2, r1
 8009384:	6022      	streq	r2, [r4, #0]
 8009386:	602c      	str	r4, [r5, #0]
 8009388:	e7ec      	b.n	8009364 <_free_r+0x28>
 800938a:	461a      	mov	r2, r3
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	b10b      	cbz	r3, 8009394 <_free_r+0x58>
 8009390:	42a3      	cmp	r3, r4
 8009392:	d9fa      	bls.n	800938a <_free_r+0x4e>
 8009394:	6811      	ldr	r1, [r2, #0]
 8009396:	1855      	adds	r5, r2, r1
 8009398:	42a5      	cmp	r5, r4
 800939a:	d10b      	bne.n	80093b4 <_free_r+0x78>
 800939c:	6824      	ldr	r4, [r4, #0]
 800939e:	4421      	add	r1, r4
 80093a0:	1854      	adds	r4, r2, r1
 80093a2:	42a3      	cmp	r3, r4
 80093a4:	6011      	str	r1, [r2, #0]
 80093a6:	d1dd      	bne.n	8009364 <_free_r+0x28>
 80093a8:	681c      	ldr	r4, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	6053      	str	r3, [r2, #4]
 80093ae:	4421      	add	r1, r4
 80093b0:	6011      	str	r1, [r2, #0]
 80093b2:	e7d7      	b.n	8009364 <_free_r+0x28>
 80093b4:	d902      	bls.n	80093bc <_free_r+0x80>
 80093b6:	230c      	movs	r3, #12
 80093b8:	6003      	str	r3, [r0, #0]
 80093ba:	e7d3      	b.n	8009364 <_free_r+0x28>
 80093bc:	6825      	ldr	r5, [r4, #0]
 80093be:	1961      	adds	r1, r4, r5
 80093c0:	428b      	cmp	r3, r1
 80093c2:	bf04      	itt	eq
 80093c4:	6819      	ldreq	r1, [r3, #0]
 80093c6:	685b      	ldreq	r3, [r3, #4]
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	bf04      	itt	eq
 80093cc:	1949      	addeq	r1, r1, r5
 80093ce:	6021      	streq	r1, [r4, #0]
 80093d0:	6054      	str	r4, [r2, #4]
 80093d2:	e7c7      	b.n	8009364 <_free_r+0x28>
 80093d4:	b003      	add	sp, #12
 80093d6:	bd30      	pop	{r4, r5, pc}
 80093d8:	2000020c 	.word	0x2000020c

080093dc <_malloc_r>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	1ccd      	adds	r5, r1, #3
 80093e0:	f025 0503 	bic.w	r5, r5, #3
 80093e4:	3508      	adds	r5, #8
 80093e6:	2d0c      	cmp	r5, #12
 80093e8:	bf38      	it	cc
 80093ea:	250c      	movcc	r5, #12
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	4606      	mov	r6, r0
 80093f0:	db01      	blt.n	80093f6 <_malloc_r+0x1a>
 80093f2:	42a9      	cmp	r1, r5
 80093f4:	d903      	bls.n	80093fe <_malloc_r+0x22>
 80093f6:	230c      	movs	r3, #12
 80093f8:	6033      	str	r3, [r6, #0]
 80093fa:	2000      	movs	r0, #0
 80093fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093fe:	f000 fa25 	bl	800984c <__malloc_lock>
 8009402:	4921      	ldr	r1, [pc, #132]	; (8009488 <_malloc_r+0xac>)
 8009404:	680a      	ldr	r2, [r1, #0]
 8009406:	4614      	mov	r4, r2
 8009408:	b99c      	cbnz	r4, 8009432 <_malloc_r+0x56>
 800940a:	4f20      	ldr	r7, [pc, #128]	; (800948c <_malloc_r+0xb0>)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	b923      	cbnz	r3, 800941a <_malloc_r+0x3e>
 8009410:	4621      	mov	r1, r4
 8009412:	4630      	mov	r0, r6
 8009414:	f000 f9a0 	bl	8009758 <_sbrk_r>
 8009418:	6038      	str	r0, [r7, #0]
 800941a:	4629      	mov	r1, r5
 800941c:	4630      	mov	r0, r6
 800941e:	f000 f99b 	bl	8009758 <_sbrk_r>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d123      	bne.n	800946e <_malloc_r+0x92>
 8009426:	230c      	movs	r3, #12
 8009428:	6033      	str	r3, [r6, #0]
 800942a:	4630      	mov	r0, r6
 800942c:	f000 fa14 	bl	8009858 <__malloc_unlock>
 8009430:	e7e3      	b.n	80093fa <_malloc_r+0x1e>
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	1b5b      	subs	r3, r3, r5
 8009436:	d417      	bmi.n	8009468 <_malloc_r+0x8c>
 8009438:	2b0b      	cmp	r3, #11
 800943a:	d903      	bls.n	8009444 <_malloc_r+0x68>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	441c      	add	r4, r3
 8009440:	6025      	str	r5, [r4, #0]
 8009442:	e004      	b.n	800944e <_malloc_r+0x72>
 8009444:	6863      	ldr	r3, [r4, #4]
 8009446:	42a2      	cmp	r2, r4
 8009448:	bf0c      	ite	eq
 800944a:	600b      	streq	r3, [r1, #0]
 800944c:	6053      	strne	r3, [r2, #4]
 800944e:	4630      	mov	r0, r6
 8009450:	f000 fa02 	bl	8009858 <__malloc_unlock>
 8009454:	f104 000b 	add.w	r0, r4, #11
 8009458:	1d23      	adds	r3, r4, #4
 800945a:	f020 0007 	bic.w	r0, r0, #7
 800945e:	1ac2      	subs	r2, r0, r3
 8009460:	d0cc      	beq.n	80093fc <_malloc_r+0x20>
 8009462:	1a1b      	subs	r3, r3, r0
 8009464:	50a3      	str	r3, [r4, r2]
 8009466:	e7c9      	b.n	80093fc <_malloc_r+0x20>
 8009468:	4622      	mov	r2, r4
 800946a:	6864      	ldr	r4, [r4, #4]
 800946c:	e7cc      	b.n	8009408 <_malloc_r+0x2c>
 800946e:	1cc4      	adds	r4, r0, #3
 8009470:	f024 0403 	bic.w	r4, r4, #3
 8009474:	42a0      	cmp	r0, r4
 8009476:	d0e3      	beq.n	8009440 <_malloc_r+0x64>
 8009478:	1a21      	subs	r1, r4, r0
 800947a:	4630      	mov	r0, r6
 800947c:	f000 f96c 	bl	8009758 <_sbrk_r>
 8009480:	3001      	adds	r0, #1
 8009482:	d1dd      	bne.n	8009440 <_malloc_r+0x64>
 8009484:	e7cf      	b.n	8009426 <_malloc_r+0x4a>
 8009486:	bf00      	nop
 8009488:	2000020c 	.word	0x2000020c
 800948c:	20000210 	.word	0x20000210

08009490 <__ssputs_r>:
 8009490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009494:	688e      	ldr	r6, [r1, #8]
 8009496:	429e      	cmp	r6, r3
 8009498:	4682      	mov	sl, r0
 800949a:	460c      	mov	r4, r1
 800949c:	4690      	mov	r8, r2
 800949e:	461f      	mov	r7, r3
 80094a0:	d838      	bhi.n	8009514 <__ssputs_r+0x84>
 80094a2:	898a      	ldrh	r2, [r1, #12]
 80094a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094a8:	d032      	beq.n	8009510 <__ssputs_r+0x80>
 80094aa:	6825      	ldr	r5, [r4, #0]
 80094ac:	6909      	ldr	r1, [r1, #16]
 80094ae:	eba5 0901 	sub.w	r9, r5, r1
 80094b2:	6965      	ldr	r5, [r4, #20]
 80094b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094bc:	3301      	adds	r3, #1
 80094be:	444b      	add	r3, r9
 80094c0:	106d      	asrs	r5, r5, #1
 80094c2:	429d      	cmp	r5, r3
 80094c4:	bf38      	it	cc
 80094c6:	461d      	movcc	r5, r3
 80094c8:	0553      	lsls	r3, r2, #21
 80094ca:	d531      	bpl.n	8009530 <__ssputs_r+0xa0>
 80094cc:	4629      	mov	r1, r5
 80094ce:	f7ff ff85 	bl	80093dc <_malloc_r>
 80094d2:	4606      	mov	r6, r0
 80094d4:	b950      	cbnz	r0, 80094ec <__ssputs_r+0x5c>
 80094d6:	230c      	movs	r3, #12
 80094d8:	f8ca 3000 	str.w	r3, [sl]
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ec:	6921      	ldr	r1, [r4, #16]
 80094ee:	464a      	mov	r2, r9
 80094f0:	f7ff fa4c 	bl	800898c <memcpy>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	6126      	str	r6, [r4, #16]
 8009502:	6165      	str	r5, [r4, #20]
 8009504:	444e      	add	r6, r9
 8009506:	eba5 0509 	sub.w	r5, r5, r9
 800950a:	6026      	str	r6, [r4, #0]
 800950c:	60a5      	str	r5, [r4, #8]
 800950e:	463e      	mov	r6, r7
 8009510:	42be      	cmp	r6, r7
 8009512:	d900      	bls.n	8009516 <__ssputs_r+0x86>
 8009514:	463e      	mov	r6, r7
 8009516:	4632      	mov	r2, r6
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	4641      	mov	r1, r8
 800951c:	f000 f97c 	bl	8009818 <memmove>
 8009520:	68a3      	ldr	r3, [r4, #8]
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	1b9b      	subs	r3, r3, r6
 8009526:	4432      	add	r2, r6
 8009528:	60a3      	str	r3, [r4, #8]
 800952a:	6022      	str	r2, [r4, #0]
 800952c:	2000      	movs	r0, #0
 800952e:	e7db      	b.n	80094e8 <__ssputs_r+0x58>
 8009530:	462a      	mov	r2, r5
 8009532:	f000 f997 	bl	8009864 <_realloc_r>
 8009536:	4606      	mov	r6, r0
 8009538:	2800      	cmp	r0, #0
 800953a:	d1e1      	bne.n	8009500 <__ssputs_r+0x70>
 800953c:	6921      	ldr	r1, [r4, #16]
 800953e:	4650      	mov	r0, sl
 8009540:	f7ff fefc 	bl	800933c <_free_r>
 8009544:	e7c7      	b.n	80094d6 <__ssputs_r+0x46>
	...

08009548 <_svfiprintf_r>:
 8009548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	4698      	mov	r8, r3
 800954e:	898b      	ldrh	r3, [r1, #12]
 8009550:	061b      	lsls	r3, r3, #24
 8009552:	b09d      	sub	sp, #116	; 0x74
 8009554:	4607      	mov	r7, r0
 8009556:	460d      	mov	r5, r1
 8009558:	4614      	mov	r4, r2
 800955a:	d50e      	bpl.n	800957a <_svfiprintf_r+0x32>
 800955c:	690b      	ldr	r3, [r1, #16]
 800955e:	b963      	cbnz	r3, 800957a <_svfiprintf_r+0x32>
 8009560:	2140      	movs	r1, #64	; 0x40
 8009562:	f7ff ff3b 	bl	80093dc <_malloc_r>
 8009566:	6028      	str	r0, [r5, #0]
 8009568:	6128      	str	r0, [r5, #16]
 800956a:	b920      	cbnz	r0, 8009576 <_svfiprintf_r+0x2e>
 800956c:	230c      	movs	r3, #12
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	f04f 30ff 	mov.w	r0, #4294967295
 8009574:	e0d1      	b.n	800971a <_svfiprintf_r+0x1d2>
 8009576:	2340      	movs	r3, #64	; 0x40
 8009578:	616b      	str	r3, [r5, #20]
 800957a:	2300      	movs	r3, #0
 800957c:	9309      	str	r3, [sp, #36]	; 0x24
 800957e:	2320      	movs	r3, #32
 8009580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009584:	f8cd 800c 	str.w	r8, [sp, #12]
 8009588:	2330      	movs	r3, #48	; 0x30
 800958a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009734 <_svfiprintf_r+0x1ec>
 800958e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009592:	f04f 0901 	mov.w	r9, #1
 8009596:	4623      	mov	r3, r4
 8009598:	469a      	mov	sl, r3
 800959a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800959e:	b10a      	cbz	r2, 80095a4 <_svfiprintf_r+0x5c>
 80095a0:	2a25      	cmp	r2, #37	; 0x25
 80095a2:	d1f9      	bne.n	8009598 <_svfiprintf_r+0x50>
 80095a4:	ebba 0b04 	subs.w	fp, sl, r4
 80095a8:	d00b      	beq.n	80095c2 <_svfiprintf_r+0x7a>
 80095aa:	465b      	mov	r3, fp
 80095ac:	4622      	mov	r2, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	4638      	mov	r0, r7
 80095b2:	f7ff ff6d 	bl	8009490 <__ssputs_r>
 80095b6:	3001      	adds	r0, #1
 80095b8:	f000 80aa 	beq.w	8009710 <_svfiprintf_r+0x1c8>
 80095bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095be:	445a      	add	r2, fp
 80095c0:	9209      	str	r2, [sp, #36]	; 0x24
 80095c2:	f89a 3000 	ldrb.w	r3, [sl]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 80a2 	beq.w	8009710 <_svfiprintf_r+0x1c8>
 80095cc:	2300      	movs	r3, #0
 80095ce:	f04f 32ff 	mov.w	r2, #4294967295
 80095d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095d6:	f10a 0a01 	add.w	sl, sl, #1
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	9307      	str	r3, [sp, #28]
 80095de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095e2:	931a      	str	r3, [sp, #104]	; 0x68
 80095e4:	4654      	mov	r4, sl
 80095e6:	2205      	movs	r2, #5
 80095e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ec:	4851      	ldr	r0, [pc, #324]	; (8009734 <_svfiprintf_r+0x1ec>)
 80095ee:	f7f6 fdff 	bl	80001f0 <memchr>
 80095f2:	9a04      	ldr	r2, [sp, #16]
 80095f4:	b9d8      	cbnz	r0, 800962e <_svfiprintf_r+0xe6>
 80095f6:	06d0      	lsls	r0, r2, #27
 80095f8:	bf44      	itt	mi
 80095fa:	2320      	movmi	r3, #32
 80095fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009600:	0711      	lsls	r1, r2, #28
 8009602:	bf44      	itt	mi
 8009604:	232b      	movmi	r3, #43	; 0x2b
 8009606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800960a:	f89a 3000 	ldrb.w	r3, [sl]
 800960e:	2b2a      	cmp	r3, #42	; 0x2a
 8009610:	d015      	beq.n	800963e <_svfiprintf_r+0xf6>
 8009612:	9a07      	ldr	r2, [sp, #28]
 8009614:	4654      	mov	r4, sl
 8009616:	2000      	movs	r0, #0
 8009618:	f04f 0c0a 	mov.w	ip, #10
 800961c:	4621      	mov	r1, r4
 800961e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009622:	3b30      	subs	r3, #48	; 0x30
 8009624:	2b09      	cmp	r3, #9
 8009626:	d94e      	bls.n	80096c6 <_svfiprintf_r+0x17e>
 8009628:	b1b0      	cbz	r0, 8009658 <_svfiprintf_r+0x110>
 800962a:	9207      	str	r2, [sp, #28]
 800962c:	e014      	b.n	8009658 <_svfiprintf_r+0x110>
 800962e:	eba0 0308 	sub.w	r3, r0, r8
 8009632:	fa09 f303 	lsl.w	r3, r9, r3
 8009636:	4313      	orrs	r3, r2
 8009638:	9304      	str	r3, [sp, #16]
 800963a:	46a2      	mov	sl, r4
 800963c:	e7d2      	b.n	80095e4 <_svfiprintf_r+0x9c>
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	1d19      	adds	r1, r3, #4
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	9103      	str	r1, [sp, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	bfbb      	ittet	lt
 800964a:	425b      	neglt	r3, r3
 800964c:	f042 0202 	orrlt.w	r2, r2, #2
 8009650:	9307      	strge	r3, [sp, #28]
 8009652:	9307      	strlt	r3, [sp, #28]
 8009654:	bfb8      	it	lt
 8009656:	9204      	strlt	r2, [sp, #16]
 8009658:	7823      	ldrb	r3, [r4, #0]
 800965a:	2b2e      	cmp	r3, #46	; 0x2e
 800965c:	d10c      	bne.n	8009678 <_svfiprintf_r+0x130>
 800965e:	7863      	ldrb	r3, [r4, #1]
 8009660:	2b2a      	cmp	r3, #42	; 0x2a
 8009662:	d135      	bne.n	80096d0 <_svfiprintf_r+0x188>
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	1d1a      	adds	r2, r3, #4
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	9203      	str	r2, [sp, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	bfb8      	it	lt
 8009670:	f04f 33ff 	movlt.w	r3, #4294967295
 8009674:	3402      	adds	r4, #2
 8009676:	9305      	str	r3, [sp, #20]
 8009678:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009744 <_svfiprintf_r+0x1fc>
 800967c:	7821      	ldrb	r1, [r4, #0]
 800967e:	2203      	movs	r2, #3
 8009680:	4650      	mov	r0, sl
 8009682:	f7f6 fdb5 	bl	80001f0 <memchr>
 8009686:	b140      	cbz	r0, 800969a <_svfiprintf_r+0x152>
 8009688:	2340      	movs	r3, #64	; 0x40
 800968a:	eba0 000a 	sub.w	r0, r0, sl
 800968e:	fa03 f000 	lsl.w	r0, r3, r0
 8009692:	9b04      	ldr	r3, [sp, #16]
 8009694:	4303      	orrs	r3, r0
 8009696:	3401      	adds	r4, #1
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969e:	4826      	ldr	r0, [pc, #152]	; (8009738 <_svfiprintf_r+0x1f0>)
 80096a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096a4:	2206      	movs	r2, #6
 80096a6:	f7f6 fda3 	bl	80001f0 <memchr>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d038      	beq.n	8009720 <_svfiprintf_r+0x1d8>
 80096ae:	4b23      	ldr	r3, [pc, #140]	; (800973c <_svfiprintf_r+0x1f4>)
 80096b0:	bb1b      	cbnz	r3, 80096fa <_svfiprintf_r+0x1b2>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	3307      	adds	r3, #7
 80096b6:	f023 0307 	bic.w	r3, r3, #7
 80096ba:	3308      	adds	r3, #8
 80096bc:	9303      	str	r3, [sp, #12]
 80096be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c0:	4433      	add	r3, r6
 80096c2:	9309      	str	r3, [sp, #36]	; 0x24
 80096c4:	e767      	b.n	8009596 <_svfiprintf_r+0x4e>
 80096c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ca:	460c      	mov	r4, r1
 80096cc:	2001      	movs	r0, #1
 80096ce:	e7a5      	b.n	800961c <_svfiprintf_r+0xd4>
 80096d0:	2300      	movs	r3, #0
 80096d2:	3401      	adds	r4, #1
 80096d4:	9305      	str	r3, [sp, #20]
 80096d6:	4619      	mov	r1, r3
 80096d8:	f04f 0c0a 	mov.w	ip, #10
 80096dc:	4620      	mov	r0, r4
 80096de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e2:	3a30      	subs	r2, #48	; 0x30
 80096e4:	2a09      	cmp	r2, #9
 80096e6:	d903      	bls.n	80096f0 <_svfiprintf_r+0x1a8>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0c5      	beq.n	8009678 <_svfiprintf_r+0x130>
 80096ec:	9105      	str	r1, [sp, #20]
 80096ee:	e7c3      	b.n	8009678 <_svfiprintf_r+0x130>
 80096f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80096f4:	4604      	mov	r4, r0
 80096f6:	2301      	movs	r3, #1
 80096f8:	e7f0      	b.n	80096dc <_svfiprintf_r+0x194>
 80096fa:	ab03      	add	r3, sp, #12
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	462a      	mov	r2, r5
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <_svfiprintf_r+0x1f8>)
 8009702:	a904      	add	r1, sp, #16
 8009704:	4638      	mov	r0, r7
 8009706:	f7fc fa85 	bl	8005c14 <_printf_float>
 800970a:	1c42      	adds	r2, r0, #1
 800970c:	4606      	mov	r6, r0
 800970e:	d1d6      	bne.n	80096be <_svfiprintf_r+0x176>
 8009710:	89ab      	ldrh	r3, [r5, #12]
 8009712:	065b      	lsls	r3, r3, #25
 8009714:	f53f af2c 	bmi.w	8009570 <_svfiprintf_r+0x28>
 8009718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800971a:	b01d      	add	sp, #116	; 0x74
 800971c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009720:	ab03      	add	r3, sp, #12
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	462a      	mov	r2, r5
 8009726:	4b06      	ldr	r3, [pc, #24]	; (8009740 <_svfiprintf_r+0x1f8>)
 8009728:	a904      	add	r1, sp, #16
 800972a:	4638      	mov	r0, r7
 800972c:	f7fc fd16 	bl	800615c <_printf_i>
 8009730:	e7eb      	b.n	800970a <_svfiprintf_r+0x1c2>
 8009732:	bf00      	nop
 8009734:	0800a95c 	.word	0x0800a95c
 8009738:	0800a966 	.word	0x0800a966
 800973c:	08005c15 	.word	0x08005c15
 8009740:	08009491 	.word	0x08009491
 8009744:	0800a962 	.word	0x0800a962

08009748 <nan>:
 8009748:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009750 <nan+0x8>
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	00000000 	.word	0x00000000
 8009754:	7ff80000 	.word	0x7ff80000

08009758 <_sbrk_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d06      	ldr	r5, [pc, #24]	; (8009774 <_sbrk_r+0x1c>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7f9 f8a4 	bl	80028b0 <_sbrk>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_sbrk_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_sbrk_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	200033c4 	.word	0x200033c4

08009778 <strncmp>:
 8009778:	b510      	push	{r4, lr}
 800977a:	b16a      	cbz	r2, 8009798 <strncmp+0x20>
 800977c:	3901      	subs	r1, #1
 800977e:	1884      	adds	r4, r0, r2
 8009780:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009784:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009788:	4293      	cmp	r3, r2
 800978a:	d103      	bne.n	8009794 <strncmp+0x1c>
 800978c:	42a0      	cmp	r0, r4
 800978e:	d001      	beq.n	8009794 <strncmp+0x1c>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1f5      	bne.n	8009780 <strncmp+0x8>
 8009794:	1a98      	subs	r0, r3, r2
 8009796:	bd10      	pop	{r4, pc}
 8009798:	4610      	mov	r0, r2
 800979a:	e7fc      	b.n	8009796 <strncmp+0x1e>

0800979c <__ascii_wctomb>:
 800979c:	b149      	cbz	r1, 80097b2 <__ascii_wctomb+0x16>
 800979e:	2aff      	cmp	r2, #255	; 0xff
 80097a0:	bf85      	ittet	hi
 80097a2:	238a      	movhi	r3, #138	; 0x8a
 80097a4:	6003      	strhi	r3, [r0, #0]
 80097a6:	700a      	strbls	r2, [r1, #0]
 80097a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80097ac:	bf98      	it	ls
 80097ae:	2001      	movls	r0, #1
 80097b0:	4770      	bx	lr
 80097b2:	4608      	mov	r0, r1
 80097b4:	4770      	bx	lr
	...

080097b8 <__assert_func>:
 80097b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097ba:	4614      	mov	r4, r2
 80097bc:	461a      	mov	r2, r3
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <__assert_func+0x2c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4605      	mov	r5, r0
 80097c4:	68d8      	ldr	r0, [r3, #12]
 80097c6:	b14c      	cbz	r4, 80097dc <__assert_func+0x24>
 80097c8:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <__assert_func+0x30>)
 80097ca:	9100      	str	r1, [sp, #0]
 80097cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097d0:	4906      	ldr	r1, [pc, #24]	; (80097ec <__assert_func+0x34>)
 80097d2:	462b      	mov	r3, r5
 80097d4:	f000 f80e 	bl	80097f4 <fiprintf>
 80097d8:	f000 fa84 	bl	8009ce4 <abort>
 80097dc:	4b04      	ldr	r3, [pc, #16]	; (80097f0 <__assert_func+0x38>)
 80097de:	461c      	mov	r4, r3
 80097e0:	e7f3      	b.n	80097ca <__assert_func+0x12>
 80097e2:	bf00      	nop
 80097e4:	20000014 	.word	0x20000014
 80097e8:	0800a96d 	.word	0x0800a96d
 80097ec:	0800a97a 	.word	0x0800a97a
 80097f0:	0800a9a8 	.word	0x0800a9a8

080097f4 <fiprintf>:
 80097f4:	b40e      	push	{r1, r2, r3}
 80097f6:	b503      	push	{r0, r1, lr}
 80097f8:	4601      	mov	r1, r0
 80097fa:	ab03      	add	r3, sp, #12
 80097fc:	4805      	ldr	r0, [pc, #20]	; (8009814 <fiprintf+0x20>)
 80097fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009802:	6800      	ldr	r0, [r0, #0]
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	f000 f87d 	bl	8009904 <_vfiprintf_r>
 800980a:	b002      	add	sp, #8
 800980c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009810:	b003      	add	sp, #12
 8009812:	4770      	bx	lr
 8009814:	20000014 	.word	0x20000014

08009818 <memmove>:
 8009818:	4288      	cmp	r0, r1
 800981a:	b510      	push	{r4, lr}
 800981c:	eb01 0402 	add.w	r4, r1, r2
 8009820:	d902      	bls.n	8009828 <memmove+0x10>
 8009822:	4284      	cmp	r4, r0
 8009824:	4623      	mov	r3, r4
 8009826:	d807      	bhi.n	8009838 <memmove+0x20>
 8009828:	1e43      	subs	r3, r0, #1
 800982a:	42a1      	cmp	r1, r4
 800982c:	d008      	beq.n	8009840 <memmove+0x28>
 800982e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009836:	e7f8      	b.n	800982a <memmove+0x12>
 8009838:	4402      	add	r2, r0
 800983a:	4601      	mov	r1, r0
 800983c:	428a      	cmp	r2, r1
 800983e:	d100      	bne.n	8009842 <memmove+0x2a>
 8009840:	bd10      	pop	{r4, pc}
 8009842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800984a:	e7f7      	b.n	800983c <memmove+0x24>

0800984c <__malloc_lock>:
 800984c:	4801      	ldr	r0, [pc, #4]	; (8009854 <__malloc_lock+0x8>)
 800984e:	f000 bc09 	b.w	800a064 <__retarget_lock_acquire_recursive>
 8009852:	bf00      	nop
 8009854:	200033cc 	.word	0x200033cc

08009858 <__malloc_unlock>:
 8009858:	4801      	ldr	r0, [pc, #4]	; (8009860 <__malloc_unlock+0x8>)
 800985a:	f000 bc04 	b.w	800a066 <__retarget_lock_release_recursive>
 800985e:	bf00      	nop
 8009860:	200033cc 	.word	0x200033cc

08009864 <_realloc_r>:
 8009864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009866:	4607      	mov	r7, r0
 8009868:	4614      	mov	r4, r2
 800986a:	460e      	mov	r6, r1
 800986c:	b921      	cbnz	r1, 8009878 <_realloc_r+0x14>
 800986e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009872:	4611      	mov	r1, r2
 8009874:	f7ff bdb2 	b.w	80093dc <_malloc_r>
 8009878:	b922      	cbnz	r2, 8009884 <_realloc_r+0x20>
 800987a:	f7ff fd5f 	bl	800933c <_free_r>
 800987e:	4625      	mov	r5, r4
 8009880:	4628      	mov	r0, r5
 8009882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009884:	f000 fc54 	bl	800a130 <_malloc_usable_size_r>
 8009888:	42a0      	cmp	r0, r4
 800988a:	d20f      	bcs.n	80098ac <_realloc_r+0x48>
 800988c:	4621      	mov	r1, r4
 800988e:	4638      	mov	r0, r7
 8009890:	f7ff fda4 	bl	80093dc <_malloc_r>
 8009894:	4605      	mov	r5, r0
 8009896:	2800      	cmp	r0, #0
 8009898:	d0f2      	beq.n	8009880 <_realloc_r+0x1c>
 800989a:	4631      	mov	r1, r6
 800989c:	4622      	mov	r2, r4
 800989e:	f7ff f875 	bl	800898c <memcpy>
 80098a2:	4631      	mov	r1, r6
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff fd49 	bl	800933c <_free_r>
 80098aa:	e7e9      	b.n	8009880 <_realloc_r+0x1c>
 80098ac:	4635      	mov	r5, r6
 80098ae:	e7e7      	b.n	8009880 <_realloc_r+0x1c>

080098b0 <__sfputc_r>:
 80098b0:	6893      	ldr	r3, [r2, #8]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	b410      	push	{r4}
 80098b8:	6093      	str	r3, [r2, #8]
 80098ba:	da08      	bge.n	80098ce <__sfputc_r+0x1e>
 80098bc:	6994      	ldr	r4, [r2, #24]
 80098be:	42a3      	cmp	r3, r4
 80098c0:	db01      	blt.n	80098c6 <__sfputc_r+0x16>
 80098c2:	290a      	cmp	r1, #10
 80098c4:	d103      	bne.n	80098ce <__sfputc_r+0x1e>
 80098c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ca:	f000 b94b 	b.w	8009b64 <__swbuf_r>
 80098ce:	6813      	ldr	r3, [r2, #0]
 80098d0:	1c58      	adds	r0, r3, #1
 80098d2:	6010      	str	r0, [r2, #0]
 80098d4:	7019      	strb	r1, [r3, #0]
 80098d6:	4608      	mov	r0, r1
 80098d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098dc:	4770      	bx	lr

080098de <__sfputs_r>:
 80098de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e0:	4606      	mov	r6, r0
 80098e2:	460f      	mov	r7, r1
 80098e4:	4614      	mov	r4, r2
 80098e6:	18d5      	adds	r5, r2, r3
 80098e8:	42ac      	cmp	r4, r5
 80098ea:	d101      	bne.n	80098f0 <__sfputs_r+0x12>
 80098ec:	2000      	movs	r0, #0
 80098ee:	e007      	b.n	8009900 <__sfputs_r+0x22>
 80098f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f4:	463a      	mov	r2, r7
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ffda 	bl	80098b0 <__sfputc_r>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d1f3      	bne.n	80098e8 <__sfputs_r+0xa>
 8009900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009904 <_vfiprintf_r>:
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	460d      	mov	r5, r1
 800990a:	b09d      	sub	sp, #116	; 0x74
 800990c:	4614      	mov	r4, r2
 800990e:	4698      	mov	r8, r3
 8009910:	4606      	mov	r6, r0
 8009912:	b118      	cbz	r0, 800991c <_vfiprintf_r+0x18>
 8009914:	6983      	ldr	r3, [r0, #24]
 8009916:	b90b      	cbnz	r3, 800991c <_vfiprintf_r+0x18>
 8009918:	f000 fb06 	bl	8009f28 <__sinit>
 800991c:	4b89      	ldr	r3, [pc, #548]	; (8009b44 <_vfiprintf_r+0x240>)
 800991e:	429d      	cmp	r5, r3
 8009920:	d11b      	bne.n	800995a <_vfiprintf_r+0x56>
 8009922:	6875      	ldr	r5, [r6, #4]
 8009924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009926:	07d9      	lsls	r1, r3, #31
 8009928:	d405      	bmi.n	8009936 <_vfiprintf_r+0x32>
 800992a:	89ab      	ldrh	r3, [r5, #12]
 800992c:	059a      	lsls	r2, r3, #22
 800992e:	d402      	bmi.n	8009936 <_vfiprintf_r+0x32>
 8009930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009932:	f000 fb97 	bl	800a064 <__retarget_lock_acquire_recursive>
 8009936:	89ab      	ldrh	r3, [r5, #12]
 8009938:	071b      	lsls	r3, r3, #28
 800993a:	d501      	bpl.n	8009940 <_vfiprintf_r+0x3c>
 800993c:	692b      	ldr	r3, [r5, #16]
 800993e:	b9eb      	cbnz	r3, 800997c <_vfiprintf_r+0x78>
 8009940:	4629      	mov	r1, r5
 8009942:	4630      	mov	r0, r6
 8009944:	f000 f960 	bl	8009c08 <__swsetup_r>
 8009948:	b1c0      	cbz	r0, 800997c <_vfiprintf_r+0x78>
 800994a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800994c:	07dc      	lsls	r4, r3, #31
 800994e:	d50e      	bpl.n	800996e <_vfiprintf_r+0x6a>
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	b01d      	add	sp, #116	; 0x74
 8009956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995a:	4b7b      	ldr	r3, [pc, #492]	; (8009b48 <_vfiprintf_r+0x244>)
 800995c:	429d      	cmp	r5, r3
 800995e:	d101      	bne.n	8009964 <_vfiprintf_r+0x60>
 8009960:	68b5      	ldr	r5, [r6, #8]
 8009962:	e7df      	b.n	8009924 <_vfiprintf_r+0x20>
 8009964:	4b79      	ldr	r3, [pc, #484]	; (8009b4c <_vfiprintf_r+0x248>)
 8009966:	429d      	cmp	r5, r3
 8009968:	bf08      	it	eq
 800996a:	68f5      	ldreq	r5, [r6, #12]
 800996c:	e7da      	b.n	8009924 <_vfiprintf_r+0x20>
 800996e:	89ab      	ldrh	r3, [r5, #12]
 8009970:	0598      	lsls	r0, r3, #22
 8009972:	d4ed      	bmi.n	8009950 <_vfiprintf_r+0x4c>
 8009974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009976:	f000 fb76 	bl	800a066 <__retarget_lock_release_recursive>
 800997a:	e7e9      	b.n	8009950 <_vfiprintf_r+0x4c>
 800997c:	2300      	movs	r3, #0
 800997e:	9309      	str	r3, [sp, #36]	; 0x24
 8009980:	2320      	movs	r3, #32
 8009982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009986:	f8cd 800c 	str.w	r8, [sp, #12]
 800998a:	2330      	movs	r3, #48	; 0x30
 800998c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b50 <_vfiprintf_r+0x24c>
 8009990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009994:	f04f 0901 	mov.w	r9, #1
 8009998:	4623      	mov	r3, r4
 800999a:	469a      	mov	sl, r3
 800999c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a0:	b10a      	cbz	r2, 80099a6 <_vfiprintf_r+0xa2>
 80099a2:	2a25      	cmp	r2, #37	; 0x25
 80099a4:	d1f9      	bne.n	800999a <_vfiprintf_r+0x96>
 80099a6:	ebba 0b04 	subs.w	fp, sl, r4
 80099aa:	d00b      	beq.n	80099c4 <_vfiprintf_r+0xc0>
 80099ac:	465b      	mov	r3, fp
 80099ae:	4622      	mov	r2, r4
 80099b0:	4629      	mov	r1, r5
 80099b2:	4630      	mov	r0, r6
 80099b4:	f7ff ff93 	bl	80098de <__sfputs_r>
 80099b8:	3001      	adds	r0, #1
 80099ba:	f000 80aa 	beq.w	8009b12 <_vfiprintf_r+0x20e>
 80099be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c0:	445a      	add	r2, fp
 80099c2:	9209      	str	r2, [sp, #36]	; 0x24
 80099c4:	f89a 3000 	ldrb.w	r3, [sl]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 80a2 	beq.w	8009b12 <_vfiprintf_r+0x20e>
 80099ce:	2300      	movs	r3, #0
 80099d0:	f04f 32ff 	mov.w	r2, #4294967295
 80099d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099d8:	f10a 0a01 	add.w	sl, sl, #1
 80099dc:	9304      	str	r3, [sp, #16]
 80099de:	9307      	str	r3, [sp, #28]
 80099e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e4:	931a      	str	r3, [sp, #104]	; 0x68
 80099e6:	4654      	mov	r4, sl
 80099e8:	2205      	movs	r2, #5
 80099ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ee:	4858      	ldr	r0, [pc, #352]	; (8009b50 <_vfiprintf_r+0x24c>)
 80099f0:	f7f6 fbfe 	bl	80001f0 <memchr>
 80099f4:	9a04      	ldr	r2, [sp, #16]
 80099f6:	b9d8      	cbnz	r0, 8009a30 <_vfiprintf_r+0x12c>
 80099f8:	06d1      	lsls	r1, r2, #27
 80099fa:	bf44      	itt	mi
 80099fc:	2320      	movmi	r3, #32
 80099fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a02:	0713      	lsls	r3, r2, #28
 8009a04:	bf44      	itt	mi
 8009a06:	232b      	movmi	r3, #43	; 0x2b
 8009a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a10:	2b2a      	cmp	r3, #42	; 0x2a
 8009a12:	d015      	beq.n	8009a40 <_vfiprintf_r+0x13c>
 8009a14:	9a07      	ldr	r2, [sp, #28]
 8009a16:	4654      	mov	r4, sl
 8009a18:	2000      	movs	r0, #0
 8009a1a:	f04f 0c0a 	mov.w	ip, #10
 8009a1e:	4621      	mov	r1, r4
 8009a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a24:	3b30      	subs	r3, #48	; 0x30
 8009a26:	2b09      	cmp	r3, #9
 8009a28:	d94e      	bls.n	8009ac8 <_vfiprintf_r+0x1c4>
 8009a2a:	b1b0      	cbz	r0, 8009a5a <_vfiprintf_r+0x156>
 8009a2c:	9207      	str	r2, [sp, #28]
 8009a2e:	e014      	b.n	8009a5a <_vfiprintf_r+0x156>
 8009a30:	eba0 0308 	sub.w	r3, r0, r8
 8009a34:	fa09 f303 	lsl.w	r3, r9, r3
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	46a2      	mov	sl, r4
 8009a3e:	e7d2      	b.n	80099e6 <_vfiprintf_r+0xe2>
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	1d19      	adds	r1, r3, #4
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	9103      	str	r1, [sp, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bfbb      	ittet	lt
 8009a4c:	425b      	neglt	r3, r3
 8009a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a52:	9307      	strge	r3, [sp, #28]
 8009a54:	9307      	strlt	r3, [sp, #28]
 8009a56:	bfb8      	it	lt
 8009a58:	9204      	strlt	r2, [sp, #16]
 8009a5a:	7823      	ldrb	r3, [r4, #0]
 8009a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a5e:	d10c      	bne.n	8009a7a <_vfiprintf_r+0x176>
 8009a60:	7863      	ldrb	r3, [r4, #1]
 8009a62:	2b2a      	cmp	r3, #42	; 0x2a
 8009a64:	d135      	bne.n	8009ad2 <_vfiprintf_r+0x1ce>
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	1d1a      	adds	r2, r3, #4
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	9203      	str	r2, [sp, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bfb8      	it	lt
 8009a72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a76:	3402      	adds	r4, #2
 8009a78:	9305      	str	r3, [sp, #20]
 8009a7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b60 <_vfiprintf_r+0x25c>
 8009a7e:	7821      	ldrb	r1, [r4, #0]
 8009a80:	2203      	movs	r2, #3
 8009a82:	4650      	mov	r0, sl
 8009a84:	f7f6 fbb4 	bl	80001f0 <memchr>
 8009a88:	b140      	cbz	r0, 8009a9c <_vfiprintf_r+0x198>
 8009a8a:	2340      	movs	r3, #64	; 0x40
 8009a8c:	eba0 000a 	sub.w	r0, r0, sl
 8009a90:	fa03 f000 	lsl.w	r0, r3, r0
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	4303      	orrs	r3, r0
 8009a98:	3401      	adds	r4, #1
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa0:	482c      	ldr	r0, [pc, #176]	; (8009b54 <_vfiprintf_r+0x250>)
 8009aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aa6:	2206      	movs	r2, #6
 8009aa8:	f7f6 fba2 	bl	80001f0 <memchr>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d03f      	beq.n	8009b30 <_vfiprintf_r+0x22c>
 8009ab0:	4b29      	ldr	r3, [pc, #164]	; (8009b58 <_vfiprintf_r+0x254>)
 8009ab2:	bb1b      	cbnz	r3, 8009afc <_vfiprintf_r+0x1f8>
 8009ab4:	9b03      	ldr	r3, [sp, #12]
 8009ab6:	3307      	adds	r3, #7
 8009ab8:	f023 0307 	bic.w	r3, r3, #7
 8009abc:	3308      	adds	r3, #8
 8009abe:	9303      	str	r3, [sp, #12]
 8009ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac2:	443b      	add	r3, r7
 8009ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac6:	e767      	b.n	8009998 <_vfiprintf_r+0x94>
 8009ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009acc:	460c      	mov	r4, r1
 8009ace:	2001      	movs	r0, #1
 8009ad0:	e7a5      	b.n	8009a1e <_vfiprintf_r+0x11a>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	3401      	adds	r4, #1
 8009ad6:	9305      	str	r3, [sp, #20]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	f04f 0c0a 	mov.w	ip, #10
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae4:	3a30      	subs	r2, #48	; 0x30
 8009ae6:	2a09      	cmp	r2, #9
 8009ae8:	d903      	bls.n	8009af2 <_vfiprintf_r+0x1ee>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0c5      	beq.n	8009a7a <_vfiprintf_r+0x176>
 8009aee:	9105      	str	r1, [sp, #20]
 8009af0:	e7c3      	b.n	8009a7a <_vfiprintf_r+0x176>
 8009af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af6:	4604      	mov	r4, r0
 8009af8:	2301      	movs	r3, #1
 8009afa:	e7f0      	b.n	8009ade <_vfiprintf_r+0x1da>
 8009afc:	ab03      	add	r3, sp, #12
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	462a      	mov	r2, r5
 8009b02:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <_vfiprintf_r+0x258>)
 8009b04:	a904      	add	r1, sp, #16
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7fc f884 	bl	8005c14 <_printf_float>
 8009b0c:	4607      	mov	r7, r0
 8009b0e:	1c78      	adds	r0, r7, #1
 8009b10:	d1d6      	bne.n	8009ac0 <_vfiprintf_r+0x1bc>
 8009b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b14:	07d9      	lsls	r1, r3, #31
 8009b16:	d405      	bmi.n	8009b24 <_vfiprintf_r+0x220>
 8009b18:	89ab      	ldrh	r3, [r5, #12]
 8009b1a:	059a      	lsls	r2, r3, #22
 8009b1c:	d402      	bmi.n	8009b24 <_vfiprintf_r+0x220>
 8009b1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b20:	f000 faa1 	bl	800a066 <__retarget_lock_release_recursive>
 8009b24:	89ab      	ldrh	r3, [r5, #12]
 8009b26:	065b      	lsls	r3, r3, #25
 8009b28:	f53f af12 	bmi.w	8009950 <_vfiprintf_r+0x4c>
 8009b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b2e:	e711      	b.n	8009954 <_vfiprintf_r+0x50>
 8009b30:	ab03      	add	r3, sp, #12
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	462a      	mov	r2, r5
 8009b36:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <_vfiprintf_r+0x258>)
 8009b38:	a904      	add	r1, sp, #16
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f7fc fb0e 	bl	800615c <_printf_i>
 8009b40:	e7e4      	b.n	8009b0c <_vfiprintf_r+0x208>
 8009b42:	bf00      	nop
 8009b44:	0800a9cc 	.word	0x0800a9cc
 8009b48:	0800a9ec 	.word	0x0800a9ec
 8009b4c:	0800a9ac 	.word	0x0800a9ac
 8009b50:	0800a95c 	.word	0x0800a95c
 8009b54:	0800a966 	.word	0x0800a966
 8009b58:	08005c15 	.word	0x08005c15
 8009b5c:	080098df 	.word	0x080098df
 8009b60:	0800a962 	.word	0x0800a962

08009b64 <__swbuf_r>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	460e      	mov	r6, r1
 8009b68:	4614      	mov	r4, r2
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	b118      	cbz	r0, 8009b76 <__swbuf_r+0x12>
 8009b6e:	6983      	ldr	r3, [r0, #24]
 8009b70:	b90b      	cbnz	r3, 8009b76 <__swbuf_r+0x12>
 8009b72:	f000 f9d9 	bl	8009f28 <__sinit>
 8009b76:	4b21      	ldr	r3, [pc, #132]	; (8009bfc <__swbuf_r+0x98>)
 8009b78:	429c      	cmp	r4, r3
 8009b7a:	d12b      	bne.n	8009bd4 <__swbuf_r+0x70>
 8009b7c:	686c      	ldr	r4, [r5, #4]
 8009b7e:	69a3      	ldr	r3, [r4, #24]
 8009b80:	60a3      	str	r3, [r4, #8]
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	071a      	lsls	r2, r3, #28
 8009b86:	d52f      	bpl.n	8009be8 <__swbuf_r+0x84>
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	b36b      	cbz	r3, 8009be8 <__swbuf_r+0x84>
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	1ac0      	subs	r0, r0, r3
 8009b92:	6963      	ldr	r3, [r4, #20]
 8009b94:	b2f6      	uxtb	r6, r6
 8009b96:	4283      	cmp	r3, r0
 8009b98:	4637      	mov	r7, r6
 8009b9a:	dc04      	bgt.n	8009ba6 <__swbuf_r+0x42>
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 f92e 	bl	8009e00 <_fflush_r>
 8009ba4:	bb30      	cbnz	r0, 8009bf4 <__swbuf_r+0x90>
 8009ba6:	68a3      	ldr	r3, [r4, #8]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	60a3      	str	r3, [r4, #8]
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	6022      	str	r2, [r4, #0]
 8009bb2:	701e      	strb	r6, [r3, #0]
 8009bb4:	6963      	ldr	r3, [r4, #20]
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	4283      	cmp	r3, r0
 8009bba:	d004      	beq.n	8009bc6 <__swbuf_r+0x62>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	07db      	lsls	r3, r3, #31
 8009bc0:	d506      	bpl.n	8009bd0 <__swbuf_r+0x6c>
 8009bc2:	2e0a      	cmp	r6, #10
 8009bc4:	d104      	bne.n	8009bd0 <__swbuf_r+0x6c>
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f000 f919 	bl	8009e00 <_fflush_r>
 8009bce:	b988      	cbnz	r0, 8009bf4 <__swbuf_r+0x90>
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <__swbuf_r+0x9c>)
 8009bd6:	429c      	cmp	r4, r3
 8009bd8:	d101      	bne.n	8009bde <__swbuf_r+0x7a>
 8009bda:	68ac      	ldr	r4, [r5, #8]
 8009bdc:	e7cf      	b.n	8009b7e <__swbuf_r+0x1a>
 8009bde:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <__swbuf_r+0xa0>)
 8009be0:	429c      	cmp	r4, r3
 8009be2:	bf08      	it	eq
 8009be4:	68ec      	ldreq	r4, [r5, #12]
 8009be6:	e7ca      	b.n	8009b7e <__swbuf_r+0x1a>
 8009be8:	4621      	mov	r1, r4
 8009bea:	4628      	mov	r0, r5
 8009bec:	f000 f80c 	bl	8009c08 <__swsetup_r>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d0cb      	beq.n	8009b8c <__swbuf_r+0x28>
 8009bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8009bf8:	e7ea      	b.n	8009bd0 <__swbuf_r+0x6c>
 8009bfa:	bf00      	nop
 8009bfc:	0800a9cc 	.word	0x0800a9cc
 8009c00:	0800a9ec 	.word	0x0800a9ec
 8009c04:	0800a9ac 	.word	0x0800a9ac

08009c08 <__swsetup_r>:
 8009c08:	4b32      	ldr	r3, [pc, #200]	; (8009cd4 <__swsetup_r+0xcc>)
 8009c0a:	b570      	push	{r4, r5, r6, lr}
 8009c0c:	681d      	ldr	r5, [r3, #0]
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460c      	mov	r4, r1
 8009c12:	b125      	cbz	r5, 8009c1e <__swsetup_r+0x16>
 8009c14:	69ab      	ldr	r3, [r5, #24]
 8009c16:	b913      	cbnz	r3, 8009c1e <__swsetup_r+0x16>
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f000 f985 	bl	8009f28 <__sinit>
 8009c1e:	4b2e      	ldr	r3, [pc, #184]	; (8009cd8 <__swsetup_r+0xd0>)
 8009c20:	429c      	cmp	r4, r3
 8009c22:	d10f      	bne.n	8009c44 <__swsetup_r+0x3c>
 8009c24:	686c      	ldr	r4, [r5, #4]
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c2c:	0719      	lsls	r1, r3, #28
 8009c2e:	d42c      	bmi.n	8009c8a <__swsetup_r+0x82>
 8009c30:	06dd      	lsls	r5, r3, #27
 8009c32:	d411      	bmi.n	8009c58 <__swsetup_r+0x50>
 8009c34:	2309      	movs	r3, #9
 8009c36:	6033      	str	r3, [r6, #0]
 8009c38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c42:	e03e      	b.n	8009cc2 <__swsetup_r+0xba>
 8009c44:	4b25      	ldr	r3, [pc, #148]	; (8009cdc <__swsetup_r+0xd4>)
 8009c46:	429c      	cmp	r4, r3
 8009c48:	d101      	bne.n	8009c4e <__swsetup_r+0x46>
 8009c4a:	68ac      	ldr	r4, [r5, #8]
 8009c4c:	e7eb      	b.n	8009c26 <__swsetup_r+0x1e>
 8009c4e:	4b24      	ldr	r3, [pc, #144]	; (8009ce0 <__swsetup_r+0xd8>)
 8009c50:	429c      	cmp	r4, r3
 8009c52:	bf08      	it	eq
 8009c54:	68ec      	ldreq	r4, [r5, #12]
 8009c56:	e7e6      	b.n	8009c26 <__swsetup_r+0x1e>
 8009c58:	0758      	lsls	r0, r3, #29
 8009c5a:	d512      	bpl.n	8009c82 <__swsetup_r+0x7a>
 8009c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c5e:	b141      	cbz	r1, 8009c72 <__swsetup_r+0x6a>
 8009c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c64:	4299      	cmp	r1, r3
 8009c66:	d002      	beq.n	8009c6e <__swsetup_r+0x66>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7ff fb67 	bl	800933c <_free_r>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6363      	str	r3, [r4, #52]	; 0x34
 8009c72:	89a3      	ldrh	r3, [r4, #12]
 8009c74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6063      	str	r3, [r4, #4]
 8009c7e:	6923      	ldr	r3, [r4, #16]
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f043 0308 	orr.w	r3, r3, #8
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	b94b      	cbnz	r3, 8009ca2 <__swsetup_r+0x9a>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c98:	d003      	beq.n	8009ca2 <__swsetup_r+0x9a>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f000 fa07 	bl	800a0b0 <__smakebuf_r>
 8009ca2:	89a0      	ldrh	r0, [r4, #12]
 8009ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca8:	f010 0301 	ands.w	r3, r0, #1
 8009cac:	d00a      	beq.n	8009cc4 <__swsetup_r+0xbc>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60a3      	str	r3, [r4, #8]
 8009cb2:	6963      	ldr	r3, [r4, #20]
 8009cb4:	425b      	negs	r3, r3
 8009cb6:	61a3      	str	r3, [r4, #24]
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	b943      	cbnz	r3, 8009cce <__swsetup_r+0xc6>
 8009cbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cc0:	d1ba      	bne.n	8009c38 <__swsetup_r+0x30>
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	0781      	lsls	r1, r0, #30
 8009cc6:	bf58      	it	pl
 8009cc8:	6963      	ldrpl	r3, [r4, #20]
 8009cca:	60a3      	str	r3, [r4, #8]
 8009ccc:	e7f4      	b.n	8009cb8 <__swsetup_r+0xb0>
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e7f7      	b.n	8009cc2 <__swsetup_r+0xba>
 8009cd2:	bf00      	nop
 8009cd4:	20000014 	.word	0x20000014
 8009cd8:	0800a9cc 	.word	0x0800a9cc
 8009cdc:	0800a9ec 	.word	0x0800a9ec
 8009ce0:	0800a9ac 	.word	0x0800a9ac

08009ce4 <abort>:
 8009ce4:	b508      	push	{r3, lr}
 8009ce6:	2006      	movs	r0, #6
 8009ce8:	f000 fa52 	bl	800a190 <raise>
 8009cec:	2001      	movs	r0, #1
 8009cee:	f7f8 fd67 	bl	80027c0 <_exit>
	...

08009cf4 <__sflush_r>:
 8009cf4:	898a      	ldrh	r2, [r1, #12]
 8009cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	0710      	lsls	r0, r2, #28
 8009cfe:	460c      	mov	r4, r1
 8009d00:	d458      	bmi.n	8009db4 <__sflush_r+0xc0>
 8009d02:	684b      	ldr	r3, [r1, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	dc05      	bgt.n	8009d14 <__sflush_r+0x20>
 8009d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dc02      	bgt.n	8009d14 <__sflush_r+0x20>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	d0f9      	beq.n	8009d0e <__sflush_r+0x1a>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d20:	682f      	ldr	r7, [r5, #0]
 8009d22:	602b      	str	r3, [r5, #0]
 8009d24:	d032      	beq.n	8009d8c <__sflush_r+0x98>
 8009d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	075a      	lsls	r2, r3, #29
 8009d2c:	d505      	bpl.n	8009d3a <__sflush_r+0x46>
 8009d2e:	6863      	ldr	r3, [r4, #4]
 8009d30:	1ac0      	subs	r0, r0, r3
 8009d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d34:	b10b      	cbz	r3, 8009d3a <__sflush_r+0x46>
 8009d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d38:	1ac0      	subs	r0, r0, r3
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d40:	6a21      	ldr	r1, [r4, #32]
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b0      	blx	r6
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	d106      	bne.n	8009d5a <__sflush_r+0x66>
 8009d4c:	6829      	ldr	r1, [r5, #0]
 8009d4e:	291d      	cmp	r1, #29
 8009d50:	d82c      	bhi.n	8009dac <__sflush_r+0xb8>
 8009d52:	4a2a      	ldr	r2, [pc, #168]	; (8009dfc <__sflush_r+0x108>)
 8009d54:	40ca      	lsrs	r2, r1
 8009d56:	07d6      	lsls	r6, r2, #31
 8009d58:	d528      	bpl.n	8009dac <__sflush_r+0xb8>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	6062      	str	r2, [r4, #4]
 8009d5e:	04d9      	lsls	r1, r3, #19
 8009d60:	6922      	ldr	r2, [r4, #16]
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	d504      	bpl.n	8009d70 <__sflush_r+0x7c>
 8009d66:	1c42      	adds	r2, r0, #1
 8009d68:	d101      	bne.n	8009d6e <__sflush_r+0x7a>
 8009d6a:	682b      	ldr	r3, [r5, #0]
 8009d6c:	b903      	cbnz	r3, 8009d70 <__sflush_r+0x7c>
 8009d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d72:	602f      	str	r7, [r5, #0]
 8009d74:	2900      	cmp	r1, #0
 8009d76:	d0ca      	beq.n	8009d0e <__sflush_r+0x1a>
 8009d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d7c:	4299      	cmp	r1, r3
 8009d7e:	d002      	beq.n	8009d86 <__sflush_r+0x92>
 8009d80:	4628      	mov	r0, r5
 8009d82:	f7ff fadb 	bl	800933c <_free_r>
 8009d86:	2000      	movs	r0, #0
 8009d88:	6360      	str	r0, [r4, #52]	; 0x34
 8009d8a:	e7c1      	b.n	8009d10 <__sflush_r+0x1c>
 8009d8c:	6a21      	ldr	r1, [r4, #32]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b0      	blx	r6
 8009d94:	1c41      	adds	r1, r0, #1
 8009d96:	d1c7      	bne.n	8009d28 <__sflush_r+0x34>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0c4      	beq.n	8009d28 <__sflush_r+0x34>
 8009d9e:	2b1d      	cmp	r3, #29
 8009da0:	d001      	beq.n	8009da6 <__sflush_r+0xb2>
 8009da2:	2b16      	cmp	r3, #22
 8009da4:	d101      	bne.n	8009daa <__sflush_r+0xb6>
 8009da6:	602f      	str	r7, [r5, #0]
 8009da8:	e7b1      	b.n	8009d0e <__sflush_r+0x1a>
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	e7ad      	b.n	8009d10 <__sflush_r+0x1c>
 8009db4:	690f      	ldr	r7, [r1, #16]
 8009db6:	2f00      	cmp	r7, #0
 8009db8:	d0a9      	beq.n	8009d0e <__sflush_r+0x1a>
 8009dba:	0793      	lsls	r3, r2, #30
 8009dbc:	680e      	ldr	r6, [r1, #0]
 8009dbe:	bf08      	it	eq
 8009dc0:	694b      	ldreq	r3, [r1, #20]
 8009dc2:	600f      	str	r7, [r1, #0]
 8009dc4:	bf18      	it	ne
 8009dc6:	2300      	movne	r3, #0
 8009dc8:	eba6 0807 	sub.w	r8, r6, r7
 8009dcc:	608b      	str	r3, [r1, #8]
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	dd9c      	ble.n	8009d0e <__sflush_r+0x1a>
 8009dd4:	6a21      	ldr	r1, [r4, #32]
 8009dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dd8:	4643      	mov	r3, r8
 8009dda:	463a      	mov	r2, r7
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b0      	blx	r6
 8009de0:	2800      	cmp	r0, #0
 8009de2:	dc06      	bgt.n	8009df2 <__sflush_r+0xfe>
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	e78e      	b.n	8009d10 <__sflush_r+0x1c>
 8009df2:	4407      	add	r7, r0
 8009df4:	eba8 0800 	sub.w	r8, r8, r0
 8009df8:	e7e9      	b.n	8009dce <__sflush_r+0xda>
 8009dfa:	bf00      	nop
 8009dfc:	20400001 	.word	0x20400001

08009e00 <_fflush_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	690b      	ldr	r3, [r1, #16]
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	b913      	cbnz	r3, 8009e10 <_fflush_r+0x10>
 8009e0a:	2500      	movs	r5, #0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	b118      	cbz	r0, 8009e1a <_fflush_r+0x1a>
 8009e12:	6983      	ldr	r3, [r0, #24]
 8009e14:	b90b      	cbnz	r3, 8009e1a <_fflush_r+0x1a>
 8009e16:	f000 f887 	bl	8009f28 <__sinit>
 8009e1a:	4b14      	ldr	r3, [pc, #80]	; (8009e6c <_fflush_r+0x6c>)
 8009e1c:	429c      	cmp	r4, r3
 8009e1e:	d11b      	bne.n	8009e58 <_fflush_r+0x58>
 8009e20:	686c      	ldr	r4, [r5, #4]
 8009e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0ef      	beq.n	8009e0a <_fflush_r+0xa>
 8009e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e2c:	07d0      	lsls	r0, r2, #31
 8009e2e:	d404      	bmi.n	8009e3a <_fflush_r+0x3a>
 8009e30:	0599      	lsls	r1, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_fflush_r+0x3a>
 8009e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e36:	f000 f915 	bl	800a064 <__retarget_lock_acquire_recursive>
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	f7ff ff59 	bl	8009cf4 <__sflush_r>
 8009e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e44:	07da      	lsls	r2, r3, #31
 8009e46:	4605      	mov	r5, r0
 8009e48:	d4e0      	bmi.n	8009e0c <_fflush_r+0xc>
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	059b      	lsls	r3, r3, #22
 8009e4e:	d4dd      	bmi.n	8009e0c <_fflush_r+0xc>
 8009e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e52:	f000 f908 	bl	800a066 <__retarget_lock_release_recursive>
 8009e56:	e7d9      	b.n	8009e0c <_fflush_r+0xc>
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <_fflush_r+0x70>)
 8009e5a:	429c      	cmp	r4, r3
 8009e5c:	d101      	bne.n	8009e62 <_fflush_r+0x62>
 8009e5e:	68ac      	ldr	r4, [r5, #8]
 8009e60:	e7df      	b.n	8009e22 <_fflush_r+0x22>
 8009e62:	4b04      	ldr	r3, [pc, #16]	; (8009e74 <_fflush_r+0x74>)
 8009e64:	429c      	cmp	r4, r3
 8009e66:	bf08      	it	eq
 8009e68:	68ec      	ldreq	r4, [r5, #12]
 8009e6a:	e7da      	b.n	8009e22 <_fflush_r+0x22>
 8009e6c:	0800a9cc 	.word	0x0800a9cc
 8009e70:	0800a9ec 	.word	0x0800a9ec
 8009e74:	0800a9ac 	.word	0x0800a9ac

08009e78 <std>:
 8009e78:	2300      	movs	r3, #0
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e86:	6083      	str	r3, [r0, #8]
 8009e88:	8181      	strh	r1, [r0, #12]
 8009e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e8c:	81c2      	strh	r2, [r0, #14]
 8009e8e:	6183      	str	r3, [r0, #24]
 8009e90:	4619      	mov	r1, r3
 8009e92:	2208      	movs	r2, #8
 8009e94:	305c      	adds	r0, #92	; 0x5c
 8009e96:	f7fb fe15 	bl	8005ac4 <memset>
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <std+0x38>)
 8009e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <std+0x3c>)
 8009ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ea2:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <std+0x40>)
 8009ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ea6:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <std+0x44>)
 8009ea8:	6224      	str	r4, [r4, #32]
 8009eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	bf00      	nop
 8009eb0:	0800a1c9 	.word	0x0800a1c9
 8009eb4:	0800a1eb 	.word	0x0800a1eb
 8009eb8:	0800a223 	.word	0x0800a223
 8009ebc:	0800a247 	.word	0x0800a247

08009ec0 <_cleanup_r>:
 8009ec0:	4901      	ldr	r1, [pc, #4]	; (8009ec8 <_cleanup_r+0x8>)
 8009ec2:	f000 b8af 	b.w	800a024 <_fwalk_reent>
 8009ec6:	bf00      	nop
 8009ec8:	08009e01 	.word	0x08009e01

08009ecc <__sfmoreglue>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	1e4a      	subs	r2, r1, #1
 8009ed0:	2568      	movs	r5, #104	; 0x68
 8009ed2:	4355      	muls	r5, r2
 8009ed4:	460e      	mov	r6, r1
 8009ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eda:	f7ff fa7f 	bl	80093dc <_malloc_r>
 8009ede:	4604      	mov	r4, r0
 8009ee0:	b140      	cbz	r0, 8009ef4 <__sfmoreglue+0x28>
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ee8:	300c      	adds	r0, #12
 8009eea:	60a0      	str	r0, [r4, #8]
 8009eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ef0:	f7fb fde8 	bl	8005ac4 <memset>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}

08009ef8 <__sfp_lock_acquire>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	; (8009f00 <__sfp_lock_acquire+0x8>)
 8009efa:	f000 b8b3 	b.w	800a064 <__retarget_lock_acquire_recursive>
 8009efe:	bf00      	nop
 8009f00:	200033d0 	.word	0x200033d0

08009f04 <__sfp_lock_release>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__sfp_lock_release+0x8>)
 8009f06:	f000 b8ae 	b.w	800a066 <__retarget_lock_release_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	200033d0 	.word	0x200033d0

08009f10 <__sinit_lock_acquire>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__sinit_lock_acquire+0x8>)
 8009f12:	f000 b8a7 	b.w	800a064 <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	200033cb 	.word	0x200033cb

08009f1c <__sinit_lock_release>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__sinit_lock_release+0x8>)
 8009f1e:	f000 b8a2 	b.w	800a066 <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	200033cb 	.word	0x200033cb

08009f28 <__sinit>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	f7ff fff0 	bl	8009f10 <__sinit_lock_acquire>
 8009f30:	69a3      	ldr	r3, [r4, #24]
 8009f32:	b11b      	cbz	r3, 8009f3c <__sinit+0x14>
 8009f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f38:	f7ff bff0 	b.w	8009f1c <__sinit_lock_release>
 8009f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f40:	6523      	str	r3, [r4, #80]	; 0x50
 8009f42:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <__sinit+0x68>)
 8009f44:	4a13      	ldr	r2, [pc, #76]	; (8009f94 <__sinit+0x6c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	bf04      	itt	eq
 8009f4e:	2301      	moveq	r3, #1
 8009f50:	61a3      	streq	r3, [r4, #24]
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f820 	bl	8009f98 <__sfp>
 8009f58:	6060      	str	r0, [r4, #4]
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f81c 	bl	8009f98 <__sfp>
 8009f60:	60a0      	str	r0, [r4, #8]
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 f818 	bl	8009f98 <__sfp>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	60e0      	str	r0, [r4, #12]
 8009f6c:	2104      	movs	r1, #4
 8009f6e:	6860      	ldr	r0, [r4, #4]
 8009f70:	f7ff ff82 	bl	8009e78 <std>
 8009f74:	68a0      	ldr	r0, [r4, #8]
 8009f76:	2201      	movs	r2, #1
 8009f78:	2109      	movs	r1, #9
 8009f7a:	f7ff ff7d 	bl	8009e78 <std>
 8009f7e:	68e0      	ldr	r0, [r4, #12]
 8009f80:	2202      	movs	r2, #2
 8009f82:	2112      	movs	r1, #18
 8009f84:	f7ff ff78 	bl	8009e78 <std>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	61a3      	str	r3, [r4, #24]
 8009f8c:	e7d2      	b.n	8009f34 <__sinit+0xc>
 8009f8e:	bf00      	nop
 8009f90:	0800a558 	.word	0x0800a558
 8009f94:	08009ec1 	.word	0x08009ec1

08009f98 <__sfp>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	4607      	mov	r7, r0
 8009f9c:	f7ff ffac 	bl	8009ef8 <__sfp_lock_acquire>
 8009fa0:	4b1e      	ldr	r3, [pc, #120]	; (800a01c <__sfp+0x84>)
 8009fa2:	681e      	ldr	r6, [r3, #0]
 8009fa4:	69b3      	ldr	r3, [r6, #24]
 8009fa6:	b913      	cbnz	r3, 8009fae <__sfp+0x16>
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ffbd 	bl	8009f28 <__sinit>
 8009fae:	3648      	adds	r6, #72	; 0x48
 8009fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	d503      	bpl.n	8009fc0 <__sfp+0x28>
 8009fb8:	6833      	ldr	r3, [r6, #0]
 8009fba:	b30b      	cbz	r3, 800a000 <__sfp+0x68>
 8009fbc:	6836      	ldr	r6, [r6, #0]
 8009fbe:	e7f7      	b.n	8009fb0 <__sfp+0x18>
 8009fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fc4:	b9d5      	cbnz	r5, 8009ffc <__sfp+0x64>
 8009fc6:	4b16      	ldr	r3, [pc, #88]	; (800a020 <__sfp+0x88>)
 8009fc8:	60e3      	str	r3, [r4, #12]
 8009fca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fce:	6665      	str	r5, [r4, #100]	; 0x64
 8009fd0:	f000 f847 	bl	800a062 <__retarget_lock_init_recursive>
 8009fd4:	f7ff ff96 	bl	8009f04 <__sfp_lock_release>
 8009fd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fe0:	6025      	str	r5, [r4, #0]
 8009fe2:	61a5      	str	r5, [r4, #24]
 8009fe4:	2208      	movs	r2, #8
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fec:	f7fb fd6a 	bl	8005ac4 <memset>
 8009ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ffc:	3468      	adds	r4, #104	; 0x68
 8009ffe:	e7d9      	b.n	8009fb4 <__sfp+0x1c>
 800a000:	2104      	movs	r1, #4
 800a002:	4638      	mov	r0, r7
 800a004:	f7ff ff62 	bl	8009ecc <__sfmoreglue>
 800a008:	4604      	mov	r4, r0
 800a00a:	6030      	str	r0, [r6, #0]
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d1d5      	bne.n	8009fbc <__sfp+0x24>
 800a010:	f7ff ff78 	bl	8009f04 <__sfp_lock_release>
 800a014:	230c      	movs	r3, #12
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	e7ee      	b.n	8009ff8 <__sfp+0x60>
 800a01a:	bf00      	nop
 800a01c:	0800a558 	.word	0x0800a558
 800a020:	ffff0001 	.word	0xffff0001

0800a024 <_fwalk_reent>:
 800a024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a028:	4606      	mov	r6, r0
 800a02a:	4688      	mov	r8, r1
 800a02c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a030:	2700      	movs	r7, #0
 800a032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a036:	f1b9 0901 	subs.w	r9, r9, #1
 800a03a:	d505      	bpl.n	800a048 <_fwalk_reent+0x24>
 800a03c:	6824      	ldr	r4, [r4, #0]
 800a03e:	2c00      	cmp	r4, #0
 800a040:	d1f7      	bne.n	800a032 <_fwalk_reent+0xe>
 800a042:	4638      	mov	r0, r7
 800a044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a048:	89ab      	ldrh	r3, [r5, #12]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d907      	bls.n	800a05e <_fwalk_reent+0x3a>
 800a04e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a052:	3301      	adds	r3, #1
 800a054:	d003      	beq.n	800a05e <_fwalk_reent+0x3a>
 800a056:	4629      	mov	r1, r5
 800a058:	4630      	mov	r0, r6
 800a05a:	47c0      	blx	r8
 800a05c:	4307      	orrs	r7, r0
 800a05e:	3568      	adds	r5, #104	; 0x68
 800a060:	e7e9      	b.n	800a036 <_fwalk_reent+0x12>

0800a062 <__retarget_lock_init_recursive>:
 800a062:	4770      	bx	lr

0800a064 <__retarget_lock_acquire_recursive>:
 800a064:	4770      	bx	lr

0800a066 <__retarget_lock_release_recursive>:
 800a066:	4770      	bx	lr

0800a068 <__swhatbuf_r>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	460e      	mov	r6, r1
 800a06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a070:	2900      	cmp	r1, #0
 800a072:	b096      	sub	sp, #88	; 0x58
 800a074:	4614      	mov	r4, r2
 800a076:	461d      	mov	r5, r3
 800a078:	da07      	bge.n	800a08a <__swhatbuf_r+0x22>
 800a07a:	2300      	movs	r3, #0
 800a07c:	602b      	str	r3, [r5, #0]
 800a07e:	89b3      	ldrh	r3, [r6, #12]
 800a080:	061a      	lsls	r2, r3, #24
 800a082:	d410      	bmi.n	800a0a6 <__swhatbuf_r+0x3e>
 800a084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a088:	e00e      	b.n	800a0a8 <__swhatbuf_r+0x40>
 800a08a:	466a      	mov	r2, sp
 800a08c:	f000 f902 	bl	800a294 <_fstat_r>
 800a090:	2800      	cmp	r0, #0
 800a092:	dbf2      	blt.n	800a07a <__swhatbuf_r+0x12>
 800a094:	9a01      	ldr	r2, [sp, #4]
 800a096:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a09a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a09e:	425a      	negs	r2, r3
 800a0a0:	415a      	adcs	r2, r3
 800a0a2:	602a      	str	r2, [r5, #0]
 800a0a4:	e7ee      	b.n	800a084 <__swhatbuf_r+0x1c>
 800a0a6:	2340      	movs	r3, #64	; 0x40
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	b016      	add	sp, #88	; 0x58
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}

0800a0b0 <__smakebuf_r>:
 800a0b0:	898b      	ldrh	r3, [r1, #12]
 800a0b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0b4:	079d      	lsls	r5, r3, #30
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	d507      	bpl.n	800a0cc <__smakebuf_r+0x1c>
 800a0bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	6123      	str	r3, [r4, #16]
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	6163      	str	r3, [r4, #20]
 800a0c8:	b002      	add	sp, #8
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	ab01      	add	r3, sp, #4
 800a0ce:	466a      	mov	r2, sp
 800a0d0:	f7ff ffca 	bl	800a068 <__swhatbuf_r>
 800a0d4:	9900      	ldr	r1, [sp, #0]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7ff f97f 	bl	80093dc <_malloc_r>
 800a0de:	b948      	cbnz	r0, 800a0f4 <__smakebuf_r+0x44>
 800a0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e4:	059a      	lsls	r2, r3, #22
 800a0e6:	d4ef      	bmi.n	800a0c8 <__smakebuf_r+0x18>
 800a0e8:	f023 0303 	bic.w	r3, r3, #3
 800a0ec:	f043 0302 	orr.w	r3, r3, #2
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	e7e3      	b.n	800a0bc <__smakebuf_r+0xc>
 800a0f4:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <__smakebuf_r+0x7c>)
 800a0f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	6020      	str	r0, [r4, #0]
 800a0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	9b00      	ldr	r3, [sp, #0]
 800a104:	6163      	str	r3, [r4, #20]
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	6120      	str	r0, [r4, #16]
 800a10a:	b15b      	cbz	r3, 800a124 <__smakebuf_r+0x74>
 800a10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a110:	4630      	mov	r0, r6
 800a112:	f000 f8d1 	bl	800a2b8 <_isatty_r>
 800a116:	b128      	cbz	r0, 800a124 <__smakebuf_r+0x74>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f023 0303 	bic.w	r3, r3, #3
 800a11e:	f043 0301 	orr.w	r3, r3, #1
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	89a0      	ldrh	r0, [r4, #12]
 800a126:	4305      	orrs	r5, r0
 800a128:	81a5      	strh	r5, [r4, #12]
 800a12a:	e7cd      	b.n	800a0c8 <__smakebuf_r+0x18>
 800a12c:	08009ec1 	.word	0x08009ec1

0800a130 <_malloc_usable_size_r>:
 800a130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a134:	1f18      	subs	r0, r3, #4
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfbc      	itt	lt
 800a13a:	580b      	ldrlt	r3, [r1, r0]
 800a13c:	18c0      	addlt	r0, r0, r3
 800a13e:	4770      	bx	lr

0800a140 <_raise_r>:
 800a140:	291f      	cmp	r1, #31
 800a142:	b538      	push	{r3, r4, r5, lr}
 800a144:	4604      	mov	r4, r0
 800a146:	460d      	mov	r5, r1
 800a148:	d904      	bls.n	800a154 <_raise_r+0x14>
 800a14a:	2316      	movs	r3, #22
 800a14c:	6003      	str	r3, [r0, #0]
 800a14e:	f04f 30ff 	mov.w	r0, #4294967295
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a156:	b112      	cbz	r2, 800a15e <_raise_r+0x1e>
 800a158:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a15c:	b94b      	cbnz	r3, 800a172 <_raise_r+0x32>
 800a15e:	4620      	mov	r0, r4
 800a160:	f000 f830 	bl	800a1c4 <_getpid_r>
 800a164:	462a      	mov	r2, r5
 800a166:	4601      	mov	r1, r0
 800a168:	4620      	mov	r0, r4
 800a16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a16e:	f000 b817 	b.w	800a1a0 <_kill_r>
 800a172:	2b01      	cmp	r3, #1
 800a174:	d00a      	beq.n	800a18c <_raise_r+0x4c>
 800a176:	1c59      	adds	r1, r3, #1
 800a178:	d103      	bne.n	800a182 <_raise_r+0x42>
 800a17a:	2316      	movs	r3, #22
 800a17c:	6003      	str	r3, [r0, #0]
 800a17e:	2001      	movs	r0, #1
 800a180:	e7e7      	b.n	800a152 <_raise_r+0x12>
 800a182:	2400      	movs	r4, #0
 800a184:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a188:	4628      	mov	r0, r5
 800a18a:	4798      	blx	r3
 800a18c:	2000      	movs	r0, #0
 800a18e:	e7e0      	b.n	800a152 <_raise_r+0x12>

0800a190 <raise>:
 800a190:	4b02      	ldr	r3, [pc, #8]	; (800a19c <raise+0xc>)
 800a192:	4601      	mov	r1, r0
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	f7ff bfd3 	b.w	800a140 <_raise_r>
 800a19a:	bf00      	nop
 800a19c:	20000014 	.word	0x20000014

0800a1a0 <_kill_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4d07      	ldr	r5, [pc, #28]	; (800a1c0 <_kill_r+0x20>)
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	602b      	str	r3, [r5, #0]
 800a1ae:	f7f8 faf7 	bl	80027a0 <_kill>
 800a1b2:	1c43      	adds	r3, r0, #1
 800a1b4:	d102      	bne.n	800a1bc <_kill_r+0x1c>
 800a1b6:	682b      	ldr	r3, [r5, #0]
 800a1b8:	b103      	cbz	r3, 800a1bc <_kill_r+0x1c>
 800a1ba:	6023      	str	r3, [r4, #0]
 800a1bc:	bd38      	pop	{r3, r4, r5, pc}
 800a1be:	bf00      	nop
 800a1c0:	200033c4 	.word	0x200033c4

0800a1c4 <_getpid_r>:
 800a1c4:	f7f8 bae4 	b.w	8002790 <_getpid>

0800a1c8 <__sread>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d0:	f000 f894 	bl	800a2fc <_read_r>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	bfab      	itete	ge
 800a1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1da:	89a3      	ldrhlt	r3, [r4, #12]
 800a1dc:	181b      	addge	r3, r3, r0
 800a1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1e2:	bfac      	ite	ge
 800a1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1e6:	81a3      	strhlt	r3, [r4, #12]
 800a1e8:	bd10      	pop	{r4, pc}

0800a1ea <__swrite>:
 800a1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ee:	461f      	mov	r7, r3
 800a1f0:	898b      	ldrh	r3, [r1, #12]
 800a1f2:	05db      	lsls	r3, r3, #23
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	4616      	mov	r6, r2
 800a1fa:	d505      	bpl.n	800a208 <__swrite+0x1e>
 800a1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a200:	2302      	movs	r3, #2
 800a202:	2200      	movs	r2, #0
 800a204:	f000 f868 	bl	800a2d8 <_lseek_r>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a20e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	4632      	mov	r2, r6
 800a216:	463b      	mov	r3, r7
 800a218:	4628      	mov	r0, r5
 800a21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a21e:	f000 b817 	b.w	800a250 <_write_r>

0800a222 <__sseek>:
 800a222:	b510      	push	{r4, lr}
 800a224:	460c      	mov	r4, r1
 800a226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22a:	f000 f855 	bl	800a2d8 <_lseek_r>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	bf15      	itete	ne
 800a234:	6560      	strne	r0, [r4, #84]	; 0x54
 800a236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a23a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a23e:	81a3      	strheq	r3, [r4, #12]
 800a240:	bf18      	it	ne
 800a242:	81a3      	strhne	r3, [r4, #12]
 800a244:	bd10      	pop	{r4, pc}

0800a246 <__sclose>:
 800a246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24a:	f000 b813 	b.w	800a274 <_close_r>
	...

0800a250 <_write_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d07      	ldr	r5, [pc, #28]	; (800a270 <_write_r+0x20>)
 800a254:	4604      	mov	r4, r0
 800a256:	4608      	mov	r0, r1
 800a258:	4611      	mov	r1, r2
 800a25a:	2200      	movs	r2, #0
 800a25c:	602a      	str	r2, [r5, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	f7f8 fad5 	bl	800280e <_write>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_write_r+0x1e>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_write_r+0x1e>
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	200033c4 	.word	0x200033c4

0800a274 <_close_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d06      	ldr	r5, [pc, #24]	; (800a290 <_close_r+0x1c>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	f7f8 fae1 	bl	8002846 <_close>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_close_r+0x1a>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_close_r+0x1a>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	200033c4 	.word	0x200033c4

0800a294 <_fstat_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d07      	ldr	r5, [pc, #28]	; (800a2b4 <_fstat_r+0x20>)
 800a298:	2300      	movs	r3, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	4611      	mov	r1, r2
 800a2a0:	602b      	str	r3, [r5, #0]
 800a2a2:	f7f8 fadc 	bl	800285e <_fstat>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	d102      	bne.n	800a2b0 <_fstat_r+0x1c>
 800a2aa:	682b      	ldr	r3, [r5, #0]
 800a2ac:	b103      	cbz	r3, 800a2b0 <_fstat_r+0x1c>
 800a2ae:	6023      	str	r3, [r4, #0]
 800a2b0:	bd38      	pop	{r3, r4, r5, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200033c4 	.word	0x200033c4

0800a2b8 <_isatty_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4d06      	ldr	r5, [pc, #24]	; (800a2d4 <_isatty_r+0x1c>)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4604      	mov	r4, r0
 800a2c0:	4608      	mov	r0, r1
 800a2c2:	602b      	str	r3, [r5, #0]
 800a2c4:	f7f8 fadb 	bl	800287e <_isatty>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_isatty_r+0x1a>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_isatty_r+0x1a>
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	200033c4 	.word	0x200033c4

0800a2d8 <_lseek_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d07      	ldr	r5, [pc, #28]	; (800a2f8 <_lseek_r+0x20>)
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f7f8 fad4 	bl	8002894 <_lseek>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d102      	bne.n	800a2f6 <_lseek_r+0x1e>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	b103      	cbz	r3, 800a2f6 <_lseek_r+0x1e>
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	200033c4 	.word	0x200033c4

0800a2fc <_read_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d07      	ldr	r5, [pc, #28]	; (800a31c <_read_r+0x20>)
 800a300:	4604      	mov	r4, r0
 800a302:	4608      	mov	r0, r1
 800a304:	4611      	mov	r1, r2
 800a306:	2200      	movs	r2, #0
 800a308:	602a      	str	r2, [r5, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f7f8 fa62 	bl	80027d4 <_read>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_read_r+0x1e>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_read_r+0x1e>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	200033c4 	.word	0x200033c4

0800a320 <_init>:
 800a320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a322:	bf00      	nop
 800a324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a326:	bc08      	pop	{r3}
 800a328:	469e      	mov	lr, r3
 800a32a:	4770      	bx	lr

0800a32c <_fini>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	bf00      	nop
 800a330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a332:	bc08      	pop	{r3}
 800a334:	469e      	mov	lr, r3
 800a336:	4770      	bx	lr
